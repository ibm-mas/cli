#!/usr/bin/env bash

function gitops_aibroker_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM


Usage:
  mas gitops-aibroker [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Basic Configuration:
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}                                                  Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}                                                  Cluster ID
  -i, --Instace-id ${COLOR_YELLOW}INSTANCE_ID${TEXT_RESET}                                                 Instance ID

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                                              Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}  

ibm aibroker(required):
      --aibroker-namespace ${TEXT_RESET}AIBROKER_NAMESPACE${TEXT_RESET}
      --mas-instance-id ${TEXT_RESET}MAS_INSTACE_ID${TEXT_RESET}
      --primary-storage-class ${TEXT_RESET}PRIMARY_STORAGE_CLASS${TEXT_RESET}

minio storage:
      --mas-aibroker-storage-provider ${TEXT_RESET}MAS_AIBROKER_STORAGE_PROVIDER${TEXT_RESET}
      --mas-aibroker-minio-secret ${TEXT_RESET}MAS_AIBROKER_MINIO_SECRET${TEXT_RESET}
      --mas-aibroker-storage-accesskey ${TEXT_RESET}MAS_AIBROKER_STORAGE_ACCESSKEY${TEXT_RESET}
      --mas-aibroker-storage-secretkey ${TEXT_RESET}MAS_AIBROKER_STORAGE_SECRETKEY${TEXT_RESET}
      --mas-aibroker-storage-host ${TEXT_RESET}MAS_AIBROKER_STORAGE_HOST${TEXT_RESET}
      --mas-aibroker-storage-port ${TEXT_RESET}MAS_AIBROKER_STORAGE_PORT${TEXT_RESET}
      --mas-aibroker-storage-ssl ${TEXT_RESET}MAS_AIBROKER_STORAGE_SSL${TEXT_RESET}
      --mas-aibroker-storage-region ${TEXT_RESET}MAS_AIBROKER_STORAGE_REGION${TEXT_RESET}
      --mas-aibroker-storage-pipelines-bucket ${TEXT_RESET}MAS_AIBROKER_STORAGE_PIPELINES_BUCKET${TEXT_RESET}
      --mas-aibroker-storage-tenants-bucket ${TEXT_RESET}MAS_AIBROKER_STORAGE_TENANTS_BUCKET${TEXT_RESET}
      --mas-aibroker-storage-templates-bucket ${TEXT_RESET}MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET${TEXT_RESET}

mariadb storage
      --mas-aibroker-db-host ${TEXT_RESET}MAS_AIBROKER_DB_HOST${TEXT_RESET}
      --mas-aibroker-mariadb-secret ${TEXT_RESET}MAS_AIBROKER_MARIADB_SECRET${TEXT_RESET}
      --mas-aibroker-db-port ${TEXT_RESET}MAS_AIBROKER_DB_PORT${TEXT_RESET}
      --mas-aibroker-db-user ${TEXT_RESET}MAS_AIBROKER_DB_USER${TEXT_RESET}
      --mas-aibroker-db-database ${TEXT_RESET}MAS_AIBROKER_DB_DATABASE${TEXT_RESET}
      --mas-aibroker-db-secret-name ${TEXT_RESET}MAS_AIBROKER_DB_SECRET_NAME${TEXT_RESET}
      --mas-aibroker-db-secret-value ${TEXT_RESET}MAS_AIBROKER_DB_SECRET_VALUE${TEXT_RESET}

sls_dro_jdbc
      --slscfg-registration-key ${TEXT_RESET}SLSCFG_REGISTRATION_KEY${TEXT_RESET}
      --drocfg-ca ${TEXT_RESET}DROCFG_CA${TEXT_RESET}
      --drocfg-registration-key ${TEXT_RESET}DROCFG_REGISTRATION_KEY${TEXT_RESET}
      --drocfg-url ${TEXT_RESET}DROCFG_URL${TEXT_RESET}
      --jdbccfg-username ${TEXT_RESET}JDBCCFG_USERNAME${TEXT_RESET}
      --jdbccfg-password ${TEXT_RESET}JDBCCFG_PASSWORD${TEXT_RESET}
      --jdbccfg-url ${TEXT_RESET}JDBCCFG_URL${TEXT_RESET}
      --jdbccfg-sslenabled ${TEXT_RESET}JDBCCFG_SSLENABLED${TEXT_RESET}
      --jdbccfg-ca ${TEXT_RESET}JDBCCFG_CA${TEXT_RESET}

      --mas-entitlement-key ${TEXT_RESET}MAS_ENTITLEMENT_KEY${TEXT_RESET}
      --artifactory-username ${TEXT_RESET}ARTIFACTORY_USERNAME${TEXT_RESET}
      --artifactory-token ${TEXT_RESET}ARTIFACTORY_TOKEN${TEXT_RESET}
      --mas-app-channel ${TEXT_RESET}MAS_APP_CHANNEL${TEXT_RESET}
      --mas-catalog-source ${TEXT_RESET}MAS_CATALOG_SOURCE${TEXT_RESET}
      --mas-icr-cp ${TEXT_RESET}MAS_ICR_CP${TEXT_RESET}
      --mas-icr-cpopen ${TEXT_RESET}MAS_ICR_CPOPEN${TEXT_RESET}
      --cluster-domain ${TEXT_RESET}CLUSTER_DOMAIN${TEXT_RESET}
      --in-saas-env ${TEXT_RESET}IN_SAAS_ENV${TEXT_RESET}

Automatic GitHub Push (Optional):
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}          Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -S, --github-ssh ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}             Git ssh key path
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_aibroker_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-aibroker commit"

   #adding default values # all generic values should to put here # check with ansible playbook/gitops anvs 
   #only export below in whiel loop

  #adding default values 
  export AIBROKER_NAMESPACE=${AIBROKER_NAMESPACE:-"mas-${MAS_INSTANCE_ID}-aibroker"}
  export IN_SAAS_ENV=${IN_SAAS_ENV:-"true"}
  export MAS_ICR_CP=${MAS_ICR_CP:-"docker-na-public.artifactory.swg-devops.com/wiotp-docker-local"}
  export MAS_ICR_CPOPEN=${MAS_ICR_CPOPEN:-"docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen"}
  #dro
  # -- SLS Defaults
  export REGION_ID=${REGION_ID:-${SM_AWS_REGION}} 
  export MAS_APP_ID=${MAS_APP_ID:-"aibroker"}
  export MAS_AIBROKER_WATSONX_SECRET=${MAS_AIBROKER_WATSONX_SECRET:-"${MAS_APP_ID}-watsonxcfg"}
  export MAS_AIBROKER_STORAGE_PROVIDER=${MAS_AIBROKER_STORAGE_PROVIDER:-"aws"}
  #Minio Defaults
  export MAS_AIBROKER_STORAGE_REGION=${MAS_AIBROKER_STORAGE_REGION:-""}
  export MAS_AIBROKER_STORAGE_SSL=${MAS_AIBROKER_STORAGE_SSL:-"true"}
  export MAS_AIBROKER_MINIO_SECRET=${MAS_AIBROKER_MINIO_SECRET:-"${MAS_APP_ID}-miniocfg"}
  export MAS_CATALOG_SOURCE=${MAS_CATALOG_SOURCE:-"ibm-operator-catalog"}
  #-- mariadb defaults
  export MAS_AIBROKER_MARIADB_SECRET=${MAS_AIBROKER_MARIADB_SECRET:-"${MAS_APP_ID}-mariadbcfge"}

    ##review
  export MAS_AIBROKER_S3_BUCKET_PREFIX=${MAS_AIBROKER_S3_BUCKET_PREFIX:-"m"}
  export MAS_AIBROKER_S3_REGION=${MAS_AIBROKER_S3_REGION:-"us-east-2"}
  export ENVIRONMENT_TYPE=${ENVIRONMENT_TYPE:-"standard"}
  ##review

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # AWS Secrets Manager Configuration
      --sm-aws-secret-region)
        export SM_AWS_REGION=$1
        export REGION_ID=$1
        shift
        ;;
      --sm-aws-access-key)
        export SM_AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --sm-aws-secret-key)
        export SM_AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;

       --aibroker-namespace)
          export AIBROKER_NAMESPACE=$1 && shift
        ;;
       --in-saas-env)
          export IN_SAAS_ENV=$1 && shift
        ;;
      --mas-icr-cp)
        export MAS_ICR_CP=$1 && shift
        ;;
      --mas-icr-cpopen)
        export MAS_ICR_CPOPEN=$1 && shift
        ;;

      --region-id)
        export REGION_ID=$1 && shift
        ;;

      --mas-aibroker-watsonx-secret)
          export MAS_AIBROKER_WATSONX_SECRET=$1 && shift
        ;;
      --mas-aibroker-storage-provider)
          export MAS_AIBROKER_STORAGE_PROVIDER=$1 && shift
        ;;
      --mas-aibroker-storage-region)
        export MAS_AIBROKER_STORAGE_REGION=$1 && shift
        ;;
      --mas-aibroker-storage-ssl)
        export MAS_AIBROKER_STORAGE_SSL=$1 && shift
        ;;
      --mas-aibroker-minio-secret)
          export MAS_AIBROKER_MINIO_SECRET=$1 && shift
        ;;
      --mas-catalog-source)
          export MAS_CATALOG_SOURCE=$1 && shift
        ;;

      --mas-aibroker-mariadb-secret)
          export MAS_AIBROKER_MARIADB_SECRET=$1 && shift
        ;;
      ##review
      --environment-type)
        export ENVIRONMENT_TYPE=$1 && shift
        ;;

      --mas-aibroker-s3-endpoint-url)
        export MAS_AIBROKER_S3_ENDPOINT_URL=$1 && shift
        ;;

      --mas-aibroker-s3-region)
        export MAS_AIBROKER_S3_REGION=$1 && shift
        ;;

      --mas-aibroker-s3-bucket-prefix)
        export MAS_AIBROKER_S3_BUCKET_PREFIX=$1 && shift
        ;;
      ##review

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_aibroker_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_aibroker_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done


  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_aibroker_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_aibroker_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_aibroker_help "CLUSTER_ID is not set"
  [[ -z "$REGION_ID" && -z "$SM_AWS_REGION" ]] && gitops_aibroker_help "REGION_ID or SM_AWS_REGION is not set"

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_aibroker_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_aibroker_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_aibroker_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_aibroker_help "GIT_BRANCH is not set"
    
  fi

# add validation below like above  for those variable which have the value needed for further execution
# -- AIBroker
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_aibroker_help "MAS_INSTANCE_ID is not set. Please provide the MAS instance ID using --mas-instance-id."
  [[ -z "$PRIMARY_STORAGE_CLASS" ]] && gitops_aibroker_help "PRIMARY_STORAGE_CLASS is not set. Please provide the primary storage class using --primary-storage-class."
  #[[ -z "$TENANT_NAMESPACE" ]] && gitops_aibroker_help "TENANT_NAMESPACE is not set. Please specify the tenant namespace using --tenantNamespace."
  [[ -z "$CLUSTER_DOMAIN" ]] && gitops_aibroker_help "CLUSTER_DOMAIN is not set. Please provide the cluster domain using --cluster-domain."
  [[ -z "$ARTIFACTORY_USERNAME" ]] && gitops_aibroker_help "ARTIFACTORY_USERNAME is not set. Please provide the artifactory username using --artifactory-username"
  [[ -z "$MAS_APP_CHANNEL" ]] && gitops_aibroker_help "MAS_APP_CHANNEL is not set. Please provide the mas app channel using --mas-app-channel"
  # -- DRO
  #[[ -z "$DROCFG_URL" ]] && gitops_aibroker_help "DROCFG_URL is not set. Please specify the DRO configuration URL using --drocfg-url."
  ##review
  [[ -z "$MAS_AIBROKER_S3_ENDPOINT_URL" ]] && gitops_aibroker_help "MAS_AIBROKER_S3_ENDPOINT_URL is not set. Please specify the S3 endpoint URL using --mas-aibroker-s3-endpoint-url."
  ##review

}

function gitops_aibroker() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_aibroker_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_aibroker_interactive
  fi

  # catch errors
  set -o pipefail
  trap 'echo "[ERROR] Error occurred at $BASH_SOURCE, line $LINENO, exited with $?"; exit 1' ERR

  rm -rf $GITOPS_WORKING_DIR
  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${CLUSTER_ID}/${MAS_INSTANCE_ID}
  # TEMP_DIR=$GITOPS_CLUSTER_DIR/tmp-aibroker
  # mkdir -p ${TEMP_DIR}
  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ..................... ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region ID ...................... ${COLOR_MAGENTA}${REGION_ID}"
  echo_reset_dim "Cluster ID ..................... ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Cluster Config Directory ....... ${COLOR_MAGENTA}${GITOPS_CLUSTER_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "AWS Secrets Manager" "    "
  echo_reset_dim "Region ......................... ${COLOR_MAGENTA}${SM_AWS_REGION}"
  echo_reset_dim "Secret Key ..................... ${COLOR_MAGENTA}${SM_AWS_ACCESS_KEY_ID:0:4}<snip>"
  echo_reset_dim "Access Key ..................... ${COLOR_MAGENTA}${SM_AWS_SECRET_ACCESS_KEY:0:4}<snip>"
  echo_reset_dim "Secrets Path ................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  # echo all the variables ofgitops+envs
  echo_reset_dim "MAS Instance ID ....................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "AI Broker Namespace ................... ${COLOR_MAGENTA}${AIBROKER_NAMESPACE}"
  echo_reset_dim "MAS AI Broker WatsonX Secret .......... ${COLOR_MAGENTA}${MAS_AIBROKER_WATSONX_SECRET}"
  echo_reset_dim "Pull Secret Name ...................... ${COLOR_MAGENTA}${PULL_SECRET_NAME}"
  # Storage variables
  echo_reset_dim "MAS AI Broker Storage Provider ........ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_PROVIDER}"
  echo_reset_dim "MAS AI Broker MinIO Secret ............ ${COLOR_MAGENTA}${MAS_AIBROKER_MINIO_SECRET}"
  echo_reset_dim "MAS AI Broker Storage Access Key ...... ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_ACCESSKEY}"
  echo_reset_dim "MAS AI Broker Storage Secret Key ...... ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_SECRETKEY}"
  echo_reset_dim "MAS AI Broker Storage Host ............ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_HOST}"
  echo_reset_dim "MAS AI Broker Storage Port ............ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_PORT}"
  echo_reset_dim "MAS AI Broker Storage SSL ............. ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_SSL}"
  echo_reset_dim "MAS AI Broker Storage Region .......... ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_REGION}"
  echo_reset_dim "MAS AI Broker Pipelines Bucket ........ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_PIPELINES_BUCKET}"
  echo_reset_dim "MAS AI Broker Tenants Bucket .......... ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_TENANTS_BUCKET}"
  echo_reset_dim "MAS AI Broker Templates Bucket ........ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET}"
  echo_reset_dim "MAS AI Broker DB Host ................. ${COLOR_MAGENTA}${MAS_AIBROKER_DB_HOST}"
  echo_reset_dim "MAS AI Broker MariaDB Secret .......... ${COLOR_MAGENTA}${MAS_AIBROKER_MARIADB_SECRET}"
  echo_reset_dim "MAS AI Broker DB Port ................. ${COLOR_MAGENTA}${MAS_AIBROKER_DB_PORT}"
  echo_reset_dim "MAS AI Broker DB User ................. ${COLOR_MAGENTA}${MAS_AIBROKER_DB_USER}"
  echo_reset_dim "MAS AI Broker DB Database ............. ${COLOR_MAGENTA}${MAS_AIBROKER_DB_DATABASE}"
  echo_reset_dim "MAS AI Broker DB Secret Name .......... ${COLOR_MAGENTA}${MAS_AIBROKER_DB_SECRET_NAME}"
  echo_reset_dim "MAS AI Broker DB Secret Value ......... ${COLOR_MAGENTA}${MAS_AIBROKER_DB_SECRET_VALUE}"
  
  echo_reset_dim "Primary Storage Class ................. ${COLOR_MAGENTA}${PRIMARY_STORAGE_CLASS}"


  echo_reset_dim "SLS Config Registration Key ............ ${COLOR_MAGENTA}${SLSCFG_REGISTRATION_KEY}"
  echo_reset_dim "DRO Config CA .......................... ${COLOR_MAGENTA}${DROCFG_CA}"
  echo_reset_dim "DRO Config Registration Key ............ ${COLOR_MAGENTA}${DROCFG_REGISTRATION_KEY}"
  echo_reset_dim "DRO Config URL ......................... ${COLOR_MAGENTA}${DROCFG_URL}"
  echo_reset_dim "JDBC Config Username ................... ${COLOR_MAGENTA}${JDBCCFG_USERNAME}"
  echo_reset_dim "JDBC Config Password ................... ${COLOR_MAGENTA}${JDBCCFG_PASSWORD}"
  echo_reset_dim "JDBC Config URL ........................ ${COLOR_MAGENTA}${JDBCCFG_URL}"
  echo_reset_dim "JDBC SSL Enabled ....................... ${COLOR_MAGENTA}${JDBCCFG_SSLENABLED}"
  echo_reset_dim "JDBC Config CA ......................... ${COLOR_MAGENTA}${JDBCCFG_CA}"
  echo_reset_dim "MAS Entitlement Key .................... ${COLOR_MAGENTA}${MAS_ENTITLEMENT_KEY}"
  echo_reset_dim "Artifactory Username ................... ${COLOR_MAGENTA}${ARTIFACTORY_USERNAME}"
  echo_reset_dim "Artifactory Token ...................... ${COLOR_MAGENTA}${ARTIFACTORY_TOKEN}"
  echo_reset_dim "MAS App Channel ........................ ${COLOR_MAGENTA}${MAS_APP_CHANNEL}"
  echo_reset_dim "MAS Catalog Source ..................... ${COLOR_MAGENTA}${MAS_CATALOG_SOURCE}"
  echo_reset_dim "MAS ICR CP ............................. ${COLOR_MAGENTA}${MAS_ICR_CP}"
  echo_reset_dim "MAS ICR CPOpen ......................... ${COLOR_MAGENTA}${MAS_ICR_CPOPEN}"
  echo_reset_dim "Cluster Domain ......................... ${COLOR_MAGENTA}${CLUSTER_DOMAIN}"
  echo_reset_dim "In SaaS Environment .................... ${COLOR_MAGENTA}${IN_SAAS_ENV}"


  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login
  # update those varialbe which are necessory to be updated into aws , 
  SECRETS_PREFIX="${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}"


  export SECRET_KEY_IBM_ENTITLEMENT=${SECRETS_PREFIX}ibm_entitlement#entitlement_key

  #minio
  # mas_aibroker_storage_accesskey
  export SECRET_KEY_MINIO_ACCESSKEY=${SECRETS_PREFIX}minio#sm_minio_accesskey
  export SECRET_KEY_MINIO_SECRETKEY=${SECRETS_PREFIX}minio#sm_minio_secretkey
  # mas_aibroker_storage_host
  export SECRET_KEY_MINIO_HOST=${SECRETS_PREFIX}minio#sm_minio_host
  export SECRET_KEY_MINIO_PORT=${SECRETS_PREFIX}minio#sm_minio_port
  # mas_aibroker_storage_templates_bucket
  export SM_MINIO_BUCKET_TEMPLATES=${SECRETS_PREFIX}minio#sm_minio_bucket_templates
  # mas_aibroker_storage_tenants_bucket
  export SM_MINIO_BUCKET_TENANTS=${SECRETS_PREFIX}minio#sm_minio_bucket_tenants
  # mas_aibroker_storage_pipelines_bucket
  export SM_MINIO_BUCKET_PIPELINES=${SECRETS_PREFIX}minio#sm_minio_bucket_pipelines


  #mariadb
  export MAS_AIBROKER_DB_HOST=${SECRETS_PREFIX}mariadb#sm_mariadb_host
  export MAS_AIBROKER_DB_PORT=${SECRETS_PREFIX}mariadb#sm_mariadb_port
  export MAS_AIBROKER_DB_USER=${SECRETS_PREFIX}mariadb#sm_mariadb_user
  export MAS_AIBROKER_DB_DATABASE=${SECRETS_PREFIX}mariadb#sm_mariadb_database
  export MAS_AIBROKER_DB_SECRET_NAME=${SECRETS_PREFIX}mariadb#sm_mariadb_secret_name
  export MAS_AIBROKER_DB_SECRET_VALUE=${SECRETS_PREFIX}mariadb#sm_mariadb_secret_value

  #sls
  export SLSCFG_REGISTRATION_KEY=${SECRETS_PREFIX}sls#slscfg_registration_key
  #dro
  export DROCFG_CA=${SECRETS_PREFIX}dro#drocfg_ca
  export DROCFG_REGISTRATION_KEY=${SECRETS_PREFIX}dro#drocfg_registration_key
  export DROCFG_URL=${SECRETS_PREFIX}dro#drocfg_url
  #jdbc
  export JDBCCFG_USERNAME=${SECRETS_PREFIX}jdbc#jdbccfg_username
  export JDBCCFG_PASSWORD=${SECRETS_PREFIX}jdbc#jdbccfg_password
  export JDBCCFG_URL=${SECRETS_PREFIX}jdbc#jdbccfg_url
  export JDBCCFG_SSLENABLED=${SECRETS_PREFIX}jdbc#jdbccfg_sslenabled
  export JDBCCFG_CA=${SECRETS_PREFIX}jdbc#jdbccfg_ca

  export MAS_ENTITLEMENT_KEY=${SECRETS_PREFIX}ibm_entitlement#entitlement_key
  export ARTIFACTORY_TOKEN=${SECRETS_PREFIX}ibm_entitlement#image_pull_secret_b64
  # check if those are already present 
  
  # and update them 

  # finally get values into tempalte 
  # push them on github repo , 

  # final output 
  # updated var in sm 
  # and git repo 

  sm_verify_secret_exists ${SECRETS_PREFIX}ibm_entitlement "image_pull_secret_b64,entitlement_key"
  sm_verify_secret_exists ${SECRETS_PREFIX}dro "drocfg_ca,drocfg_registration_key,drocfg_url"
  sm_verify_secret_exists ${SECRETS_PREFIX}sls "slscfg_registration_key"
  sm_verify_secret_exists ${SECRETS_PREFIX}minio "sm_minio_host,sm_minio_port,sm_minio_accesskey,sm_minio_secretkey,sm_minio_bucket_templates,sm_minio_bucket_tenants,sm_minio_bucket_pipelines"
  sm_verify_secret_exists ${SECRETS_PREFIX}mariadb "sm_mariadb_host,sm_mariadb_port,sm_mariadb_user,sm_mariadb_database,sm_mariadb_secret_name,sm_mariadb_secret_value"

  

    if [ -z $GIT_SSH ]; then
      export GIT_SSH=false
    fi

    # Clone github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo "GITOPS_WORKING_DIR  ${GITOPS_WORKING_DIR}"
      echo "GITOPS_CLUSTER_DIR  ${GITOPS_CLUSTER_DIR}"
      echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
      clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
    fi
    mkdir -p ${GITOPS_CLUSTER_DIR}

    # Generate ArgoApps
    # ---------------------------------------------------------------------------
    echo
    echo_h2 "Generating aibroker operator Applications"
    echo "- minio operator"

    echo "Generating aibroker file ${GITOPS_CLUSTER_DIR}/ibm-aibroker.yaml"
    jinjanate_commmon $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-aibroker.yaml.j2 ${GITOPS_CLUSTER_DIR}/ibm-aibroker.yaml

    # Commit and push to github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
      save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH "${GITOPS_WORKING_DIR}/${GITHUB_REPO}" "${GIT_COMMIT_MSG}"
      remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO
    fi

    # rm -rf $TEMP_DIR
    rm -rf $GITOPS_WORKING_DIR


  exit 0 
}
#!/bin/bash

function install_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas install [options]

Catalog Selection (Required):
  -c, --mas-catalog-version ${COLOR_YELLOW}MAS_CATALOG_VERSION${TEXT_RESET}            IBM Maximo Operator Catalog to install (e.g. v8-amd64)

Entitlement & Licensing (Required):
      --ibm-entitlement-key ${COLOR_YELLOW}IBM_ENTITLEMENT_KEY${TEXT_RESET}            IBM entitlement key
      --license-id ${COLOR_YELLOW}SLS_LICENSE_ID${TEXT_RESET}                          MAS license ID
      --license-file ${COLOR_YELLOW}SLS_LICENSE_FILE_LOCAL${TEXT_RESET}                Path to MAS license file
      --uds-email ${COLOR_YELLOW}UDS_CONTACT_EMAIL${TEXT_RESET}                        Contact e-mail address
      --uds-firstname ${COLOR_YELLOW}UDS_CONTACT_FIRSTNAME${TEXT_RESET}                Contact first name
      --uds-lastname ${COLOR_YELLOW}UDS_CONTACT_LASTNAME${TEXT_RESET}                  Contact last name

Storage Class Selection (Required):
      --storage-rwo ${COLOR_YELLOW}STORAGE_CLASS_RWO${TEXT_RESET}                      Read Write Once (RWO) storage class (e.g. ibmc-block-gold)
      --storage-rwx ${COLOR_YELLOW}STORAGE_CLASS_RWX${TEXT_RESET}                      Read Write Many (RWX) storage class (e.g. ibmc-file-gold-gid)
      --storage-pipeline ${COLOR_YELLOW}PIPELINE_STORAGE_CLASS${TEXT_RESET}            Install pipeline storage class (e.g. ibmc-file-gold-gid)
      --storage-accessmode ${COLOR_YELLOW}PIPELINE_STORAGE_ACCESSMODE${TEXT_RESET}     Install pipeline storage class access mode (ReadWriteMany or ReadWriteOnce)

Maximo Application Suite Instance (Required):
  -i, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}                    MAS Instance ID
  -w, --mas-workspace-id ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}                  MAS Workspace ID
  -W, --mas-workspace-name ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}                MAS Workspace Name

Advanced MAS Configuration (Optional):
      --additional-configs ${COLOR_YELLOW}LOCAL_MAS_CONFIG_DIR${TEXT_RESET}            Path to a directory containing additional configuration files to be applied
      --non-prod                                           Install MAS in Non-production mode
      --mas-trust-default-cas ${COLOR_YELLOW}MAS_TRUST_DEFAULT_CAS${TEXT_RESET}        Trust certificates signed by well-known CAs
      --workload-scale-profile ${COLOR_YELLOW}MAS_WORKLOAD_SCALE_PROFILE${TEXT_RESET}  Set a pre-defined workload scale profile [Burstable, BestEffort, Guaranteed]
      --mas-pod-templates-dir ${COLOR_YELLOW}MAS_POD_TEMPLATES_DIR${TEXT_RESET}        Path to directory containing custom podTemplates configuration files to be applied. Takes precedence over --workload-scale-profile

Maximo Application Suite Core Platform (Required):
      --mas-channel ${COLOR_YELLOW}MAS_CHANNEL${TEXT_RESET}                            Subscription channel for the Core Platform

Maximo Application Suite Application Selection (Optional):
      --iot-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_IOT${TEXT_RESET}                            Subscription channel for Maximo IoT
      --monitor-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_MONITOR${TEXT_RESET}                    Subscription channel for Maximo Monitor
      --manage-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_MANAGE${TEXT_RESET}                      Subscription channel for Maximo Manage
      --manage-jdbc ${COLOR_YELLOW}MAS_APPWS_BINDINGS_JDBC_MANAGE${TEXT_RESET}                 Configure Maximo Manage JDBC binding (workspace-application or system)
      --predict-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_PREDICT${TEXT_RESET}                    Subscription channel for Maximo Predict
      --assist-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_ASSIST${TEXT_RESET}                      Subscription channel for Maximo Assist
      --visualinspection-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_VISUALINSPECTION${TEXT_RESET}  Subscription channel for Maximo Visual Inspection
      --optimizer-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_OPTIMIZER${TEXT_RESET}                Subscription channel for Maximo optimizer
      --optimizer-plan ${COLOR_YELLOW}MAS_APP_PLAN_OPTIMIZER${TEXT_RESET}                      Installation plan for Maximo Optimizer (full or limited)

IBM Cloud Pak for Data (Required when installing Predict or Assist):
      --cp4d-version ${COLOR_YELLOW}CP4D_VERSION${TEXT_RESET}          Product version of IBM Cloud Pak for Data to use
      --cp4d-install-spss                  Include SPSS service to be installed as part of IBM Cloud Pak for Data (Optional if Predict is being installed)
      --cp4d-install-openscale             Include Watson Openscale service to be installed as part of IBM Cloud Pak for Data (Optional if Predict is being installed)
      --cp4d-install-cognos                Include Cognos Analytics service to be installed as part of IBM Cloud Pak for Data (Optional if Manage is being installed)

Kafka (Required to install Maximo IoT thus if not set, a default Kafka provider will be installed):
      --kafka-provider ${COLOR_YELLOW}KAFKA_PROVIDER${TEXT_RESET}      Set Kafka provider. Supported options are 'redhat' (Red Hat AMQ Streams), 'strimzi', 'ibm' (IBM Cloud Event Streams) and 'aws' (AWS MSK)

Kafka (Optional, applicable for Strimzi and Red Hat AMQ Streams only):
      --kafka-namespace ${COLOR_YELLOW}KAFKA_NAMESPACE${TEXT_RESET}    Set Strimzi and Red Hat AMQ Streams namespace

Kafka (Required for IBM Cloud Event Streams only):
      --ibmcloud-apikey ${COLOR_YELLOW}IBMCLOUD_APIKEY${TEXT_RESET}                            Set IBM Cloud API Key. Required to provision IBM Cloud services
      --eventstreams-resource-group ${COLOR_YELLOW}EVENTSTREAMS_RESOURCEGROUP${TEXT_RESET}     Set IBM Cloud resource group to target the Event Streams instance provisioning (Only applicable if installing IBM Cloud Event Streams)
      --eventstreams-instance-name ${COLOR_YELLOW}EVENTSTREAMS_NAME${TEXT_RESET}               Set IBM Event Streams instance name (Only applicable if installing IBM Event Streams)
      --eventstreams-instance-location ${COLOR_YELLOW}EVENTSTREAMS_LOCATION${TEXT_RESET}       Set IBM Event Streams instance location (Only applicable if installing IBM Event Streams)

IBM Db2 (Optional, required to use IBM Db2 Universal Operator):
      --db2u-channel ${COLOR_YELLOW}DB2_CHANNEL${TEXT_RESET}           Subscription channel for Db2u (e.g. v110508.0)
      --db2u-system                        Install a shared Db2u instance for MAS (required by IoT & Monitor, supported by Manage)
      --db2u-manage                        Install a dedicated Db2u instance for Maximo Manage (supported by Manage)

Advanced Db2u Universal Operator Configuration (Optional):
      --db2u-namespace ${COLOR_YELLOW}DB2_NAMESPACE${TEXT_RESET}       Change namespace where Db2u instances will be created

Advanced Db2u Universal Operator Configuration - Node Scheduling (Optional):
      --db2u-affinity-key ${COLOR_YELLOW}DB2_AFFINITY_KEY${TEXT_RESET}           Set a node label to declare affinity to
      --db2u-affinity-value ${COLOR_YELLOW}DB2_AFFINITY_VALUE${TEXT_RESET}       Set the value of the node label to affine with
      --db2u-tolerate-key ${COLOR_YELLOW}DB2_TOLERATE_KEY${TEXT_RESET}           Set a node taint to tolerate
      --db2u-tolerate-value ${COLOR_YELLOW}DB2_TOLERATE_VALUE${TEXT_RESET}       Set the value of the taint to tolerate
      --db2u-tolerate-effect ${COLOR_YELLOW}DB2_TOLERATE_EFFECT${TEXT_RESET}     Set the effect that will be tolerated (NoSchedule, PreferNoSchedule, or NoExecute)

Advanced Db2u Universal Operator Configuration - Resource Requests (Optional):
      --db2u-cpu-request ${COLOR_YELLOW}DB2_CPU_REQUESTS${TEXT_RESET}            Customize Db2 CPU request
      --db2u-cpu-limit ${COLOR_YELLOW}DB2_CPU_LIMITS${TEXT_RESET}                Customize Db2 CPU limit
      --db2u-memory-request ${COLOR_YELLOW}DB2_MEMORY_REQUESTS${TEXT_RESET}      Customize Db2 memory request
      --db2u-memory-limit ${COLOR_YELLOW}DB2_MEMORY_LIMITS${TEXT_RESET}          Customize Db2 memory limit

Advanced Db2u Universal Operator Configuration - Storage (Optional):
      --db2u-backup-storage ${COLOR_YELLOW}DB2_BACKUP_STORAGE_SIZE${TEXT_RESET}  Customize Db2 storage capacity
      --db2u-data-storage ${COLOR_YELLOW}DB2_DATA_STORAGE_SIZE${TEXT_RESET}      Customize Db2 storage capacity
      --db2u-logs-storage ${COLOR_YELLOW}DB2_LOGS_STORAGE_SIZE${TEXT_RESET}      Customize Db2 storage capacity
      --db2u-meta-storage ${COLOR_YELLOW}DB2_META_STORAGE_SIZE${TEXT_RESET}      Customize Db2 storage capacity
      --db2u-temp-storage ${COLOR_YELLOW}DB2_TEMP_STORAGE_SIZE${TEXT_RESET}      Customize Db2 storage capacity

Advanced MongoDB Configuration (Optional):
      --mongodb-namespace ${COLOR_YELLOW}MONGODB_NAMESPACE${TEXT_RESET}          Change namespace where MongoCE operator and instance will be created

Cloud Provider Commands:
      --ibmcloud-apikey ${COLOR_YELLOW}IBMCLOUD_APIKEY${TEXT_RESET}              Set IBM Cloud API Key (Required to provision IBM Cloud services)

Manage Application - Advanced Configuration (Optional):
      --manage-demodata                                                                       Enables demo data for Manage application
      --manage-jms                                                                            Enables JMS queues using local persistent volumes
      --manage-server-bundle-size ${COLOR_YELLOW}MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE${TEXT_RESET}                        Set Manage server bundle size configuration i.e 'dev', 'small', 'jms' or 'snojms'
      --manage-components ${COLOR_YELLOW}MAS_APPWS_COMPONENTS${TEXT_RESET}                                                Set Manage Components to be installed i.e 'base=latest,health=latest,civil=latest'
      --manage-customization-archive-name ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME${TEXT_RESET}         Set Manage Archive name
      --manage-customization-archive-url ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_URL${TEXT_RESET}           Set Manage Archive URL
      --manage-customization-archive-username ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_USERNAME${TEXT_RESET} Set Manage Archive username, in case URL requires basic authentication to pull the archive
      --manage-customization-archive-password ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_PASSWORD${TEXT_RESET} Set Manage Archive password, in case URL requires basic authentication to download the archive
      --manage-crypto-key ${COLOR_YELLOW}MAS_APP_SETTINGS_CRYPTO_KEY${TEXT_RESET}                                         Customize your Manage database encryption keys
      --manage-cryptox-key ${COLOR_YELLOW}MAS_APP_SETTINGS_CRYPTOX_KEY${TEXT_RESET}                                       Customize your Manage database encryption keys
      --manage-old-crypto-key ${COLOR_YELLOW}MAS_APP_SETTINGS_OLD_CRYPTO_KEY${TEXT_RESET}                                 Customize your Manage database encryption keys
      --manage-old-cryptox-key ${COLOR_YELLOW}MAS_APP_SETTINGS_OLD_CRYPTOX_KEY${TEXT_RESET}                               Customize your Manage database encryption keys
      --manage-override-encryption-secrets                                                    Override any existing Manage database encryption keys (a backup of the original is taken).

Other Commands:
      --dev-mode            Enable developer mode (e.g. for access to pre-release builds)
      --no-wait-for-pvcs    If you are using using storage classes that utilize 'WaitForFirstConsumer' binding mode use this flag
      --no-confirm          Mirror images without prompting for confirmation
      --accept-license      Accept the licenses for IBM Maximo Application Suite and Maximo IT
  -h, --help                Show this help message


EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function install_noninteractive() {
  NON_INTERACTIVE=true
  DEV_MODE=false
  LICENSE_ACCEPTED=false

  # Defaults
  DB2_ACTION_SYSTEM=none
  DB2_ACTION_MANAGE=none
  KAFKA_ACTION_SYSTEM=none

  LOCAL_MAS_CONFIG_DIR=""
  LOCAL_MAS_CONFIG_DIR_ALREADY_CHOSEN=yes
  use_additional_configs=no

  WAIT_FOR_PVCS=true
  STORAGE_CLASS_PROVIDER=custom

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # Catalog
      -c|--mas-catalog-version)
        export MAS_CATALOG_VERSION=$1 && shift
        ;;

      # Storage
      --storage-rwo)
        export STORAGE_CLASS_RWO=$1 && shift
        ;;
      --storage-rwx)
        export STORAGE_CLASS_RWX=$1 && shift
        ;;
      --storage-pipeline)
        export PIPELINE_STORAGE_CLASS=$1 && shift
        ;;
      --storage-accessmode)
        export PIPELINE_STORAGE_ACCESSMODE=$1 && shift
        ;;

      # MAS Instance
      -i|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -w|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      -W|--mas-workspace-name)
        export MAS_WORKSPACE_NAME=$1 && shift
        ;;

      # Advanced Configuration
      --additional-configs)
        LOCAL_MAS_CONFIG_DIR_ALREADY_CHOSEN=yes
        use_additional_configs=yes
        export LOCAL_MAS_CONFIG_DIR=$1 && shift
        ;;
      --non-prod)
        export USE_NON_PROD_MODE=true
        export MAS_ANNOTATIONS="mas.ibm.com/operationalMode=nonproduction"
        ;;
      --mas-trust-default-cas)
        export MAS_TRUST_DEFAULT_CAS=$1 && shift
        ;;
      --workload-scale-profile)
        MAS_WORKLOAD_SCALE_PROFILE=$1 && shift
        case $MAS_WORKLOAD_SCALE_PROFILE in
          Guaranteed|BestEffort)
            set_mas_workload_scale_envs
            ;;
          Burstable)
            clear_mas_workload_scale_envs
            ;;
          *)
            echo_warning "Invalid workload scale profile. Must be one of [Burstable, BestEffort, Guaranteed]"
            exit 1
            ;;
        esac
        ;;
      --mas-pod-templates-dir)
        MAS_POD_TEMPLATES_DIR=$1 && shift
        check_mas_pod_templates_dir
        ;;

      # Core
      --mas-channel)
        export MAS_CHANNEL=$1 && shift
        ;;

      # Applications
      --assist-channel)
        export DEPLOY_CP4D=run
        export MAS_APP_CHANNEL_ASSIST=$1 && shift
        ;;
      --iot-channel)
        export MAS_APP_CHANNEL_IOT=$1 && shift
        ;;
      --monitor-channel)
        export MAS_APP_CHANNEL_MONITOR=$1 && shift
        ;;
      --manage-channel)
        export MAS_APP_CHANNEL_MANAGE=$1 && shift
        ;;
      --predict-channel)
        export DEPLOY_CP4D=run
        export MAS_APP_CHANNEL_PREDICT=$1 && shift
        ;;
      --visualinspection-channel)
        export MAS_APP_CHANNEL_VISUALINSPECTION=$1 && shift
        ;;
      --optimizer-channel)
        export MAS_APP_CHANNEL_OPTIMIZER=$1 && shift
        ;;
      --optimizer-plan)
        export MAS_APP_PLAN_OPTIMIZER=$1 && shift
        ;;

      # Dependencies - CP4D
      --cp4d-version)
        export CP4D_VERSION=$1 && shift
        ;;
      --cp4d-install-spss)
        export CPD_INSTALL_SPSS=true
        ;;
      --cp4d-install-openscale)
        export CPD_INSTALL_OPENSCALE=true
        ;;
      --cp4d-install-cognos)
        if [[ "$MAS_APP_CHANNEL_MANAGE" != "" ]]; then
          export CPD_INSTALL_COGNOS=true
          export DEPLOY_CP4D=run
        fi
        ;;

      # Dependencies - Db2
      --db2u-namespace)
        export DB2_NAMESPACE=$1 && shift
        ;;
      --db2u-channel)
        export DB2_CHANNEL=$1 && shift
        ;;
      --db2u-system)
        export DB2_ACTION_SYSTEM=install
        ;;
      --db2u-manage)
        export DB2_ACTION_MANAGE=install
        ;;

      # Dependencies - Db2 Advanced Options
      --db2u-affinity-key)
        export DB2_SET_AFFINITY=true
        export DB2_AFFINITY_KEY=$1 && shift
        ;;
      --db2u-affinity-value)
        export DB2_AFFINITY_VALUE=$1 && shift
        ;;
      --db2u-tolerate-key)
        export DB2_SET_TOLERATIONS=false
        export DB2_TOLERATE_KEY=$1 && shift
        ;;
      --db2u-tolerate-value)
        export DB2_TOLERATE_VALUE=$1 && shift
        ;;
      --db2u-tolerate-effect)
        export DB2_TOLERATE_EFFECT=$1 && shift
        ;;
      --db2u-cpu-request)
        export DB2_CPU_REQUESTS=$1 && shift
        ;;
      --db2u-cpu-limit)
        export DB2_CPU_LIMITS=$1 && shift
        ;;
      --db2u-memory-request)
        export DB2_MEMORY_REQUESTS=$1 && shift
        ;;
      --db2u-memory-limit)
        export DB2_MEMORY_LIMITS=$1 && shift
        ;;

      --db2u-backup-storage)
        export DB2_BACKUP_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-data-storage)
        export DB2_DATA_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-logs-storage)
        export DB2_LOGS_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-meta-storage)
        export DB2_META_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-temp-storage)
        export DB2_TEMP_STORAGE_SIZE=$1 && shift
        ;;

      # Dependencies - Kafka common arguments
      --kafka-provider)
        export KAFKA_ACTION_SYSTEM=install
        export KAFKA_PROVIDER=$1 && shift
        ;;
      --kafka-cluster-name)
        export KAFKA_CLUSTER_NAME=$1 && shift
        ;;
      --kafka-username)
        export AWS_KAFKA_USER_NAME=$1
        export KAFKA_USER_NAME=$1 && shift
        ;;
      --kafka-password)
        export AWS_KAFKA_USER_PASSWORD=$1
        export KAFKA_USER_PASSWORD=$1 && shift
        ;;

      # Dependencies - Kafka (AMQ & Strimzi)
      --kafka-namespace)
        export KAFKA_NAMESPACE=$1 && shift
        ;;

      # Dependencies - Kafka (AWS MSK)
      --msk-instance-type)
        export AWS_MSK_INSTANCE_TYPE=$1 && shift
        ;;
      --msk-instance-nodes)
        export AWS_MSK_INSTANCE_NUMBER=$1 && shift
        ;;
      --msk-instance-volume-size)
        export AWS_MSK_VOLUME_SIZE=$1 && shift
        ;;
      --msk-cidr-az1)
        export AWS_MSK_CIDR_AZ1=$1 && shift
        ;;
      --msk-cidr-az2)
        export AWS_MSK_CIDR_AZ2=$1 && shift
        ;;
      --msk-cidr-az3)
        export AWS_MSK_CIDR_AZ3=$1 && shift
        ;;
      --msk-cidr-ingress)
        export AWS_MSK_INGRESS_CIDR=$1 && shift
        ;;
      --msk-cidr-egress)
        export AWS_MSK_EGRESS_CIDR=$1 && shift
        ;;

      # Dependencies - Kafka (IBM Cloud Event Streams)
      --eventstreams-resource-group)
        export EVENTSTREAMS_RESOURCEGROUP=$1 && shift
        ;;
      --eventstreams-instance-name)
        export EVENTSTREAMS_NAME=$1 && shift
        ;;
      --eventstreams-instance-location)
        export EVENTSTREAMS_LOCATION=$1 && shift
        ;;

      # Entitlement
      --ibm-entitlement-key)
        export IBM_ENTITLEMENT_KEY=$1 && shift
        ;;

      # SLS
      --license-id)
        export SLS_LICENSE_ID=$1 && shift
        ;;
      --license-file)
        export SLS_LICENSE_FILE_LOCAL=$1 && shift
        if [[ ! -e "$SLS_LICENSE_FILE_LOCAL" ]]; then
          echo_warning "Error: File does not exist: $SLS_LICENSE_FILE_LOCAL"
          exit 1
        fi
        sls_prompt_selection
        if [[ "$SLS_PROMPT_LICENSE_ID" == "true" ]]; then
          export SLS_LICENSE_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"
        else
          export SLS_ENTITLEMENT_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"
        fi
        ;;

      # UDS
      --uds-email)
        export UDS_CONTACT_EMAIL=$1 && shift
        ;;
      --uds-firstname)
        export UDS_CONTACT_FIRSTNAME=$1 && shift
        ;;
      --uds-lastname)
        export UDS_CONTACT_LASTNAME=$1 && shift
        ;;

      # MongoDB
      --mongodb-namespace)
        export MONGODB_NAMESPACE=$1 && shift
        ;;

      # Manage commands - Server bundle configuration
      --manage-server-bundle-size)
        export MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE=$1 && shift
        ;;
      --manage-jms)
        export MAS_APP_SETTINGS_DEFAULT_JMS=true
        export MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
        export MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE=jms
        ;;
      --manage-demodata)
        export MAS_APP_SETTINGS_DEMODATA=true
        ;;
      --manage-jdbc)
        export MAS_APPWS_BINDINGS_JDBC_MANAGE=$1 && shift
        ;;

      # Manage commands - Components
      --manage-components)
        export MAS_APPWS_COMPONENTS=$1 && shift
       ;;

      # Manage commands - Customization archive
      --manage-customization-archive-name)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME=$1 && shift
        ;;
      --manage-customization-archive-url)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_URL=$1 && shift
        ;;
      --manage-customization-archive-username)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_USERNAME=$1 && shift
        ;;
      --manage-customization-archive-password)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_PASSWORD=$1 && shift
        ;;

      # Manage commands - Database encryption keys
      --manage-crypto-key)
        export MAS_APP_SETTINGS_CRYPTO_KEY=$1 && shift
        ;;
      --manage-cryptox-key)
        export MAS_APP_SETTINGS_CRYPTOX_KEY=$1 && shift
        ;;
      --manage-old-crypto-key)
        export MAS_APP_SETTINGS_OLD_CRYPTO_KEY=$1 && shift
        ;;
      --manage-old-cryptox-key)
        export MAS_APP_SETTINGS_OLD_CRYPTOX_KEY=$1 && shift
        ;;
      --manage-override-encryption-secrets)
        export MAS_APP_SETTINGS_OVERRIDE_ENCRYPTION_SECRETS_FLAG=true
        ;;

      # Cloud Provider Commands - IBM Cloud
      --ibmcloud-apikey)
        export IBMCLOUD_APIKEY=$1 && shift
        ;;

      # Cloud Provider Commands - AWS
      --aws-region)
        export AWS_REGION=$1 && shift
        ;;
      --aws-access-key-id)
        export AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --aws-secret-access-key)
        export AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --aws-vpc-id)
        export VPC_ID=$1 && shift
        ;;

      # Other Commands
      --dev-mode)
        DEV_MODE=true
        ;;
      --no-wait-for-pvcs)
        WAIT_FOR_PVCS=false
        ;;
      --no-confirm)
        NO_CONFIRM=true
        ;;
      --accept-license)
        LICENSE_ACCEPTED=true
        ;;
      -h|--help)
        install_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        install_help
        exit 1
        ;;
    esac
  done

  if [[ "$DEV_MODE" == "true"  ]]; then
    MAS_ICR_CP=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local
    MAS_ICR_CPOPEN=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      SLS_ICR_CP=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local
    fi
    SLS_ICR_CPOPEN=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen
  else
    MAS_ICR_CP=cp.icr.io/cp
    MAS_ICR_CPOPEN=icr.io/cpopen
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      SLS_ICR_CP=cp.icr.io/cp
    fi
    SLS_ICR_CPOPEN=icr.io/cpopen
  fi

  # Present a the MAS license information
  # ---------------------------------------------------------------------------
  case $MAS_CHANNEL in
    8.9.x)
      MAS_LICENSE_LINK=$( build_license_link_by_mas_version "89" )
      ;;
    *)
      MAS_LICENSE_LINK=$( build_license_link_by_mas_version "810" )
      ;;
  esac

  if [[ "$LICENSE_ACCEPTED" == "false" ]]; then
    echo
    echo_h2 "License Terms"
    echo -e "For information about your license, see "$MAS_LICENSE_LINK" and https://ibm.biz/MAXIT81-License. To continue with the installation, you must accept the license terms."
    install_help
    exit 1
  fi

}

function install_interactive() {
  pipeline_config
}


function ocp_version_check() {
  # Check for OCP 4.9 and 4.10
  export OCP_VERSION=$(oc get clusterversion version -o jsonpath="{.status.desired.version}")
  if [[ "$OCP_VERSION" =~ ^4\.9\.* ]]; then
    echo
    echo_warning "Warning: OpenShift Container Platform v${OCP_VERSION} detected!"
    echo_warning " - This version is now out of support by Red Hat and ${TEXT_UNDERLINE}not a supported platform for IBM Maximo Application Suite"
    echo_warning " - The installation of IBM Maximo Application Suite may not proceed, you must upgrade to at least OCP v4.10 before installing MAS"
    echo
    echo_warning "For more information refer to the Red Hat OpenShift Container Platform Life Cycle Policy:"
    echo "  ${COLOR_CYAN}${TEXT_UNDERLINE}https://access.redhat.com/support/policy/updates/openshift/${COLOR_RESET}${TEXT_RESET}"
    reset_colors
    exit 1
  elif [[ "$OCP_VERSION" =~ ^4\.10\.* ]]; then
    echo
    echo_warning "Warning: OpenShift Container Platform v${OCP_VERSION} detected!"
    echo_warning " - This version is ${TEXT_UNDERLINE}now out of support by Red Hat"
    echo_warning " - The installation of IBM Maximo Application Suite may proceed, but we strongly encourage you to upgrade to OCP v4.12 first"
    echo
    echo_warning "For more information refer to the Red Hat OpenShift Container Platform Life Cycle Policy:"
    echo "  ${COLOR_CYAN}${TEXT_UNDERLINE}https://access.redhat.com/support/policy/updates/openshift/${COLOR_RESET}${TEXT_RESET}"
    reset_colors
    echo
    prompt_for_confirm "Continue anyway?" || exit 0
  fi
}


function install() {
  # Take the first parameter off (it will be "install")
  shift

  # Process parameters that work for both interactive and non-interactive modes
  INTERACTIVE_MODE=true
  for param in "$@"
  do
    case $param in
      -c|--mas-catalog-version)
        INTERACTIVE_MODE=false
        ;;
      --dev-mode)
        DEV_MODE=true
        ;;
      -h|--help)
        install_help
        ;;
    esac
  done

  if [[ "$INTERACTIVE_MODE" == "true" ]]; then
    connect
    detect_airgap
    detect_sno
    pipeline_install_operator
    install_interactive
  else
    # Non-interactive mode assumes you are already connected
    detect_airgap
    detect_sno
    install_noninteractive "$@"
    pipeline_install_operator
    config_pipeline_additional_configs
  fi

  # Prepare and launch the Tekton pipeline
  pipeline_prepare
  pipeline_show_config
  pipeline_run
}

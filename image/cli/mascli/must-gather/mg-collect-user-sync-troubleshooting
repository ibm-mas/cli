#!/bin/bash
set -e
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $DIR/../functions/internal/utils

INSTANCE_ID=$1
OUTPUT_FILE=$2

# -----------------------------------------------------------------------------
# Collect User Synchronization troubleshooting information
# -----------------------------------------------------------------------------

# First, extract the contents of the MAS Core CR, as it will be used many times
MAS_CR_JSON=$(oc get suite -n mas-$INSTANCE_ID-core -o json --ignore-not-found 2>/dev/null || echo "")

# -----------------------------------------------------------------------------
# MAS version
# -----------------------------------------------------------------------------

echo "MAS version: " >> ${OUTPUT_FILE} 2> /dev/null
MAS_VERSION=$(echo "$MAS_CR_JSON" | jq -r '.items[0].status.versions.reconciled')
echo $MAS_VERSION >> ${OUTPUT_FILE} 2> /dev/null
echo "" >> ${OUTPUT_FILE} 2> /dev/null

# -----------------------------------------------------------------------------
# Apps installed
# -----------------------------------------------------------------------------

# Now extract the contents of the CRs of all installed APPs, as some of them (like Manage) will be used many times
echo "Apps activated: " >> ${OUTPUT_FILE} 2> /dev/null
APP_IDS="assist,iot,monitor,manage,optimizer,predict,visualinspection,facilities"
for APP_ID in $(echo $APP_IDS | tr "," " ")
do
  APP_WORKSPACE_CR_KIND=${APP_ID}workspace
  # Handling visual inspection edge case where the workspace CR kind does not follow the standard naming convention
  if [[ "$APP_ID" == "visualinspection" ]]; then
    APP_WORKSPACE_CR_KIND=${APP_ID}appworkspace
  fi
  CR_CONTENT=$(oc get ${APP_WORKSPACE_CR_KIND} -n mas-${INSTANCE_ID}-${APP_ID} -o json --ignore-not-found 2> /dev/null || echo "")
  APP_ID_UPPERCASE="${APP_ID^^}"
  eval "${APP_ID_UPPERCASE}_CR_JSON='$CR_CONTENT'"
  if [[ "$CR_CONTENT" != "" ]]; then
    echo $APP_ID >> ${OUTPUT_FILE} 2> /dev/null
  fi
done
echo "" >> ${OUTPUT_FILE} 2> /dev/null

# Now extract the contents of the CRs of all installed APPs, as some of them (like Manage) will be used many times
MANAGE_VERSION=$(echo "$MANAGE_CR_JSON" | jq -r '.items[0].status.versions.reconciled')
if [[ "$MANAGE_VERSION" != "null" ]]; then

  # -----------------------------------------------------------------------------
  # Manage version
  # -----------------------------------------------------------------------------

  echo "Manage version: " >> ${OUTPUT_FILE} 2> /dev/null
  echo $MANAGE_VERSION >> ${OUTPUT_FILE} 2> /dev/null
  echo "" >> ${OUTPUT_FILE} 2> /dev/null

  # -----------------------------------------------------------------------------
  # Manage deployment type (Full/Foundation)
  # -----------------------------------------------------------------------------

  echo "Manage deployment type: " >> ${OUTPUT_FILE} 2> /dev/null
  MANAGE_DEPLOYMENT_TYPE=$(echo "$MANAGE_CR_JSON" | jq -r '.items[0].spec.components.base')
  if [[ "$MANAGE_DEPLOYMENT_TYPE" != "null" ]]; then
    echo "Full Manage" >> ${OUTPUT_FILE} 2> /dev/null
    MANAGE_BUNDLE_NAME=$(echo "$MANAGE_CR_JSON" | jq -r '.items[0].spec.settings.deployment.serverBundles[] | select(.bundleType == "all") | .name')
    # If the "all" bundle name is not found, then we have split bundle, so we try to find the name of the bundle with bundleType "ui"
    if [[ "$MANAGE_BUNDLE_NAME" == "" ]]; then
      MANAGE_BUNDLE_NAME=$(echo "$MANAGE_CR_JSON" | jq -r '.items[0].spec.settings.deployment.serverBundles[] | select(.bundleType == "ui") | .name')
    fi
  else
    echo "Foundation only" >> ${OUTPUT_FILE} 2> /dev/null
    # In Manage foundation the only bundle available is the one with bundleType "foundation" and name "foundation"
    MANAGE_BUNDLE_NAME=foundation
  fi
  echo "" >> ${OUTPUT_FILE} 2> /dev/null

  # -----------------------------------------------------------------------------
  # Manage pod templates configuration
  # -----------------------------------------------------------------------------

  echo "Manage podTemplates configuration: " >> ${OUTPUT_FILE} 2> /dev/null
  MANAGE_POD_TEMPLATES=$(echo "$MANAGE_CR_JSON" | jq -r '.items[0].spec.podTemplates')
  echo $MANAGE_POD_TEMPLATES >> ${OUTPUT_FILE} 2> /dev/null
  echo "" >> ${OUTPUT_FILE} 2> /dev/null

  # -----------------------------------------------------------------------------
  # Testing communication from Manage to MAS (system info API request)
  # -----------------------------------------------------------------------------

  # Get the name of the Manage pod to be used for checking the connection between Manage and MAS 
  MANAGE_BUNDLE_POD_NAME=$(oc get pods -n mas-$INSTANCE_ID-manage -o json | jq -r --arg appTypeName "$MANAGE_BUNDLE_NAME" '.items[] | select(.metadata.labels["mas.ibm.com/appTypeName"] == $appTypeName) | .metadata.name' | head -n 1 2>/dev/null || echo "")
  if [[ "$MANAGE_BUNDLE_POD_NAME" != "" ]]; then
    # Call the /systeminfo API in MAS from the Manage pod
    echo "MAS System info response from Manage pod: " >> ${OUTPUT_FILE} 2> /dev/null
    SYSTEM_INFO_RESPONSE=$((oc exec -n mas-$INSTANCE_ID-manage "$MANAGE_BUNDLE_POD_NAME" -- curl -vs -X GET "https://internalapi.mas-$INSTANCE_ID-core.svc/v1/authservice/systeminfo" --cert /etc/pki/tls/certs/internal-manage-tls/tls.crt --key /etc/pki/tls/certs/internal-manage-tls/tls.key --cacert /etc/pki/tls/certs/internal-manage-tls/ca.crt) 2>/dev/null || echo "")
    if echo "$SYSTEM_INFO_RESPONSE" | jq empty 2>/dev/null; then
      echo "$SYSTEM_INFO_RESPONSE" | jq '.' >> ${OUTPUT_FILE} 2> /dev/null
    else
      echo "Warning: Invalid JSON response." >> ${OUTPUT_FILE} 2> /dev/null
    fi
    echo "" >> ${OUTPUT_FILE} 2> /dev/null
  else
    echo "Manage pod could not be found for bundle $MANAGE_BUNDLE_NAME. MAS system info could not be retrieved. " >> ${OUTPUT_FILE} 2> /dev/null
    echo "" >> ${OUTPUT_FILE} 2> /dev/null
  fi

  # -----------------------------------------------------------------------------
  # Testing communication from MAS to Manage (system info API request)
  # -----------------------------------------------------------------------------

  echo "Manage ping response from internalapi pod: " >> ${OUTPUT_FILE} 2> /dev/null
  WORKSPACE_ID=$(echo "$MANAGE_CR_JSON" | jq -r '.items[0].metadata.labels["mas.ibm.com/workspaceId"]')
  if [[ "$WORKSPACE_ID" != "null" ]]; then
    # Get the name of the internalapi pod to be used for checking the connection between MAS and Manage
    INTERNALAPI_POD_NAME=$(oc get pods -n mas-${INSTANCE_ID}-core --no-headers -o custom-columns=":metadata.name" | grep "^${INSTANCE_ID}-internalapi-" | head -n 1)
    MANAGE_PING_RESPONSE=$((oc exec -n mas-$INSTANCE_ID-core "$INTERNALAPI_POD_NAME" -- curl -vs -X GET "https://$INSTANCE_ID-$WORKSPACE_ID-foundation.mas-$INSTANCE_ID-manage.svc/maximo/api/ping" --cert /etc/ssl/certs/mascore-cert/tls.crt --key /etc/ssl/certs/mascore-cert/tls.key --cacert /etc/ssl/certs/mascore-cert/ca.crt) 2>/dev/null || echo "")
    if echo "$MANAGE_PING_RESPONSE" | jq empty 2>/dev/null; then
      echo "$MANAGE_PING_RESPONSE" | jq '.' >> ${OUTPUT_FILE} 2> /dev/null
    else
      echo "Warning: Invalid JSON response." >> ${OUTPUT_FILE} 2> /dev/null
    fi
  fi
  echo "" >> ${OUTPUT_FILE} 2> /dev/null

  echo "Manage ping response from coreapi pod: " >> ${OUTPUT_FILE} 2> /dev/null
  WORKSPACE_ID=$(echo "$MANAGE_CR_JSON" | jq -r '.items[0].metadata.labels["mas.ibm.com/workspaceId"]')
  if [[ "$WORKSPACE_ID" != "null" ]]; then
    # Get the name of the coreapi pod to be used for checking the connection between MAS and Manage
    COREAPI_POD_NAME=$(oc get pods -n mas-${INSTANCE_ID}-core --no-headers -o custom-columns=":metadata.name" | grep "^${INSTANCE_ID}-coreapi-" | head -n 1)
    MANAGE_PING_RESPONSE=$((oc exec -n mas-$INSTANCE_ID-core "$COREAPI_POD_NAME" -- curl -vs -X GET "https://$INSTANCE_ID-$WORKSPACE_ID-foundation.mas-$INSTANCE_ID-manage.svc/maximo/api/ping" --cert /etc/ssl/certs/mascore-cert/tls.crt --key /etc/ssl/certs/mascore-cert/tls.key --cacert /etc/ssl/certs/mascore-cert/ca.crt) 2>/dev/null || echo "")
    if echo "$MANAGE_PING_RESPONSE" | jq empty 2>/dev/null; then
      echo "$MANAGE_PING_RESPONSE" | jq '.' >> ${OUTPUT_FILE} 2> /dev/null
    else
      echo "Warning: Invalid JSON response." >> ${OUTPUT_FILE} 2> /dev/null
    fi
  fi
  echo "" >> ${OUTPUT_FILE} 2> /dev/null

else

  echo "Manage is not installed! " >> ${OUTPUT_FILE} 2> /dev/null
  echo "" >> ${OUTPUT_FILE} 2> /dev/null

  # -----------------------------------------------------------------------------
  # When Manage is not installed, just call the /v1/idps internal API to retrieve available IDPs
  # -----------------------------------------------------------------------------

  echo "Installed IDPs: " >> ${OUTPUT_FILE} 2> /dev/null
  INTERNALAPI_POD_NAME=$(oc get pods -n mas-${INSTANCE_ID}-core --no-headers -o custom-columns=":metadata.name" | grep "^${INSTANCE_ID}-internalapi-" | head -n 1)
  IDPS_API_RESPONSE=$((oc exec -n mas-${INSTANCE_ID}-core "$INTERNALAPI_POD_NAME" -- curl -s -X GET --header 'Content-Type: application/json'  https://internalapi.mas-${INSTANCE_ID}-core.svc/v1/idps --cert /etc/pki/tls/certs/mascore-cert/tls.crt --key /etc/pki/tls/certs/mascore-cert/tls.key --cacert /etc/pki/tls/certs/mascore-cert/ca.crt) 2>/dev/null || echo "")
  
  if echo "$IDPS_API_RESPONSE" | jq empty 2>/dev/null; then
    echo "$IDPS_API_RESPONSE" | jq '.' >> ${OUTPUT_FILE} 2> /dev/null
  else
    echo "Warning: Invalid JSON response." >> ${OUTPUT_FILE} 2> /dev/null
  fi
  echo "" >> ${OUTPUT_FILE} 2> /dev/null
fi



exit 0

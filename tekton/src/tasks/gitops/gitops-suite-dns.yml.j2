---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gitops-suite-dns
spec:
  params:
    - name: cluster_name
      type: string
    - name: dns_provider
      type: string
      default: cis
    - name: mas_instance_id
      type: string
    - name: mas_domain
      type: string
    - name: cis_subdomain
      type: string
    - name: mas_workspace_id
      type: string
    - name: mas_manual_cert_mgmt
      type: string
    - name: cis_enhanced_security
      type: string
    - name: cis_proxy
      type: string
    - name: override_edge_certs
      type: string
    - name: cis_email
      type: string
    - name: cis_crn
      type: string
    - name: mas_config_dir
      type: string
    - name: cis_service_name
      type: string
    - name: cluster_url
      type: string
      default: ""

  stepTemplate:
    name: gitops-suite-dns
    env:
      - name: OCP_SERVER
        value: $(params.cluster_url)
      - name: DNS_PROVIDER
        value: $(params.dns_provider)
      - name: MAS_INSTANCE_ID
        value: $(params.mas_instance_id)
      - name: MAS_DOMAIN
        value: $(params.mas_domain)
      - name: CIS_SUBDOMAIN
        value: $(params.cis_subdomain)
      - name: MAS_WORKSPACE_ID
        value: $(params.mas_workspace_id)
      - name: MAS_MANUAL_CERT_MGMT
        value: $(params.mas_manual_cert_mgmt)
      - name: CIS_ENHANCED_SECURITY
        value: $(params.cis_enhanced_security)
      - name: CIS_PROXY
        value: $(params.cis_proxy)
      - name: OVERRIDE_EDGE_CERTS
        value: $(params.override_edge_certs)
      - name: CIS_EMAIL
        value: $(params.cis_email)
      - name: CIS_CRN
        value: $(params.cis_crn)
      - name: MAS_CONFIG_DIR
        value: $(params.mas_config_dir)
      - name: CIS_SERVICE_NAME
        value: $(params.cis_service_name)
    envFrom:
      - configMapRef:
          name: environment-properties
          optional: true
      - secretRef:
          name: secure-properties

  steps:
    - args:
      - |-
        echo "ARGOCD_URL=$ARGOCD_URL"
        echo "CIS_APIKEY=$CIS_APIKEY"
        export ROSA_CONFIG=/workspace/configs/tmp-rosa/rosa-$(params.cluster_name)-details.yaml
        if [ -f $ROSA_CONFIG ]; then
          echo "oc login : via ROSA_CONFIG"
          export OCP_SERVER=$(cat $ROSA_CONFIG | yq -r '.data.api_url')
          export OCP_USERNAME=$(cat $ROSA_CONFIG | yq -r '.data.username')
          export ROSA_CLUSTER_ADMIN_PASSWORD=$(cat $ROSA_CONFIG | yq -r '.data.admin_password')
          oc login -u $OCP_USERNAME -p $ROSA_CLUSTER_ADMIN_PASSWORD $OCP_SERVER --insecure-skip-tls-verify
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed, exiting with error.."
            exit 1
          fi
        elif [ -n $OCP_SERVER ]; then
          echo "oc login : OCP_USERNAME=$OCP_USERNAME OCP_SERVER=$OCP_SERVER OCP_PASSWORD=${OCP_PASSWORD:0:4}<snip> ..."
          oc login -u $OCP_USERNAME -p $OCP_PASSWORD $OCP_SERVER --insecure-skip-tls-verify
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed"
            exit 1
          fi
        else
          echo "oc login : via ocp_login"
          aws configure set aws_access_key_id $SM_AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $SM_AWS_SECRET_ACCESS_KEY
          aws configure set default.region $SM_AWS_REGION
          export CLUSTER_TYPE=rosa
          ROLE_NAME=ocp_login ansible-playbook ibm.mas_devops.run_role 
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed"
            exit 1
          fi
        fi

        echo "Set k8s context"
        export K8S_AUTH_CONTEXT=$(oc whoami -c)

        
        oc adm policy add-scc-to-user anyuid -z cert-manager-webhook-ibm-cis -n ibm-common-services

        mas gitops-suite-dns --mas-instance-id $MAS_INSTANCE_ID

      command:
        - /bin/sh
        - -c
      name: gitops-suite-dns
      imagePullPolicy: IfNotPresent
      image: quay.io/ibmmas/cli:7.10.0-pre.mascore1425
  workspaces:
    - name: configs




#!/bin/bash

function install_pipelinerun_preview() {
  if [[ ! -e "$CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID.yaml" ]]; then
    echo_warning "No pipelinerun configuration exists for '$MAS_INSTANCE_ID'"
    exit 1
  fi

  reset_colors
  echo
  echo_h2 "Review Settings"
  echo "${TEXT_DIM}"
  echo_h4 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Instance ID ............... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "Workspace ID .............. ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
  echo_reset_dim "Workspace Name ............ ${COLOR_MAGENTA}${MAS_WORKSPACE_NAME}"
  echo
  if [[ "${USE_NON_PROD_MODE}" == "true" ]]; then
    echo_reset_dim "Operation Mode ............ ${COLOR_MAGENTA}Non-production"
  else
    echo_reset_dim "Operation Mode ............ ${COLOR_MAGENTA}Production"
  fi
  if [[ "${AIRGAP_MODE}" == "true" ]]; then
    echo_reset_dim "Installation Mode ......... ${COLOR_MAGENTA}Disconnected Install"
  else
    echo_reset_dim "Installation Mode ......... ${COLOR_MAGENTA}Connected Install"
  fi
  if [[ "${CERT_MANAGER_PROVIDER}" != "" && $CERT_MANAGER_ACTION != "" ]]; then
    echo_reset_dim "Certificate Manager ....... ${COLOR_MAGENTA}${CERT_MANAGER_PROVIDER}"
  fi

  if [[ "${MAS_DOMAIN}" != "" ]]; then
    echo_reset_dim "Domain Name ............... ${COLOR_MAGENTA}${MAS_DOMAIN}"
    echo_reset_dim "DNS Provider .............. ${COLOR_MAGENTA}${DNS_PROVIDER:-Manually configured}"
    echo_reset_dim "Certificate Issuer ........ ${COLOR_MAGENTA}${MAS_CLUSTER_ISSUER:-Self-Signed}"
  fi
  echo_reset_dim "Catalog Version ........... ${COLOR_MAGENTA}${MAS_CATALOG_VERSION}"
  echo_reset_dim "Subscription Channel ...... ${COLOR_MAGENTA}${MAS_CHANNEL}"
  echo_reset_dim "IBM Entitled Registry ..... ${COLOR_MAGENTA}${MAS_ICR_CP}"
  echo_reset_dim "IBM Open Registry ......... ${COLOR_MAGENTA}${MAS_ICR_CPOPEN}"
  echo_reset_dim "IBM Entitlement Key ....... ${COLOR_MAGENTA}${IBM_ENTITLEMENT_KEY:0:8}<snip>"
  if [[ "${DEV_MODE}" == "true" ]]; then
    echo_reset_dim "Artifactory Username ...... ${COLOR_MAGENTA}${ARTIFACTORY_USERNAME}<snip>"
    echo_reset_dim "Artifactory Token ......... ${COLOR_MAGENTA}${ARTIFACTORY_TOKEN:0:8}<snip>"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "IBM Maximo Application Suite Applications" "    "
  if [[ "${MAS_APP_CHANNEL_IOT}" == '' ]]
  then echo_reset_dim "IoT ....................... ${COLOR_RED}Skip Installation"
  else
    echo_reset_dim "IoT ....................... ${COLOR_MAGENTA}${MAS_APP_CHANNEL_IOT}"
    echo_reset_dim " - MQTT Storage Class ..... ${COLOR_MAGENTA}${STORAGE_CLASS_RWO:-<default>}"
    echo_reset_dim " - FPL Storage Class ...... ${COLOR_MAGENTA}${STORAGE_CLASS_RWO:-<default>}"
  fi

  if [[ "${MAS_APP_CHANNEL_MONITOR}" == '' ]]
  then echo_reset_dim " - Monitor ................ ${COLOR_RED}Skip Installation"
  else echo_reset_dim " - Monitor ................ ${COLOR_MAGENTA}${MAS_APP_CHANNEL_MONITOR}"
  fi

  if [[ "${MAS_APP_CHANNEL_MANAGE}" == '' ]]
  then echo_reset_dim "Manage .................... ${COLOR_RED}Skip Installation"
  else
    echo_reset_dim "Manage .................... ${COLOR_MAGENTA}${MAS_APP_CHANNEL_MANAGE} (${MAS_APPWS_BINDINGS_JDBC_MANAGE} JDBC Config)"

    if [[ "${MAS_APPWS_COMPONENTS}" != '' ]]
    then echo_reset_dim " - Components ............. ${COLOR_MAGENTA}${MAS_APPWS_COMPONENTS}"
    fi

    if [[ "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "jms" || "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "snojms" ]]
    then echo_reset_dim " - Configure JMS .......... ${COLOR_MAGENTA}true"
    fi

    echo_reset_dim " - Include Demo Data ...... ${COLOR_MAGENTA}${MAS_APP_SETTINGS_DEMODATA}"
  fi

  if [[ "${MAS_APP_CHANNEL_PREDICT}" == '' ]]
  then echo_reset_dim " - Predict ................ ${COLOR_RED}Skip Installation"
  else echo_reset_dim " - Predict ................ ${COLOR_MAGENTA}${MAS_APP_CHANNEL_PREDICT}"
  fi

  if [[ "${MAS_APP_CHANNEL_OPTIMIZER}" == '' ]]
  then echo_reset_dim "Optimizer ................. ${COLOR_RED}Skip Installation"
  else echo_reset_dim "Optimizer ................. ${COLOR_MAGENTA}${MAS_APP_CHANNEL_OPTIMIZER} (${MAS_APP_PLAN_OPTIMIZER})"
  fi

  if [[ "${MAS_APP_CHANNEL_ASSIST}" == '' ]]
  then echo_reset_dim "Assist .................... ${COLOR_RED}Skip Installation"
  else echo_reset_dim "Assist .................... ${COLOR_MAGENTA}${MAS_APP_CHANNEL_ASSIST}"
  fi

  if [[ "${MAS_APP_CHANNEL_VISUALINSPECTION}" == '' ]]
  then echo_reset_dim "Visual Inspection ......... ${COLOR_RED}Skip Installation"
  else
    echo_reset_dim "Visual Inspection ......... ${COLOR_MAGENTA}${MAS_APP_CHANNEL_VISUALINSPECTION}"
    echo_reset_dim " - Storage Class .......... ${COLOR_MAGENTA}${STORAGE_CLASS_RWX:-<default>}"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "IBM Suite License Service" "    "
  if [[ "$SLS_PROMPT_LICENSE_ID" == "true" ]]; then
    echo_reset_dim "License ID ................ ${COLOR_MAGENTA}${SLS_LICENSE_ID}"
  fi
  echo_reset_dim "License File .............. ${COLOR_MAGENTA}${SLS_LICENSE_FILE_LOCAL}"
  if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
    echo_reset_dim "IBM Entitled Registry ..... ${COLOR_MAGENTA}${SLS_ICR_CP}"
  fi
  echo_reset_dim "IBM Open Registry ......... ${COLOR_MAGENTA}${SLS_ICR_CPOPEN}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "MongoDB" "    "
  echo_reset_dim "Install Namespace ......... ${COLOR_MAGENTA}${MONGODB_NAMESPACE:-<default>}"

  reset_colors
  echo "${TEXT_DIM}"
  [[ "$UDS_ACTION" == "install" ]] && echo_h4 "IBM User Data Services (UDS) Configuration" "    "
  [[ "$UDS_ACTION" == "install-dro" ]] && echo_h4 "IBM Data Reporter Operator (DRO) Configuration" "    "
  echo_reset_dim "Contact Email ............. ${COLOR_MAGENTA}${UDS_CONTACT_EMAIL}"
  echo_reset_dim "First Name ................ ${COLOR_MAGENTA}${UDS_CONTACT_FIRSTNAME}"
  echo_reset_dim "Last Name ................. ${COLOR_MAGENTA}${UDS_CONTACT_LASTNAME}"

  if [[ "$DEPLOY_CP4D" == "run" ]]; then
    reset_colors
    echo "${TEXT_DIM}"
    echo_h4 "IBM Cloud Pak for Data" "    "
    echo_reset_dim "Entitlement Key ........... ${COLOR_MAGENTA}${IBM_ENTITLEMENT_KEY:0:8}<snip>"
    echo_reset_dim "Product Version ........... ${COLOR_MAGENTA}${CP4D_VERSION}"
    if [[ "${MAS_APP_CHANNEL_PREDICT}" != '' || "${MAS_APP_CHANNEL_ASSIST}" != '' ]]
    then
      echo
      if [[ "${MAS_APP_CHANNEL_PREDICT}" != '' ]]
      then
        echo_reset_dim " - Watson Studio .......... ${COLOR_MAGENTA}required for Predict"
        echo_reset_dim " - Watson Machine Learning  ${COLOR_MAGENTA}required for Predict"
        echo_reset_dim " - Analytics Engine ....... ${COLOR_MAGENTA}required for Predict"
      fi
      if [[ "${MAS_APP_CHANNEL_ASSIST}" != '' ]]
      then echo_reset_dim " - Watson Discovery ....... ${COLOR_MAGENTA}required for Assist"
      fi
      if [[ "${CPD_INSTALL_COGNOS}" != '' || "${CPD_INSTALL_SPSS}" != '' || "${CPD_INSTALL_OPENSCALE}" == '' ]]
      then
        if [[ "${CPD_INSTALL_OPENSCALE}" == 'true' ]]
        then echo_reset_dim " - Watson Openscale ....... ${COLOR_MAGENTA}optional for Predict"
        fi
        if [[ "${CPD_INSTALL_SPSS}" == 'true' ]]
        then echo_reset_dim " - SPSS Modeler ........... ${COLOR_MAGENTA}optional for Predict"
        fi
        if [[ "${CPD_INSTALL_COGNOS}" == 'true' ]]
        then echo_reset_dim " - Cognos Analytics ....... ${COLOR_MAGENTA}optional for Manage"
        fi
      fi
    fi
  fi

  if [[ "$DB2_ACTION_SYSTEM" == "install" || "$DB2_ACTION_MANAGE" == "install" ]]; then
    reset_colors
    echo "${TEXT_DIM}"
    echo_h4 "IBM Db2" "    "
    echo_reset_dim "Install Namespace ......... ${COLOR_MAGENTA}${DB2_NAMESPACE:-<default>}"
    echo_reset_dim "Subscription Channel ...... ${COLOR_MAGENTA}${DB2_CHANNEL}"

    echo_reset_dim "System Instance ........... ${COLOR_MAGENTA}${DB2_ACTION_SYSTEM}"
    echo_reset_dim "Dedicated Manage Instance . ${COLOR_MAGENTA}${DB2_ACTION_MANAGE}"

    echo_reset_dim "CPU Request ............... ${COLOR_MAGENTA}${DB2_CPU_REQUESTS:-<default>}"
    echo_reset_dim "CPU Limit ................. ${COLOR_MAGENTA}${DB2_CPU_LIMITS:-<default>}"
    echo_reset_dim "Memory Request ............ ${COLOR_MAGENTA}${DB2_MEMORY_REQUESTS:-<default>}"
    echo_reset_dim "Memory Limit .............. ${COLOR_MAGENTA}${DB2_MEMORY_LIMITS:-<default>}"

    echo_reset_dim "Meta Storage .............. ${COLOR_MAGENTA}${DB2_META_STORAGE_SIZE:-<default>}"
    echo_reset_dim "Data Storage .............. ${COLOR_MAGENTA}${DB2_DATA_STORAGE_SIZE:-<default>}"
    echo_reset_dim "Backup Storage ............ ${COLOR_MAGENTA}${DB2_BACKUP_STORAGE_SIZE:-<default>}"
    echo_reset_dim "Temp Storage .............. ${COLOR_MAGENTA}${DB2_TEMP_STORAGE_SIZE:-<default>}"
    echo_reset_dim "Transaction Logs Storage .. ${COLOR_MAGENTA}${DB2_LOGS_STORAGE_SIZE:-<default>}"

    if [[ "$DB2_SET_AFFINITY" == "true" ]]
      then echo_reset_dim "Node Affinity ............. ${COLOR_MAGENTA}${DB2_AFFINITY_KEY}=${DB2_AFFINITY_VALUE}"
      else echo_reset_dim "Node Affinity ............. ${COLOR_MAGENTA}None"
    fi

    if [[ "$DB2_SET_TOLERATIONS" == "true" ]]
      then echo_reset_dim "Node Tolerations .......... ${COLOR_MAGENTA}${DB2_TOLERATE_KEY}=${DB2_TOLERATE_VALUE} @ ${DB2_TOLERATE_EFFECT}"
      else echo_reset_dim "Node Tolerations .......... ${COLOR_MAGENTA}None"
    fi
  fi

  if [[ "$KAFKA_ACTION_SYSTEM" == "install" && ("$KAFKA_PROVIDER" == "strimzi" || "$KAFKA_PROVIDER" == "redhat") ]]; then
    reset_colors
    echo "${TEXT_DIM}"
    echo_h4 "Kafka" "    "
    echo_reset_dim "Install Namespace ......... ${COLOR_MAGENTA}${KAFKA_NAMESPACE:-<default>}"
    echo_reset_dim "Kafka Provider ............ ${COLOR_MAGENTA}${KAFKA_PROVIDER}"
    echo_reset_dim "Kafka Version ............. ${COLOR_MAGENTA}${KAFKA_VERSION}"
  fi

  if [[ "$KAFKA_ACTION_SYSTEM" == "install" && "$KAFKA_PROVIDER" == "ibm" ]]; then
    reset_colors
    echo "${TEXT_DIM}"
    echo_h4 "Kafka - IBM Cloud Event Streams" "    "
    echo_reset_dim "Resource group ............ ${COLOR_MAGENTA}${EVENTSTREAMS_RESOURCEGROUP}"
    echo_reset_dim "Instance name ............. ${COLOR_MAGENTA}${EVENTSTREAMS_NAME}"
    echo_reset_dim "Instance location ......... ${COLOR_MAGENTA}${EVENTSTREAMS_LOCATION}"
  fi

  if [[ "$KAFKA_ACTION_SYSTEM" == "install" && "$KAFKA_PROVIDER" == "aws" ]]; then
    reset_colors
    echo "${TEXT_DIM}"
    echo_h4 "Kafka - AWS MSK" "    "
    echo_reset_dim "VPC ID .................... ${COLOR_MAGENTA}${VPC_ID}"
    echo_reset_dim "Cluster name .............. ${COLOR_MAGENTA}${KAFKA_CLUSTER_NAME}"
    echo_reset_dim "Instance region ........... ${COLOR_MAGENTA}${AWS_REGION}"
    echo_reset_dim "Instance username ......... ${COLOR_MAGENTA}${AWS_KAFKA_USER_NAME}"
    echo_reset_dim "Instance type ............. ${COLOR_MAGENTA}${AWS_MSK_INSTANCE_TYPE}"
    echo_reset_dim "Number of broker nodes .... ${COLOR_MAGENTA}${AWS_MSK_INSTANCE_NUMBER}"
    echo_reset_dim "Storage size (GB) ......... ${COLOR_MAGENTA}${AWS_MSK_VOLUME_SIZE}"
    echo_reset_dim "Availability Zone 1 CIDR .. ${COLOR_MAGENTA}${AWS_MSK_CIDR_AZ1}"
    echo_reset_dim "Availability Zone 2 CIDR .. ${COLOR_MAGENTA}${AWS_MSK_CIDR_AZ2}"
    echo_reset_dim "Availability Zone 3 CIDR .. ${COLOR_MAGENTA}${AWS_MSK_CIDR_AZ3}"
    echo_reset_dim "Ingress CIDR .............. ${COLOR_MAGENTA}${AWS_MSK_INGRESS_CIDR}"
    echo_reset_dim "Egress CIDR ............... ${COLOR_MAGENTA}${AWS_MSK_EGRESS_CIDR}"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Cluster Monitoring" "    "
  if [[ "${CLUSTER_MONITORING_INCLUDE_GRAFANA}" == 'False' ]]
    then echo_reset_dim "Include Grafana ........... ${COLOR_RED}Package not available"
    else echo_reset_dim "Include Grafana ........... ${COLOR_MAGENTA}Yes"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Storage Class Configuration" "    "
  echo_reset_dim "Storage Class Provider .... ${COLOR_MAGENTA}${STORAGE_CLASS_PROVIDER}"
  if [[ "$STORAGE_CLASS_PROVIDER" == "custom" ]]; then
    echo_reset_dim "ReadWriteOnce ............. ${COLOR_MAGENTA}${STORAGE_CLASS_RWO}"
    echo_reset_dim "ReadWriteMany ............. ${COLOR_MAGENTA}${STORAGE_CLASS_RWX}"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Workload Scale Configuration" "    "
  if [[ -n "${MAS_WORKLOAD_SCALE_PROFILE}" ]]; then
    if [[ "$MAS_WORKLOAD_SCALE_PROFILE" == "Custom" ]]; then
      echo_reset_dim "Workload Scale Profile .... ${COLOR_MAGENTA}${MAS_WORKLOAD_SCALE_PROFILE}"
      echo_reset_dim "Configuration(s) .......... ${COLOR_MAGENTA}${MAS_POD_TEMPLATES_DIR}"
    else
      echo_reset_dim "Workload Scale Profile .... ${COLOR_MAGENTA}${MAS_WORKLOAD_SCALE_PROFILE}"
    fi
  else
    echo_reset_dim "Workload Scale Profile .... ${COLOR_MAGENTA}Burstable"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Cluster Ingress Configuration" "    "
  echo_reset_dim "Certificate Secret ........ ${COLOR_MAGENTA}${OCP_INGRESS_TLS_SECRET_NAME:-<default>}"

  reset_colors
  echo "${TEXT_RESET}"

  # Build non-interactive command
  # export IBM_ENTITLEMENT_KEY=xxx
  # export IBMCLOUD_APIKEY=xxx
  cmd="mas install --mas-catalog-version $MAS_CATALOG_VERSION --accept-license \\
  --license-file $SLS_LICENSE_FILE_LOCAL \\
  --uds-email '$UDS_CONTACT_EMAIL' --uds-firstname '$UDS_CONTACT_FIRSTNAME' --uds-lastname '$UDS_CONTACT_LASTNAME' \\
  --storage-rwo '$STORAGE_CLASS_RWO' --storage-rwx '$STORAGE_CLASS_RWX' --storage-pipeline '$PIPELINE_STORAGE_CLASS' --storage-accessmode '$PIPELINE_STORAGE_ACCESSMODE' \\
  --mas-instance-id '$MAS_INSTANCE_ID' --mas-workspace-id '$MAS_WORKSPACE_ID' --mas-workspace-name '$MAS_WORKSPACE_ID' \\
  --mas-channel '$MAS_CHANNEL'"

  # Optional config
  [ "$LOCAL_MAS_CONFIG_DIR" != "" ] && cmd+=" --additional-configs $LOCAL_MAS_CONFIG_DIR"
  [ "$USE_NON_PROD_MODE" == "true" ] && cmd+=" --non-prod"
  [ "$MAS_TRUST_DEFAULT_CAS" == "true" ] && cmd+=" --mas-trust-default-cas"
  [ "$OCP_INGRESS_TLS_SECRET_NAME" != "" ] && cmd+=" --ocp-ingress-tls-secret-name $OCP_INGRESS_TLS_SECRET_NAME"
  [ "$MAS_WORKLOAD_SCALE_PROFILE" != "" ] && cmd+=" --workload-scale-profile $MAS_WORKLOAD_SCALE_PROFILE"
  [ "$MAS_POD_TEMPLATES_DIR" != "" ] && cmd+=" --mas-pod-templates-dir $MAS_POD_TEMPLATES_DIR"

  # Applications
  [ "$MAS_APP_CHANNEL_IOT" != "" ] && cmd+=" \\
  --iot-channel $MAS_APP_CHANNEL_IOT"
  [ "$MAS_APP_CHANNEL_MONITOR" != "" ] && cmd+=" \\
  --monitor-channel $MAS_APP_CHANNEL_MONITOR"
  [ "$MAS_APP_CHANNEL_MANAGE" != "" ] && cmd+=" \\
  --manage-channel $MAS_APP_CHANNEL_MANAGE"
  [ "$MAS_APPWS_BINDINGS_JDBC_MANAGE" != "" ] && cmd+=" \\
  --manage-jdbc $MAS_APPWS_BINDINGS_JDBC_MANAGE"
  [ "$MAS_APPWS_COMPONENTS" != "" ] && cmd+=" --manage-components $MAS_APPWS_COMPONENTS"
  [ "$MAS_APP_SETTINGS_DEMODATA" == "true" ] && cmd+=" --manage-demodata"

  [ "$MAS_APP_CHANNEL_PREDICT" != "" ] && cmd+=" \\
  --predict-channel $MAS_APP_CHANNEL_PREDICT"
  [ "$MAS_APP_CHANNEL_ASSIST" != "" ] && cmd+=" \\
  --assist-channel $MAS_APP_CHANNEL_ASSIST"
  [ "$MAS_APP_CHANNEL_VISUALINSPECTION" != "" ] && cmd+=" \\
  --visualinspection-channel $MAS_APP_CHANNEL_VISUALINSPECTION"
  [ "$MAS_APP_CHANNEL_OPTIMIZER" != "" ] && cmd+=" \\
  --optimizer-channel $MAS_APP_CHANNEL_OPTIMIZER --optimizer-plan $MAS_APP_PLAN_OPTIMIZER"

  # Kafka
  [ "$KAFKA_PROVIDER" != "" ] && cmd+=" \\
  --kafka-provider $KAFKA_PROVIDER"
  [ "$KAFKA_NAMESPACE" != "" ] && cmd+=" --kafka-namespace $KAFKA_NAMESPACE"
  [ "$KAFKA_VERSION" != "" ] && cmd+=" --kafka-version $KAFKA_VERSION"
  [ "$EVENTSTREAMS_RESOURCEGROUP" != "" ] && cmd+=" --eventstreams-resource-group $EVENTSTREAMS_RESOURCEGROUP"
  [ "$EVENTSTREAMS_NAME" != "" ] && cmd+=" --eventstreams-instance-name $EVENTSTREAMS_NAME"
  [ "$EVENTSTREAMS_LOCATION" != "" ] && cmd+=" --eventstreams-instance-location $EVENTSTREAMS_LOCATION"

  # Mongo
  [ "$MONGODB_NAMESPACE" != "" ] && cmd+=" \\
  --mongodb-namespace $MONGODB_NAMESPACE"

  # IBM Db2
  [ "$DB2_CHANNEL" != "" ] && cmd+=" \\
  --db2u-channel $DB2_CHANNEL"
  [ "$DB2_ACTION_SYSTEM" == "install" ] && cmd+=" --db2u-system"
  [ "$DB2_ACTION_MANAGE" == "install" ] && cmd+=" --db2u-manage"
  [ "$DB2_NAMESPACE" != "" ] && cmd+=" --db2-namespace $DB2_NAMESPACE"

  [ "$DB2_AFFINITY_KEY" != "" ] && cmd+=" \\
  --db2u-affinity-key $DB2_AFFINITY_KEY"
  [ "$DB2_AFFINITY_VALUE" != "" ] && cmd+=" --db2u-affinity-value $DB2_AFFINITY_VALUE"
  [ "$DB2_TOLERATE_KEY" != "" ] && cmd+=" --db2u-tolerate-key $DB2_TOLERATE_KEY"
  [ "$DB2_TOLERATE_VALUE" != "" ] && cmd+=" --db2u-tolerate-value $DB2_TOLERATE_VALUE"
  [ "$DB2_TOLERATE_EFFECT" != "" ] && cmd+=" --db2u-tolerate-effect $DB2_TOLERATE_EFFECT"

  [ "$DB2_CPU_REQUESTS" != "" ] && cmd+=" \\
  --db2u-cpu-request $DB2_CPU_REQUESTS"
  [ "$DB2_CPU_LIMITS" != "" ] && cmd+=" --db2u-cpu-limit $DB2_CPU_LIMITS"
  [ "$DB2_MEMORY_REQUESTS" != "" ] && cmd+=" --db2u-memory-request $DB2_MEMORY_REQUESTS"
  [ "$DB2_MEMORY_LIMITS" != "" ] && cmd+=" --db2u-memory-limit $DB2_MEMORY_LIMITS"

  [ "$DB2_BACKUP_STORAGE_SIZE" != "" ] && cmd+=" \\
  --db2u-backup-storage $DB2_BACKUP_STORAGE_SIZE"
  [ "$DB2_DATA_STORAGE_SIZE" != "" ] && cmd+=" --db2u-data-storage $DB2_DATA_STORAGE_SIZE"
  [ "$DB2_LOGS_STORAGE_SIZE" != "" ] && cmd+=" --db2u-logs-storage $DB2_LOGS_STORAGE_SIZE"
  [ "$DB2_META_STORAGE_SIZE" != "" ] && cmd+=" --db2u-meta-storage $DB2_META_STORAGE_SIZE"
  [ "$DB2_TEMP_STORAGE_SIZE" != "" ] && cmd+=" --db2u-temp-storage $DB2_TEMP_STORAGE_SIZE"

  # TODO: Only add following flags to the command when required to ...
  # ------------------------------------------------------------------------


  # CP4D
  # --cp4d-version ${COLOR_YELLOW}CP4D_VERSION${TEXT_RESET}                                  Product version of IBM Cloud Pak for Data to use
  # --cp4d-install-spss                                                                      Includes SPSS service to be installed as part of IBM Cloud Pak for Data (Optional if Predict is being installed)
  # --cp4d-install-openscale                                                                 Includes Watson Openscale service to be installed as part of IBM Cloud Pak for Data (Optional if Predict is being installed)
  # --cp4d-install-cognos

  # Manage Application - Advanced Configuration (Optional):
  #       --manage-jms                                                                                                        Enables JMS queues using local persistent volumes
  #       --manage-server-bundle-size ${COLOR_YELLOW}MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE${TEXT_RESET}                        Set Manage server bundle size configuration i.e 'dev', 'small', 'jms' or 'snojms'
  #       --manage-customization-archive-name ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME${TEXT_RESET}         Set Manage Archive name
  #       --manage-customization-archive-url ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_URL${TEXT_RESET}           Set Manage Archive url
  #       --manage-customization-archive-username ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_USERNAME${TEXT_RESET} Set Manage Archive username, in case url requires basic authentication to pull the archive
  #       --manage-customization-archive-password ${COLOR_YELLOW}MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_PASSWORD${TEXT_RESET} Set Manage Archive password, in case url requires basic authentication to download the archive
  #       --manage-crypto-key ${COLOR_YELLOW}MAS_APP_SETTINGS_CRYPTO_KEY${TEXT_RESET}                                         Set 'MXE_SECURITY_CRYPTO_KEY' value if you want to customize your Manage database encryption keys
  #       --manage-cryptox-key ${COLOR_YELLOW}MAS_APP_SETTINGS_CRYPTOX_KEY${TEXT_RESET}                                       Set 'MXE_SECURITY_CRYPTOX_KEY' value if you want to customize your Manage database encryption keys
  #       --manage-old-crypto-key ${COLOR_YELLOW}MAS_APP_SETTINGS_OLD_CRYPTO_KEY${TEXT_RESET}                                 Set 'MXE_SECURITY_OLD_CRYPTO_KEY' value if you want to customize your Manage database encryption keys
  #       --manage-old-cryptox-key ${COLOR_YELLOW}MAS_APP_SETTINGS_OLD_CRYPTOX_KEY${TEXT_RESET}                               Set 'MXE_SECURITY_OLD_CRYPTOX_KEY' value if you want to customize your Manage database encryption keys
  #       --manage-override-encryption-secrets
  reset_colors
  echo
  echo_h4 "Non-Interactive Install Command"
  echo "${TEXT_DIM}Use these commands to easily re-run the same installation anywhere:"
  echo
  echo "${TEXT_DIM}export IBM_ENTITLEMENT_KEY=xxx"
  [[ "$IBMCLOUD_APIKEY" != "" ]] && echo "${TEXT_DIM}export IBMCLOUD_APIKEY=xxx"
  echo "${TEXT_DIM}$cmd"
  echo

  reset_colors
  echo "${TEXT_RESET}"
  if [ "$NO_CONFIRM" != "true" ]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi
}

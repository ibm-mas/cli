#!/bin/bash
MG_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd "../must-gather" && pwd )"

function must_gather_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas must-gather [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.

Collection Options (Optional):
  -d, --directory ${COLOR_YELLOW}MG_DIR${TEXT_RESET}     Directory where the must-gather will be saved, defaults to /tmp/must-gather
  -k, --keep-files           Do not delete individual files after creating the must-gather compressed tar archive
  --summary-only             Perform a much faster must-gather that only gathers high level summary of resources in the cluster
  --no-pod-logs              Skip collection of pod logs, greatly speeds up must-gather collection time when pod logs are not required
  --mas-instance-ids         Collects the data for the specifed MAS instances, if not specified will collect for all MAS instances on the cluster
  --secret-data              Collects also the content of the secrets

Artifactory Upload (Optional):
  --artifactory-token ${COLOR_YELLOW}ARTIFACTORY_TOKEN${TEXT_RESET}              Provide a token for Artifactory to automatically upload the file to ARTIFACTORY_UPLOAD_DIR
  --artifactory-upload-dir ${COLOR_YELLOW}ARTIFACTORY_UPLOAD_DIR${TEXT_RESET}    Working URL to the root directory in Artifactory where the must-gather file should be uploaded

Other Options:
  -h, --help    Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}


function mustgather() {
  # Take the first parameter off (it will be "must-gather")
  shift

  # Set defaults
  SUMMARY_ONLY=false
  POD_LOGS=true
  SECRET_DATA=false
  MG_DIR=/tmp/must-gather

  # If a /must-gather directory exists, default to that as the output directory instead
  if [[ -d "/must-gather" ]]; then
    MG_DIR=/must-gather
  fi

  # Process command flags
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
    -d|--directory)
      MG_DIR=$1; shift
      ;;
    --summary-only)
      SUMMARY_ONLY=true
      ;;
    --no-logs|--no-pod-logs)
      POD_LOGS=false
      ;;
    --mas-instance-ids)
      MAS_INSTANCE_IDS=$1; shift 
      ;;
    --secret-data)
      SECRET_DATA=true 
      ;;
    --artifactory-token)
      ARTIFACTORY_TOKEN=$1; shift
      ;;
    --artifactory-upload-dir)
      ARTIFACTORY_UPLOAD_DIR=$1; shift
      ;;
    -k|--keep-files)
      KEEP_FILES=true;
      ;;
    -h|--help)
      must_gather_help
      exit 0
      ;;
    *)
      # unknown option
      echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
      must_gather_help
      exit 1
      ;;
    esac
  done

  TIMESTAMP=$(date +"%Y%m%d-%H%M%S")

  # All the output is generated here
  OUTPUT_DIR=${MG_DIR}/${TIMESTAMP}
  mkdir -p $OUTPUT_DIR

  if [[ "$?" != "0" ]]; then
    echo_warning "Unable to create must-gather output directory '${MG_DIR}/${TIMESTAMP}'"
    exit 1
  fi

  # The final destination for the must-gather is a tgz
  OUTPUT_FILENAME=must-gather-${TIMESTAMP}.tgz
  OUTPUT_FILE=${MG_DIR}/${OUTPUT_FILENAME}


  echo "Must gather will be saved to: $OUTPUT_FILE"
  echo ""

  # Generate OCP Report
  # -----------------------------------------------------------------------------
  echo_h2 "Generate OCP Report"

  echo "- Cluster Resources"
  for RESOURCE in nodes storageclasses clusterversions
  do
    $MG_SCRIPT_DIR/mg-collect-resources -r $RESOURCE -d $OUTPUT_DIR/resources
  done

  for RESOURCE in namespaces packagemanifests clusterroles clusterrolebindings
  do
    $MG_SCRIPT_DIR/mg-collect-resources -r $RESOURCE -d $OUTPUT_DIR/resources --no-detail
  done

  echo "- OpenShift Marketplace"
  for RESOURCE in catalogsources jobs
  do
    $MG_SCRIPT_DIR/mg-collect-resources -n openshift-marketplace -r $RESOURCE -d $OUTPUT_DIR/resources
  done

  echo "- Operators"
  echo "  - Collecting debug information: operatorconditions"
  oc get operatorconditions --all-namespaces &> ${OUTPUT_DIR}/operatorconditions.txt
  for RESOURCE in subscriptions installplans
  do
    $MG_SCRIPT_DIR/mg-collect-resources -r $RESOURCE -d $OUTPUT_DIR/resources -a
  done


  # Generate Dependency Report
  # -----------------------------------------------------------------------------
  echo ""
  echo_h2 "Generate Dependency Report"
  echo "- IBM CloudPak Foundation Services"
  $MG_SCRIPT_DIR/mg-summary-ibm-common-services &> ${OUTPUT_DIR}/ibm-common-services.txt

  echo "- IBM CloudPak for Data"
  $MG_SCRIPT_DIR/mg-summary-cp4d &> ${OUTPUT_DIR}/cp4d.txt

  echo "- IBM Db2 Universal Operator"
  $MG_SCRIPT_DIR/mg-summary-db2u &> ${OUTPUT_DIR}/db2u.txt


  # Find MongoCE
  # -----------------------------------------------------------------------------
  MONGOCE_NAMESPACES=$(oc get mongodbcommunity --all-namespaces --ignore-not-found -o jsonpath='{.items[*].metadata.namespace}')
  echo ""
  for MONGOCE_NAMESPACE in $MONGOCE_NAMESPACES
  do
    echo_h2 "MongoCE: ${MONGOCE_NAMESPACE}"
    $MG_SCRIPT_DIR/mg-summary-mongoce $MONGOCE_NAMESPACE &> ${OUTPUT_DIR}/mongoce-${MONGOCE_NAMESPACE}.txt
    $MG_SCRIPT_DIR/mg-collect-mongoce $MONGOCE_NAMESPACE $OUTPUT_DIR
  done

  if [[ -z $MAS_INSTANCE_IDS ]]
  then
    # Find MAS instances
    # -----------------------------------------------------------------------------
    MAS_INSTANCE_IDS=$(oc get suite --all-namespaces --ignore-not-found -o jsonpath='{.items[*].metadata.name}')
  fi

  echo ""
  for MAS_INSTANCE_ID in $MAS_INSTANCE_IDS
  do
    echo_h2 "Maximo Application Suite Must Gather: ${MAS_INSTANCE_ID}"

    for MAS_APP_ID in core add assist iot monitor manage optimizer predict visualinspection pipelines
    do
      MAS_APP_NAMESPACE=mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}
      NAMESPACE_LOOKUP=$(oc get namespace $MAS_APP_NAMESPACE --ignore-not-found)

      if [[ "$NAMESPACE_LOOKUP" != "" ]]
      then
        echo -e "- Performing must-gather in namespace ${MAS_APP_NAMESPACE}"
        # MAS-specific must-gather
        $MG_SCRIPT_DIR/mg-summary-mas-${MAS_APP_ID} $MAS_APP_NAMESPACE &> ${OUTPUT_DIR}/mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}.txt

        # Generic Kubernetes must-gather
        if [[ "$SUMMARY_ONLY" == false ]]
        then
          $MG_SCRIPT_DIR/mg-collect-mas-${MAS_APP_ID} $MAS_APP_NAMESPACE $OUTPUT_DIR
          $MG_SCRIPT_DIR/mg-collect-pods $MAS_APP_NAMESPACE $POD_LOGS $OUTPUT_DIR/resources
          for RESOURCE in configmaps services routes pvc deployments statefulsets jobs operatorconditions clusterserviceversions installplans subscriptions serviceaccounts roles rolebindings
          do
            $MG_SCRIPT_DIR/mg-collect-resources -n $MAS_APP_NAMESPACE -r $RESOURCE -d $OUTPUT_DIR/resources
          done
          $MG_SCRIPT_DIR/mg-collect-secrets -n $MAS_APP_NAMESPACE -r $RESOURCE -d $OUTPUT_DIR/resources -s $SECRET_DATA
        fi
      fi
    done
  done

  # Gather SLS data
  # -----------------------------------------------------------------------------
  SLS_NAMESPACES=$(oc get LicenseService --all-namespaces --ignore-not-found -o jsonpath='{.items[*].metadata.namespace}')
  echo ""
  for SLS_NAMESPACE in $SLS_NAMESPACES
  do
    # assume that there is only one LicenseService in the namespace
    SLS_NAME=$(oc get LicenseService -n ${SLS_NAMESPACE} --ignore-not-found -o jsonpath='{.items[0].metadata.name}')
    echo_h2 "Suite Licensing Service Must Gather from ${SLS_NAME} in ${SLS_NAMESPACE}"

    # SLS-specific must-gather
    $MG_SCRIPT_DIR/mg-summary-sls $SLS_NAMESPACE &> ${OUTPUT_DIR}/${SLS_NAMESPACE}.txt

    # Generic Kubernetes must-gather
    if [[ "$SUMMARY_ONLY" == false ]]
    then
      $MG_SCRIPT_DIR/mg-collect-sls $SLS_NAMESPACE $OUTPUT_DIR

      $MG_SCRIPT_DIR/mg-collect-pods $SLS_NAMESPACE $POD_LOGS $OUTPUT_DIR/resources
      for RESOURCE in configmaps services routes deployments jobs operatorconditions clusterserviceversions installplans subscriptions serviceaccounts roles rolebindings
      do
        $MG_SCRIPT_DIR/mg-collect-resources -n $SLS_NAMESPACE -r $RESOURCE -d $OUTPUT_DIR/resources
      done
      $MG_SCRIPT_DIR/mg-collect-secrets -n $SLS_NAMESPACE -r $RESOURCE -d $OUTPUT_DIR/resources -s $SECRET_DATA
    fi
  done

  python3 $MG_SCRIPT_DIR/summarizer/mg-print-summary.py $OUTPUT_DIR | tee $OUTPUT_DIR/summary.txt

  tar -czf $OUTPUT_FILE -C $MG_DIR $TIMESTAMP
  if [[ -n "$ARTIFACTORY_TOKEN" && -n "$ARTIFACTORY_UPLOAD_DIR" ]]; then
    set -e
    ARTIFACTORY_AUTH_HEADER="Authorization:Bearer $ARTIFACTORY_TOKEN"
    TARGET_URL="${ARTIFACTORY_UPLOAD_DIR}/${OUTPUT_FILENAME}"

    MD5_VALUE="`md5sum "$OUTPUT_FILE"`"
    MD5_VALUE="${MD5_VALUE:0:32}"

    SHA1_VALUE="`sha1sum "$OUTPUT_FILE"`"
    SHA1_VALUE="${SHA1_VALUE:0:40}"

    echo "Uploading $OUTPUT_FILE to $TARGET_URL"
    curl -H "$ARTIFACTORY_AUTH_HEADER"  -H "X-Checksum-Md5: $MD5_VALUE" -H "X-Checksum-Sha1: $SHA1_VALUE" -T $OUTPUT_FILE $TARGET_URL
    set +e
  fi

  if [[ "$KEEP_FILES" != "true" ]]; then
    rm -rf "$OUTPUT_DIR"
  fi

  echo
  echo_green "Must gather successfully saved to: $OUTPUT_FILE"

  true
}

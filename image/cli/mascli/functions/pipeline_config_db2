#!/bin/bash

# Do we need to set up an IoT database?
# -------------------------------------------------------------------------
function db2_for_iot() {
  if [ "$MAS_APP_CHANNEL_IOT" != "" ]; then
    # Set up system database - using db2u or external datasource
    echo_h3 "Database configuration for Maximo IoT"
    echo "${TEXT_DIM}Maximo IoT requires a shared system-scope Db2 instance because others application in the suite require access to the same database source."
    echo " - Only IBM Db2 is supported for this database"
    echo ""
    reset_colors

    if prompt_for_confirm_default_yes "Create system Db2 instance using the IBM Db2 Universal Operator?"; then
      DB2_ACTION_SYSTEM=install
    else
      DB2_ACTION_SYSTEM=byo

      select_local_config_dir

      # Check if a configuration already exists before creating a new one
      jdbc_cfg_file=$LOCAL_MAS_CONFIG_DIR/jdbc-$MAS_INSTANCE_ID-system.yaml
      if [ -e "$jdbc_cfg_file" ]; then
        if prompt_for_confirm "System database configuration file 'jdbc-$MAS_INSTANCE_ID-system.yaml' already exists.  Do you want to generate a new one?"; then
          python3 $DIR/functions/gencfg jdbc $MAS_INSTANCE_ID system $jdbc_cfg_file
        fi
      else
        python3 $DIR/functions/gencfg jdbc $MAS_INSTANCE_ID system $jdbc_cfg_file
      fi
    fi
  else
    # We don't need a system database, IoT is not being installed
    DB2_ACTION_SYSTEM=none
  fi
}

# Do we need to set up a Manage database?
# -------------------------------------------------------------------------
function db2_for_manage() {
  if [ "$MAS_APP_CHANNEL_MANAGE" != "" ]; then
    echo_h3 "Database configuration for Maximo Manage"
    echo "${TEXT_DIM}Maximo Manage can be configured to share the system Db2 instance or use it's own dedicated database:"
    echo " - Use of a shared instance has a significant footprint reduction but is only recommended for development/test/demo installs"
    echo " - In most production systems you will want to use a dedicated database"
    echo " - IBM Db2, Oracle Database, & Microsoft SQL Server are all supported database options"
    echo ""
    reset_colors

    # Determine whether to use the system or a dedicated database
    if [ "$MAS_APP_CHANNEL_IOT" != "" ] && prompt_for_confirm_default_yes "Re-use System Db2 instance for Manage application?"; then
      # We are going to bind Manage to the system database, which has already been set up in the previous step
      MAS_APPWS_BINDINGS_JDBC_MANAGE=system
      DB2_ACTION_MANAGE=none
    else
      MAS_APPWS_BINDINGS_JDBC_MANAGE=workspace-application
      # Set up database using Db2u operator, or BYO
      if prompt_for_confirm_default_yes "Create Manage dedicated Db2 instance using the IBM Db2 Universal Operator?"; then
        DB2_ACTION_MANAGE=install
      else
        DB2_ACTION_MANAGE=byo

        select_local_config_dir

        # Check if a configuration already exists before creating a new one
        jdbc_cfg_file=$LOCAL_MAS_CONFIG_DIR/jdbc-$MAS_INSTANCE_ID-manage.yaml
        if [ -e "$jdbc_cfg_file" ]; then
          if prompt_for_confirm "Manage database configuration file 'jdbc-$MAS_INSTANCE_ID-manage.yaml' already exists.  Do you want to generate a new one?"; then
            python3 $DIR/functions/gencfg jdbc $MAS_INSTANCE_ID workspace-application $jdbc_cfg_file --workspace-id $MAS_WORKSPACE_ID --application-id manage
          fi
        else
          python3 $DIR/functions/gencfg jdbc $MAS_INSTANCE_ID workspace-application $jdbc_cfg_file --workspace-id $MAS_WORKSPACE_ID --application-id manage
        fi
      fi
    fi
  else
    DB2_ACTION_MANAGE=none
  fi
}

# Do we need to configure Db2u?
# -----------------------------------------------------------------------------
function db2u_configuration() {
  if [[ "$DB2_ACTION_SYSTEM" == "install" || "$DB2_ACTION_MANAGE" == "install" ]]; then
    db2_channel_selection

    # Node Affinity & Tolerations
    # -------------------------------------------------------------------------
    echo
    echo_h3 "Node Affinity and Tolerations"
    echo "${TEXT_DIM}Note that the same settings are applied to both the IoT and Manage Db2 instances."
    echo "Use existing node labels and taints to control scheduling of the Db2 workload in your cluster."
    echo "For more information refer to the Red Hat documentation:"
    echo "- ${COLOR_CYAN}${TEXT_UNDERLINE}https://docs.openshift.com/container-platform/4.12/nodes/scheduling/nodes-scheduler-node-affinity.html${TEXT_RESET}${TEXT_DIM}"
    echo "- ${COLOR_CYAN}${TEXT_UNDERLINE}https://docs.openshift.com/container-platform/4.12/nodes/scheduling/nodes-scheduler-taints-tolerations.html${TEXT_RESET}"
    echo
    reset_colors
    export DB2_SET_AFFINITY=false
    export DB2_SET_TOLERATIONS=false
    if prompt_for_confirm "Configure node affinity?"; then
      export DB2_SET_AFFINITY=true
      prompt_for_input "+ Key" DB2_AFFINITY_KEY && export DB2_AFFINITY_KEY
      prompt_for_input "+ Value" DB2_AFFINITY_VALUE && export DB2_AFFINITY_VALUE
    else
      export DB2_AFFINITY_KEY=""
      export DB2_AFFINITY_VALUE=""
    fi
    if prompt_for_confirm "Configure node tolerations?"; then
      export DB2_SET_TOLERATIONS=true
      prompt_for_input "+ Key" DB2_TOLERATE_KEY && export DB2_TOLERATE_KEY
      prompt_for_input "+ Value" DB2_TOLERATE_VALUE && export DB2_TOLERATE_VALUE
      prompt_for_input "+ Effect" DB2_TOLERATE_EFFECT && export DB2_TOLERATE_EFFECT
    else
      export DB2_TOLERATE_KEY=""
      export DB2_TOLERATE_VALUE=""
      export DB2_TOLERATE_EFFECT=""
    fi

    # CPU & Memory
    # -------------------------------------------------------------------------
    echo
    echo_h3 "Database CPU & Memory"
    echo "${TEXT_DIM}Note that the same settings are applied to both the IoT and Manage Db2 instances."
    echo
    reset_colors
    echo_reset_dim "CPU Request:    ${COLOR_MAGENTA}${DB2_CPU_REQUESTS:-Default}"
    echo_reset_dim "CPU Limit:      ${COLOR_MAGENTA}${DB2_CPU_LIMITS:-Default}"
    echo_reset_dim "Memory Request: ${COLOR_MAGENTA}${DB2_MEMORY_REQUESTS:-Default}"
    echo_reset_dim "Memory Limit:   ${COLOR_MAGENTA}${DB2_MEMORY_LIMITS:-Default}"
    echo
    reset_colors
    if prompt_for_confirm "Customize CPU and memory request/limit?"; then
      prompt_for_input "+ CPU Request" DB2_CPU_REQUESTS && export DB2_CPU_REQUESTS
      prompt_for_input "+ CPU Limit" DB2_CPU_LIMITS && export DB2_CPU_LIMITS
      prompt_for_input "+ Memory Request" DB2_MEMORY_REQUESTS && export DB2_MEMORY_REQUESTS
      prompt_for_input "+ Memory Limit" DB2_MEMORY_LIMITS && export DB2_MEMORY_LIMITS
    fi

    # Storage
    # -------------------------------------------------------------------------
    echo
    echo_h3 "Database Storage Capacity"
    echo "${TEXT_DIM}Note that the same settings are applied to both the IoT and Manage Db2 instances."
    echo
    reset_colors
    echo_reset_dim " - Meta:             ${COLOR_MAGENTA}${DB2_META_STORAGE_SIZE:-Default}"
    echo_reset_dim " - Data:             ${COLOR_MAGENTA}${DB2_DATA_STORAGE_SIZE:-Default}"
    echo_reset_dim " - Backup:           ${COLOR_MAGENTA}${DB2_BACKUP_STORAGE_SIZE:-Default}"
    echo_reset_dim " - Temp:             ${COLOR_MAGENTA}${DB2_TEMP_STORAGE_SIZE:-Default}"
    echo_reset_dim " - Transaction Logs: ${COLOR_MAGENTA}${DB2_LOGS_STORAGE_SIZE:-Default}"
    echo
    reset_colors
    if prompt_for_confirm "Customize storage capacity?"; then
      prompt_for_input "+ Data volume size" DB2_DATA_STORAGE_SIZE && export DB2_DATA_STORAGE_SIZE
      prompt_for_input "+ Temporary volume size" DB2_TEMP_STORAGE_SIZE && export DB2_TEMP_STORAGE_SIZE
      prompt_for_input "+ Metadata volume size" DB2_META_STORAGE_SIZE && export DB2_META_STORAGE_SIZE
      prompt_for_input "+ Transaction logs volume size" DB2_LOGS_STORAGE_SIZE && export DB2_LOGS_STORAGE_SIZE
      prompt_for_input "+ Backup volume size" DB2_BACKUP_STORAGE_SIZE && export DB2_BACKUP_STORAGE_SIZE
    fi
  fi
}

function config_pipeline_db2() {
  echo
  echo_h2 "Configure Databases"
  echo "${TEXT_DIM}The installer can setup one or more IBM Db2 instances in your OpenShift cluster for the use of applications that require a JDBC datasource (IoT, Manage, Monitor, & Predict) or you may choose to configure MAS to use an existing database."
  echo
  reset_colors

  # Unless we are installing IoT or Manage we have nothing to do
  if [[ "$MAS_APP_CHANNEL_IOT" != "" ||  "$MAS_APP_CHANNEL_MANAGE" != "" ]]; then
    # Defaults
    DB2_CPU_REQUESTS=${DB2_CPU_REQUESTS:-4000m}
    DB2_CPU_LIMITS=${DB2_CPU_LIMITS:-6000m}

    DB2_MEMORY_REQUESTS=${DB2_MEMORY_REQUESTS:-8Gi}
    DB2_MEMORY_LIMITS=${DB2_MEMORY_LIMITS:-12Gi}

    if [[ "$SNO_MODE" == "true" ]]; then
      # Set smaller defaults for SNO deployments
      DB2_META_STORAGE_SIZE=${DB2_META_STORAGE_SIZE:-10Gi}
      DB2_BACKUP_STORAGE_SIZE=${DB2_BACKUP_STORAGE_SIZE:-10Gi}
      DB2_LOGS_STORAGE_SIZE=${DB2_LOGS_STORAGE_SIZE:-10Gi}
      DB2_TEMP_STORAGE_SIZE=${DB2_TEMP_STORAGE_SIZE:-10Gi}
      DB2_DATA_STORAGE_SIZE=${DB2_DATA_STORAGE_SIZE:-20Gi}
    else
      DB2_META_STORAGE_SIZE=${DB2_META_STORAGE_SIZE:-20Gi}
      DB2_BACKUP_STORAGE_SIZE=${DB2_BACKUP_STORAGE_SIZE:-100Gi}
      DB2_LOGS_STORAGE_SIZE=${DB2_LOGS_STORAGE_SIZE:-100Gi}
      DB2_TEMP_STORAGE_SIZE=${DB2_TEMP_STORAGE_SIZE:-100Gi}
      DB2_DATA_STORAGE_SIZE=${DB2_DATA_STORAGE_SIZE:-100Gi}
    fi

    db2_for_iot
    db2_for_manage
    db2u_configuration
  else
    echo_highlight "No applications have been selected that require a Db2 installation"
    DB2_ACTION_SYSTEM=none
    DB2_ACTION_MANAGE=none
  fi
}

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: mas-fvt-wait-for-pipelinerun
spec:
  params:
    - name: pipelinerun_name
      type: string
    - name: ignore_failure
      type: string
      default: "True"

  steps:
    - name: wait-for-pipelinerun
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      script: |
        #!/usr/bin/env bash

        echo "Waiting for pipelinerun/$(params.pipelinerun_name) in $(context.taskRun.namespace) to complete ..."

        echo ""
        echo "Status of pipelinerun"
        echo "------------------------------------------------------------------"
        oc -n $(context.taskRun.namespace) get pipelinerun/$(params.pipelinerun_name)

        echo ""
        echo "Waiting for pipelinerun/$(params.pipelinerun_name) to complete"
        echo "------------------------------------------------------------------"
        # oc -n $(context.taskRun.namespace) wait pipelinerun/$(params.pipelinerun_name) --for=condition=Succeeded --timeout=12h

        IGNORE_FAILURE=$(params.ignore_failure)
        PIPELINERUN_NAME=$(params.pipelinerun_name)
        COMPLETION_TIME=$(oc -n $(context.taskRun.namespace) get pipelinerun/$PIPELINERUN_NAME -o jsonpath='{.status.completionTime}')
        # 1 minute * 720 = ~12 hours
        MAX_RETRIES=720
        RETRIES_USED=0
        DELAY=60
        while [[ "$COMPLETION_TIME" == "" && "$RETRIES_USED" -lt "$MAX_RETRIES" ]]; do
          echo "[$RETRIES_USED/$MAX_RETRIES] pipelinerun/$PIPELINERUN_NAME is still running.  Waiting $DELAY seconds before checking again"
          sleep $DELAY
          COMPLETION_TIME=$(oc -n $(context.taskRun.namespace) get pipelinerun/$PIPELINERUN_NAME -o jsonpath='{.status.completionTime}')
          RETRIES_USED=$((RETRIES_USED + 1))
        done

        echo "Completion Time = $COMPLETION_TIME"
        echo "Retries Used    = $RETRIES_USED"
        RESULT=$(oc -n $(context.taskRun.namespace) get pipelinerun/$PIPELINERUN_NAME -o jsonpath='{.status.conditions[0].status}')

        if [[ "$RESULT" == "True" ]]; then
          echo "Result          = PipelineRun completed successfully"
          exit 0
        elif [[ "$IGNORE_FAILURE" == "True" ]]; then
          echo "Result          = PipelineRun failed (ignored)"
          exit 0
        else
          echo "Result          = PipelineRun failed"
          exit 1
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: aiservice-fvt-launcher
spec:
  params:
    - name: image_pull_policy
      type: string

    - name: aiservice_instance_id
      type: string

    - name: sync_with_install
      type: string
      default: "false"
      description: "Set this to 'true' to enable synchronization with a running MAS install pipeline"

    # What to launch
    # -------------------------------------------------------------------------
    - name: launchfvt_aiservice
      type: string
      default: "false"
      description: "Set this to 'true' to enable launch of the AIService FVT pipeline after the ai service has been installed"

    # Finalize
    # -------------------------------------------------------------------------
    - name: finalize
      type: string
      default: "true"
      description: "Set this to 'false' to stop the finalize task from running for this launcher"
    - name: set_finished
      type: string
      default: "true"
      description: "Set this to 'false' to stop the the fvt test being marked as complete"

    # Deprovision Resources
    # -------------------------------------------------------------------------
    - name: deprovision
      type: string
      default: "false"
      description: "Set this to 'true' to enable deprovision of the target cluster & associated resources following the completion of this pipeline"

  tasks:
    - name: waitfor-aiservice
      timeout: "0"
      taskRef:
        kind: Task
        name: mas-devops-wait-for-configmap
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: namespace
          value: $(context.taskRun.namespace)
        - name: configmap_name
          value: approval-aiservice
        - name: configmap_target_value
          value: pending
        # 25 retries at 5 minute intervals = 2 hours
        - name: delay
          value: "300"
        - name: max_retries
          value: "25"
        - name: ignore_failure
          value: "False"
      when:
        - input: $(params.launchfvt_aiservice)
          operator: in
          values: ["true", "True"]
        - input: $(params.sync_with_install)
          operator: in
          values: ["true", "True"]

    - name: launchfvt-aiservice
      timeout: "0"
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: pipelinerun_name
          value: "$(params.aiservice_instance_id)-fvt-aiservice"
      taskRef:
        kind: Task
        name: aiservice-launchfvt
      when:
        - input: $(params.launchfvt_aiservice)
          operator: in
          values: ["true", "True"]
      runAfter:
        - waitfor-aiservice

    - name: approval-aiservice
      timeout: "0"
      taskRef:
        kind: Task
        name: mas-devops-update-configmap
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: configmap_name
          value: approval-aiservice
        - name: configmap_value
          value: approved
      when:
        - input: $(params.sync_with_install)
          operator: in
          values: ["true", "True"]
      runAfter:
        - launchfvt-aiservice

    # Install Sync Point
    # -------------------------------------------------------------------------
    - name: waitfor-install
      timeout: "0"
      taskRef:
        kind: Task
        name: mas-devops-wait-for-configmap-v2
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: configmap_name
          value: sync-install
        - name: configmap_target_value
          value: Completed,Succeeded,Failed
      when:
        - input: $(params.sync_with_install)
          operator: in
          values: ["true", "True"]
      runAfter:
        - approval-aiservice

    # Update Sync Point
    # -------------------------------------------------------------------------
    # mas-fvt-pre-update Task is not relevant for AI Service and we do not have any Pre-Update activity.
    # Hence starting update as soon as sync-install is approved.

   - name: start-update
      timeout: "0"
      taskRef:
        kind: Task
        name: mas-fvt-start-update
      when:
        - input: $(params.sync_with_update)
          operator: in
          values: ["true", "True"]
      runAfter:
        - waitfor-install

    - name: waitfor-update
      timeout: "0"
      taskRef:
        kind: Task
        name: mas-devops-wait-for-configmap-v2
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: configmap_name
          value: sync-update
        - name: configmap_namespace
          value: "mas-pipelines"
        - name: configmap_target_value
          value: Completed,Succeeded,Failed
      when:
        - input: $(params.sync_with_update)
          operator: in
          values: ["true", "True"]
      runAfter:
        - start-update

    # Verify health of the cluster before we consider the update complete
    # Reusing mas-devops-ocp-verify Task which already has 
    # -------------------------------------------------------------------------
    - name: post-update
      timeout: "0"
      taskRef:
        kind: Task
        name: mas-devops-ocp-verify
      params:
        {{ lookup('template', pipeline_src_dir ~ '/taskdefs/common/cli-params.yml.j2') | indent(4) }}
        # Pipeline Config
        - name: devops_suite_name
          value: "post-update"
        - name: verify_cluster
          value: {{ verify_cluster | default("True") }}
        - name: verify_catalogsources
          value: {{ verify_catalogsources | default("True") }}
        - name: verify_subscriptions
          value: {{ verify_subscriptions | default("True") }}
        - name: verify_workloads
          value: {{ verify_workloads | default("True") }}
        - name: verify_ingress
          value: {{ verify_ingress | default("True") }}
      when:
        - input: "$(params.skip_pre_check)"
          operator: notin
          values: ["True", "true"]
      runAfter:
        - waitfor-update

  # Finally
  # ---------------------------------------------------------------------------
  finally:
    - name: launchfvt-finally
      timeout: "0"
      taskRef:
        kind: Task
        name: mas-launchfvt-finally
      params:
        - name: deprovision
          value: "$(params.deprovision)"
        - name: finalize
          value: "$(params.finalize)"
        - name: set_finished
          value: "$(params.set_finished)"
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: pipelinerun_name
          value: "$(context.pipelineRun.name)-fvt-finally"

  workspaces:
    # The generated configuration files
    - name: shared-configs

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
{% if wait_for_install == true %}
  name: mas-upgrade-after-install
{% else %}
  name: mas-upgrade
{% endif %}
spec:
{% if wait_for_install == true %}
  workspaces:
    # Shared storage to hold mustgather output for tasks
    - name: shared-mustgather
{% endif %}

  params:
    # 1. Common Parameters
    # -------------------------------------------------------------------------
    {{ lookup('template', params_src_dir ~ '/common.yml.j2') | indent(4) }}

    # 2. Upgrade
    # -------------------------------------------------------------------------
    - name: skip_compatibility_check
      type: string
      default: "False"
      description: Skip performing compatiblity checks before upgrade

    # Pipeline config
    - name: skip_pre_check
      type: string
      default: ""

{% if wait_for_install == true %}
    - name: launchfvt_upgrade
      type: string
      default: "" # Considered False when not informed
      description: "Set this to any value other than 'true' to disable launch of the pre and post upgrade tests pipeline (running before and after upgrade process happens)"
    - name: pipelinerun_name
      type: string
      description: name of the installation pipelinerun that must be tracked til completion
{% endif %}

    {{ lookup('template', params_src_dir ~ '/install-appchannels.yml.j2') | indent(4) }}

  tasks:
{% if wait_for_install == true %}
    # 0. Wait for the install pipeline to complete
    # -------------------------------------------------------------------------
    - name: wait-for-install
      taskRef:
        kind: Task
        name: mas-devops-wait-for-tekton
      params:
        - name: type
          value: pipelinerun
        - name: name
          value: $(params.pipelinerun_name)
        - name: delay
          value: 600  # seconds between checking the status of the pipelinerun
        - name: retries
          value: 50  # attempts before giving up
        - name: ignore_failure
          value: "False"  # fails and exit once the first failure is detected
{% endif %}

    # 1. Verify health of the cluster before we change anything
    # -------------------------------------------------------------------------
    {{ lookup('template', 'taskdefs/cluster-setup/ocp-verify-all.yml.j2', template_vars={
        'name': 'pre-upgrade-check',
        'devops_suite_name': 'pre-upgrade-check'
      }) | indent(4) }}
{% if wait_for_install == true %}
      runAfter:
        - wait-for-install
{% endif %}

{% if wait_for_install == true %}
    # 2. Pre-Upgrade pipeline call - test scripts to run before upgrade
    # -------------------------------------------------------------------------
    - name: launchfvt-upgrade-pre
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: pipelinerun_name
          value: "$(params.mas_instance_id)-fvt-uprade-pre"
      taskRef:
        kind: Task
        name: mas-launchfvt-upgrade-pre
      when:
        - input: $(params.launchfvt_upgrade)
          operator: in
          values: ["true", "True"]
      runAfter:
        - pre-upgrade-check
{% endif %}

    # 3. Suite Upgrade (Phase 1)
    # -------------------------------------------------------------------------
    - name: core-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-upgrade
      runAfter:
{% if wait_for_install == true %}
        - launchfvt-upgrade-pre
{% else %}
        - pre-upgrade-check
{% endif %}
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_channel
          value: $(params.mas_channel)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: core-upgrade

    - name: core-verify
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_channel
          value: $(params.mas_channel)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: core-verify
      taskRef:
        kind: Task
        name: mas-devops-suite-verify
      runAfter:
        - core-upgrade


    # 4. IoT Upgrade (Phase 2)
    # -------------------------------------------------------------------------
    - name: iot-upgrade
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: iot
        - name: mas_app_channel
          value: $(params.mas_app_channel_iot)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: iot-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-app-upgrade
      runAfter:
        - core-verify


    # 5. Manage Upgrade (Phase 2)
    # -------------------------------------------------------------------------
    - name: manage-upgrade
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: manage
        - name: mas_app_channel
          value: $(params.mas_app_channel_manage)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: manage-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-app-upgrade
      runAfter:
        - core-verify


    # 6. Visual Inspection Upgrade (Phase 2)
    # -------------------------------------------------------------------------
    - name: visualinspection-upgrade
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: visualinspection
        - name: mas_app_channel
          value: $(params.mas_app_channel_visualinspection)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: visualinspection-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-app-upgrade
      runAfter:
        - core-verify


    # 7. Assist Upgrade (Phase 2)
    # -------------------------------------------------------------------------
    - name: assist-upgrade
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: assist
        - name: mas_app_channel
          value: $(params.mas_app_channel_assist)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: assist-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-app-upgrade
      runAfter:
        - core-verify


    # 8. Optimizer Upgrade (Phase 2)
    # -------------------------------------------------------------------------
    - name: optimizer-upgrade
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: optimizer
        - name: mas_app_channel
          value: $(params.mas_app_channel_optimizer)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: optimizer-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-app-upgrade
      runAfter:
        - core-verify


    # 9. Monitor Upgrade (Phase 3 - after IoT)
    # -------------------------------------------------------------------------
    - name: monitor-upgrade
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: monitor
        - name: mas_app_channel
          value: $(params.mas_app_channel_monitor)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: monitor-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-app-upgrade
      runAfter:
        - iot-upgrade


    # 10. Predict Upgrade (Phase 3 - after Manage)
    # -------------------------------------------------------------------------
    - name: predict-upgrade
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: predict
        - name: mas_app_channel
          value: $(params.mas_app_channel_predict)
        - name: skip_compatibility_check
          value: $(params.skip_compatibility_check)
        - name: devops_suite_name
          value: predict-upgrade
      taskRef:
        kind: Task
        name: mas-devops-suite-app-upgrade
      runAfter:
        - manage-upgrade

    # 11. Verify health of the cluster after upgrade
    # -------------------------------------------------------------------------
    {{ lookup('template', 'taskdefs/cluster-setup/ocp-verify-all.yml.j2', template_vars={
        'name': 'post-upgrade-verify',
        'devops_suite_name': 'post-upgrade-verify'
      }) | indent(4) }}
      runAfter:
        # Phase 2 apps that don't have a phase 3 app following it
        - assist-upgrade
        - optimizer-upgrade
        - visualinspection-upgrade
        # Phase 3 apps
        - predict-upgrade
        - monitor-upgrade

{% if wait_for_install == true %}
    # 12. Post-Upgrade pipeline call - test scripts to run before upgrade
    # -------------------------------------------------------------------------
    - name: launchfvt-upgrade-post
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: pipelinerun_name
          value: "$(params.mas_instance_id)-fvt-upgrade-post"
      taskRef:
        kind: Task
        name: mas-launchfvt-upgrade-post
      when:
        - input: $(params.launchfvt_upgrade)
          operator: in
          values: ["true", "True"]
      runAfter:
        - post-upgrade-verify
{% endif %}

{% if wait_for_install == true %}
  # In FVT only this is the time to take a must-gather and finalize the result
  # ---------------------------------------------------------------------------
  finally:
    # Collect must-gather
    # -------------------------------------------------------------------------
    {{ lookup('template', 'taskdefs/common/must-gather.yml.j2') | indent(4) }}

    # Finalize the record in the FVT database
    # -------------------------------------------------------------------------
    - name: finalize
      taskRef:
        kind: Task
        name: mas-fvt-finalize
{% endif %}

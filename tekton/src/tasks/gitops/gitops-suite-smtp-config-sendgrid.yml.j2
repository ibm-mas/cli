---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gitops-suite-smtp-config-sendgrid
spec:
  params:
    - name: cluster_name
      type: string
    - name: account
      type: string
    - name: secrets_path
      type: string
    - name: mas_instance_id
      type: string
    - name: git_branch
      type: string
    - name: github_org
      type: string
    - name: github_repo
      type: string
    - name: github_host
      type: string
    - name: avp_aws_secret_region
      type: string
    - name: mas_smtpcfg_pod_template_yaml
      type: string
      default: ""

    - name: icn
      type: string
    - name: mas_domain
      type: string
    - name: cis_mas_domain
      type: string
    - name: cis_crn
      type: string
  stepTemplate:
    name: gitops-suite-smtp-config
    env:
      - name: CLUSTER_ID
        value: $(params.cluster_name)
      - name: ACCOUNT_ID
        value: $(params.account)
      - name: SECRETS_PATH
        value: $(params.secrets_path)
      - name: MAS_INSTANCE_ID
        value: $(params.mas_instance_id)
      - name: GIT_BRANCH
        value: $(params.git_branch)
      - name: GITHUB_ORG
        value: $(params.github_org)
      - name: GITHUB_HOST
        value: $(params.github_host)
      - name: GITHUB_REPO
        value: $(params.github_repo)
      - name: SM_AWS_REGION
        value: $(params.avp_aws_secret_region)
      - name: MAS_SMTPCFG_POD_TEMPLATE_YAML
        value: $(params.mas_smtpcfg_pod_template_yaml)

      - name: ICN
        value: $(params.icn)
      - name: MAS_DOMAIN
        value: $(params.mas_domain)
      - name: CIS_MAS_DOMAIN
        value: $(params.cis_mas_domain)
      - name: CIS_CRN
        value: $(params.cis_crn)
    envFrom:
      - configMapRef:
          name: environment-properties
          optional: true
      - secretRef:
          name: secure-properties

  steps:
    - args:
      - |-

        # Expected secure-properties (sourced from IBM Cloud SM):
        # -------------------
        # SM_AWS_ACCESS_KEY_ID
        # SM_AWS_SECRET_ACCESS_KEY
        # SENDGRID_API_KEY
        # GITHUB_PAT

        source /mascli/functions/gitops_utils

        export AVP_TYPE="aws"
        sm_login || exit 1

        # Fetch CIS API Key from AWS SM.
        # This is suitable for use with CIS instances used by MAS instances in the cluster we are targetting
        SECRET_NAME_CIS="${ACCOUNT_ID}/${CLUSTER_ID}/cis"
        echo "Getting ${SECRET_NAME_CIS} from AWS SM"
        export CIS_APIKEY="$(sm_get_secret_value "${SECRET_NAME_CIS}" "ibm_apikey")" # pragma: allowlist secret
        if [[ -z "${CIS_APIKEY}" || "${CIS_APIKEY}" == "null" ]]; then
          echo "Required AWS SM secret "${SECRET_NAME_CIS}" not found or invalid"
          exit 1
        fi

        mkdir -p /tmp/init-suite-smtp-config

        git config --global user.name "MAS Automation"
        git config --global user.email "you@example.com"
        git config --global user.password "${GITHUB_PAT}"

        OUTPUT_FILE="/tmp/init-suite-smtp-config/mas-saas-sendgrid-subuser-output.yaml"
        rm "${OUTPUT_FILE}"

        mas-saas-sendgrid-subuser \
          --customer-id "${ICN}" \
          --cis-mas-domain "${CIS_MAS_DOMAIN}" \
          --mas-account-id "${ACCOUNT_ID}" \
          --mas-cluster-id "${CLUSTER_ID}" \
          --mas-instance-id "${MAS_INSTANCE_ID}" \
          --cis-crn "${CIS_CRN}" \
          --output-file "${OUTPUT_FILE}" \
          --action create
        
        rc="$?"

        echo "mas-saas-sendgrid-subuser rc: ${rc}"

        # Pull values out of the outfile and set them as environment vars
        if [[ -f "${OUTPUT_FILE}" ]]; then
          echo "Reading outputs from ${OUTPUT_FILE}"
          export SUBUSER_USERNAME="$(yq '.subuser.username // ""' "${OUTPUT_FILE}")" # pragma: allowlist secret
          export SUBUSER_PASSWORD="$(yq '.subuser.password // ""' "${OUTPUT_FILE}")" # pragma: allowlist secret
          export SENDGRID_APIKEY_USERNAME="apikey" # pragma: allowlist secret
          export SENDGRID_APIKEY_PASSWORD="$(yq '.apikey // ""' "${OUTPUT_FILE}")" # pragma: allowlist secret
        fi

        # If an API key was generated by the script (even if something went wrong in later step)
        # this is our only opportunity to obtain its value so we need to register it in secrets manager now
        # so it'll be present when whatever the issue is resolved and the instance pipeline is rerun
        update_apikey_secret_rc="0"
        if [[ -n "${SENDGRID_APIKEY_PASSWORD}" ]]; then
          SECRET_NAME_SMTP="${ACCOUNT_ID}/${CLUSTER_ID}/${MAS_INSTANCE_ID}/smtp"
          echo "Putting generated API Key in ${SECRET_NAME_SMTP}"

          # NOTE: deliberately not using $SMTP_USERNAME or $SMTP_PASSWORD here, since we don't need/want the gitops-mas-config to repeat this step
          TAGS="[{\"Key\": \"source\", \"Value\": \"gitops_suite_smtp_config_sendgrid\"}, {\"Key\": \"account\", \"Value\": \"${ACCOUNT_ID}\"}, {\"Key\": \"cluster\", \"Value\": \"${CLUSTER_ID}\"}]"
          # NOTE: running function in a subshell so we don't exit this script if something goes wrong (necessary due to the use of "set +o pipefail" in sm_update_secret)
          (sm_update_secret "${SECRET_NAME_SMTP}" "{\"username\": \"$SENDGRID_APIKEY_USERNAME\", \"password\": \"$SENDGRID_APIKEY_PASSWORD\"}" "${TAGS}")

          # defer exiting the script if the sm_update_secret call above failed, so we have an opportunity to register other generated secrets
          update_apikey_secret_rc="$?"
        fi

        # If a new subuser was created by the script (even if something went wrong in a later step)
        # this is our only opportunity to store the password we generated for the subuser
        update_subuser_secret_rc="0"
        if [[ -n "${SUBUSER_PASSWORD}" ]]; then
          SECRET_NAME_SENDGRID="ibm-customer/${ICN}/sendgrid_subuser"
          TAGS="[{\"Key\": \"source\", \"Value\": \"gitops_suite_smtp_config_sendgrid\"}]"
          echo "Putting generated subuser credentials in ${SECRET_NAME_SENDGRID}"
          (sm_update_secret "${SECRET_NAME_SENDGRID}" "{\"username\": \"$SUBUSER_USERNAME\", \"password\": \"$SUBUSER_PASSWORD\"}" "${TAGS}")

          # defer exiting the script if the sm_update_secret call above failed, so we have an opportunity to register other generated secrets
          update_subuser_secret_rc="$?"
        fi

        echo "update_apikey_secret_rc: ${update_apikey_secret_rc}"
        echo "update_subuser_secret_rc: ${update_subuser_secret_rc}"

        if [[ "${update_apikey_secret_rc}" != "0" ]]; then
          # We could add additional automation to deal with the (rare) edge case of the SM update failing.
          # i.e. add a "force_regenerate_api_key" flag that can be set before rerunning the pipeline
          # but I think - given the rarity - just documenting the manual resolution steps below will suffice.
          # another mitigation would be to add retry logic to the sm_update_secret call above
          echo "Failed to write generated API Key to AWS Secrets Manager!"
          echo "The API Key value is now lost and cannot be retrieved, manual intervention is required before rerunning the pipeline:"
          echo "  - Log in to the SendGrid parent account"
          echo "  - Switch to the subuser's account (which will start with ${ICN}, the full value will be in the logs above)"
          echo "  - Locate and delete the API Key for this MAS instance - its name will be in the logs above"
          echo "  - A new API Key for the MAS instance will be generated by this Task in the next pipeline run"
          rc="${update_apikey_secret_rc}"
        fi



        if [[ "${update_subuser_secret_rc}" != "0" ]]; then
          # We could add additional automation to deal with the (rare) edge case of the SM update failing.
          # but I think - given the rarity - just documenting the manual resolution steps below will suffice.
          echo "Failed to write generated subuser username and password to AWS Secrets Manager!"
          echo "The generated password value is now lost and cannot be retrieved, manual intervention is required before rerunning the pipeline:"
          echo "  - Log in to the SendGrid parent account"
          echo "  - Go to Settings -> Subuser management"
          echo "  - Locate and delete the subuser generated by the script above. The username will start with ${ICN}, the full value will be in the logs above."
          echo "  - A new subuser will be created for the customer in the next pipeline run"
          rc="${update_subuser_secret_rc}"
        fi


        if [[ "${rc}" != "0" ]]; then
          echo "mas-saas-sendgrid-subuser failed with rc ${rc}"
          exit ${rc}
        fi

        export SMTP_DISPLAY_NAME="SendGrid"
        export SMTP_HOST="smtp.sendgrid.net"
        export SMTP_PORT="465"
        export SMTP_SECURITY="SSL"
        export SMTP_AUTHENTICATION="true"
        export SMTP_DEFAULT_SENDER_EMAIL="mas.admin@${CIS_MAS_DOMAIN:-${MAS_DOMAIN}}" # use dns.cis.mas_domain if set, otherwise fallback to mas_instance.mas_domain
        export SMTP_DEFAULT_SENDER_NAME="MASAdmin"
        export SMTP_DEFAULT_RECIPIENT_EMAIL="mas.ms.smtp@ibm.com"
        export SMTP_DEFAULT_SHOULD_EMAIL_PASSWORDS="true"

        # Ensure any SMTP_USERNAME/SMTP_PASSWORD values set in pipeline context properties
        # are not used by the gitops-mas-config script to override the values in the AWS SM Secret
        unset SMTP_USERNAME
        unset SMTP_PASSWORD

        mas gitops-mas-config \
        --account-id "$ACCOUNT_ID" \
        --cluster-id "$CLUSTER_ID" \
        --mas-instance-id "$MAS_INSTANCE_ID" \
        --secrets-path "$SECRETS_PATH" \
        --github-push \
        --github-host "$GITHUB_HOST" \
        --github-org "$GITHUB_ORG" \
        --github-repo "$GITHUB_REPO" \
        --git-branch "$GIT_BRANCH" \
        --config-action upsert \
        --mas-config-scope system \
        --mas-config-type smtp \
        --dir /tmp/init-suite-smtp-config \
        --smtp-display-name "${SMTP_DISPLAY_NAME}" \
        --smtp-host "${SMTP_HOST}" \
        --smtp-port "${SMTP_PORT}" \
        --smtp-security "${SMTP_SECURITY}" \
        --smtp-authentication "${SMTP_AUTHENTICATION}" \
        --smtp-default-sender-email "${SMTP_DEFAULT_SENDER_EMAIL}" \
        --smtp-default-sender-name "${SMTP_DEFAULT_SENDER_NAME}" \
        --smtp-default-recipient-email "${SMTP_DEFAULT_RECIPIENT_EMAIL}" \
        --smtp-default-should-email-passwords "${SMTP_DEFAULT_SHOULD_EMAIL_PASSWORDS}" \
        --mas-smtpcfg-pod-template-yaml "${MAS_SMTPCFG_POD_TEMPLATE_YAML}"

        exit $?
        
      command:
        - /bin/sh
        - -c
      name: gitops-suite-smtp-config-sendgrid
      imagePullPolicy: IfNotPresent
      image: docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/mas/saas-task:latest
  workspaces:
    - name: configs





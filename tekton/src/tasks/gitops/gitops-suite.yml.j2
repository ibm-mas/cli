---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gitops-suite
spec:
  params:
    - name: dns_provider
      type: string
      default: ''
    - name: cluster_name
      type: string
    - name: account
      type: string
    - name: secrets_path
      type: string
    - name: mas_instance_id
      type: string
    - name: mongo_provider
      type: string
      default: aws
    - name: user_action
      type: string
      default: add
    - name: git_branch
      type: string
    - name: github_org
      type: string
    - name: github_repo
      type: string
    - name: github_host
      type: string
    - name: sls_channel
      type: string
    - name: mas_channel
      type: string
    - name: mas_annotations
      type: string
      default: ''
    - name: mas_image_tags
      type: string
      default: ''
    - name: mas_labels
      type: string
      default: ''
    - name: mas_domain
      type: string
    - name: avp_aws_secret_region
      type: string
    - name: icr_cp
      type: string
    - name: icr_cp_open
      type: string
    - name: mas_manual_cert_mgmt
      type: string
    - name: cluster_url
      type: string
      default: ""
    - name: argocd_url
      type: string
      default: ""
  stepTemplate:
    name: gitops-suite
    env:
      - name: OCP_SERVER
        value: $(params.cluster_url)
      - name: DNS_PROVIDER
        value: $(params.dns_provider)
      - name: CLUSTER_NAME
        value: $(params.cluster_name)
      - name: ACCOUNT
        value: $(params.account)
      - name: SECRET_PATH
        value: $(params.secrets_path)
      - name: MAS_INSTANCE_ID
        value: $(params.mas_instance_id)
      - name: MONGODB_PROVIDER
        value: $(params.mongo_provider)
      - name: USER_ACTION
        value: $(params.user_action)
      - name: GIT_BRANCH
        value: $(params.git_branch)
      - name: GITHUB_ORG
        value: $(params.github_org)
      - name: GITHUB_HOST
        value: $(params.github_host)
      - name: GITHUB_REPO
        value: $(params.github_repo)
      - name: SM_AWS_REGION
        value: $(params.avp_aws_secret_region)
      - name: MAS_DOMAIN
        value: $(params.mas_domain)
      - name: ICR_CP
        value: $(params.icr_cp)
      - name: ICR_CP_OPEN
        value: $(params.icr_cp_open)
      - name: MAS_CHANNEL
        value: $(params.mas_channel)
      - name: MAS_ANNOTATIONS
        value: $(params.mas_annotations)
      - name: MAS_IMAGE_TAGS
        value: $(params.mas_image_tags)
      - name: MAS_LABELS
        value: $(params.mas_labels)
      - name: SLS_CHANNEL
        value: $(params.sls_channel)
      - name: MAS_MANUAL_CERT_MGMT
        value: $(params.mas_manual_cert_mgmt)
      - name: ARGOCD_URL
        value: $(params.argocd_url)
    envFrom:
      - configMapRef:
          name: environment-properties
          optional: true
      - secretRef:
          name: secure-properties
  steps:
    - args:
      - |-

        git config --global user.name "MAS Automation"
        git config --global user.email "you@example.com"
        git config --global user.password $GITHUB_PAT

        ROSA_CONFIG=/workspace/configs/tmp-rosa/rosa-$(params.cluster_name)-details.yaml
        if [ -f $ROSA_CONFIG ]; then
          echo "oc login : via ROSA_CONFIG"
          export OCP_SERVER=$(cat $ROSA_CONFIG | yq -r '.data.api_url')
          export OCP_USERNAME=$(cat $ROSA_CONFIG | yq -r '.data.username')
          export ROSA_CLUSTER_ADMIN_PASSWORD=$(cat $ROSA_CONFIG | yq -r '.data.admin_password')
          oc login -u $OCP_USERNAME -p $ROSA_CLUSTER_ADMIN_PASSWORD $OCP_SERVER --insecure-skip-tls-verify
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed, exiting with error.."
            exit 1
          fi
        elif [ -n $OCP_SERVER ]; then
          echo "oc login : OCP_USERNAME=$OCP_USERNAME OCP_SERVER=$OCP_SERVER OCP_PASSWORD=${OCP_PASSWORD:0:4}<snip> ..."
          oc login -u $OCP_USERNAME -p $OCP_PASSWORD $OCP_SERVER --insecure-skip-tls-verify
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed"
            exit 1
          fi
        else
          echo "oc login : via ocp_login"
          aws configure set aws_access_key_id $SM_AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $SM_AWS_SECRET_ACCESS_KEY
          aws configure set default.region $SM_AWS_REGION
          export CLUSTER_TYPE=rosa
          ROLE_NAME=ocp_login ansible-playbook ibm.mas_devops.run_role 
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed"
            exit 1
          fi
        fi

        echo "Set k8s context"
        export K8S_AUTH_CONTEXT=$(oc whoami -c)

        if [ -z $ARGOCD_URL ] || [ -z $ARGOCD_USERNAME ] || [ -z $ARGOCD_PASSWORD ]; then
          export ARGOCD_URL=$(oc get route  openshift-gitops-server -n openshift-gitops -ojsonpath='{.spec.host}' --context $K8S_AUTH_CONTEXT)
          export ARGOCD_USERNAME=admin
          export ARGOCD_PASSWORD=$(oc get secret openshift-gitops-cluster -n openshift-gitops -ojsonpath='{.data.admin\.password}' --context $K8S_AUTH_CONTEXT | base64 -d ; echo)
        fi

        if [ -z $MAS_DOMAIN ];then
          echo "No MAS_DOMAIN set, use domain of ROSA cluster and MAS_INSTANCE_ID"
          CUSTOM_DOMAIN=apps.$CLUSTER_NAME.$(echo -n $OCP_SERVER | sed -n -e "s/^.*api.$CLUSTER_NAME.//p" | cut -d: -f1)
          export MAS_DOMAIN=$MAS_INSTANCE_ID.$CUSTOM_DOMAIN
          echo "MAS_DOMAIN set to $MAS_DOMAIN"
        fi

        echo "Image Tags ............................ ${MAS_IMAGE_TAGS}"
        echo "Annotations ........................... ${MAS_ANNOTATIONS}"
        echo "Labels ................................ ${MAS_LABELS}"

        # Parse MAS variables from json to dict        

        MAS_ANNOTATIONS=$(echo "${MAS_ANNOTATIONS}" | sed "s/'/\"/g")
        export MAS_ANNOTATIONS=$(echo "${MAS_ANNOTATIONS}" | yq --yaml-output)
        echo " MAS_ANNOTATIONS = ${MAS_ANNOTATIONS}"

        MAS_IMAGE_TAGS=$(echo "${MAS_IMAGE_TAGS}" | sed "s/'/\"/g")
        export MAS_IMAGE_TAGS=$(echo "${MAS_IMAGE_TAGS}" | yq --yaml-output)
        echo " MAS_IMAGE_TAGS = ${MAS_IMAGE_TAGS}"

        MAS_LABELS=$(echo "${MAS_LABELS}" | sed "s/'/\"/g")
        export MAS_LABELS=$(echo "${MAS_LABELS}" | yq --yaml-output)
        echo " MAS_LABELS = ${MAS_LABELS}"

        sed -n -e 's/^.*api.fvtsaas.//p' | cut -d: -f1
        mkdir -p /tmp/init-suite
        mas gitops-suite -a $ACCOUNT -c $CLUSTER_NAME -m $MAS_INSTANCE_ID \
        --secrets-path $SECRET_PATH \
        --dir /tmp/init-suite \
        --github-push \
        --github-host $GITHUB_HOST \
        --github-org  $GITHUB_ORG \
        --github-repo $GITHUB_REPO \
        --git-branch $GIT_BRANCH

        exit $?
      command:
        - /bin/sh
        - -c
      name: gitops-suite
      imagePullPolicy: IfNotPresent
      image: quay.io/ibmmas/cli:7.10.0-pre.mascore1425
  workspaces:
    - name: configs



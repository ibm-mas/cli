

  # Auto-detect Db2
  # ---------------------------------------------------------------------------
  if [ -z "$DB2_NAMESPACE" ]; then
    DB2_NAMESPACE=`oc get db2ucluster.db2u.databases.ibm.com -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  oc get Operator db2u-operator.ibm-common-services > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    prompt_for_input "Db2u Universal Operator detected. Db2u namespace to update?" DB2_NAMESPACE "db2u"
    echo
  fi

  # Detect Kafka in cluster and set namespace
  # Auto-detect Kafka
  # ---------------------------------------------------------------------------
  if [ -z "$KAFKA_NAMESPACE" ]; then
    KAFKA_NAMESPACE=`oc get Kafka.kafka.strimzi.io -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  if [ -z "$KAFKA_PROVIDER" ] && [ -n "$KAFKA_NAMESPACE" ]; then
    KAFKA_OPERATOR=`oc get subscription -n $KAFKA_NAMESPACE -o jsonpath='{.items[0].spec.name}' 2> /dev/null`
    if [ "$?" == "0" ]; then
      if [ "$KAFKA_OPERATOR" == "amq-streams" ]; then
        KAFKA_PROVIDER="redhat"
        KAFKA_PROVIDER_NAME="AMQ Streams"
      elif [ "$KAFKA_OPERATOR" == "strimzi-kafka-operator" ]; then
        KAFKA_PROVIDER="strimzi"
        KAFKA_PROVIDER_NAME="Strimzi"
      fi
    fi
  fi
}

# Main function
# -----------------------------------------------------------------------------
function update() {
  # Take the first parameter off (it will be "update")
  shift
  if [[ $# -gt 0 ]]; then
    update_noninteractive "$@"
  else
    update_interactive
  fi

  export MAS_CATALOG_VERSION
  export DB2_NAMESPACE
  export MONGODB_NAMESPACE
  export MONGODB_V5_UPGRADE
  export MONGODB_V6_UPGRADE
  export MONGODB_REPLICAS
  export MONGODB_VERSION
  export KAFKA_NAMESPACE
  export KAFKA_PROVIDER
  export CERT_MANAGER_PROVIDER
  export CERT_MANAGER_ACTION
  export DRO_MIGRATION
  export GRAFANA_V5_UPGRADE
  export CP4D_UPDATE
  export CP4D_VERSION
  export CP4D_UPDATE_WS
  export CP4D_CURRENT_VERSION_WS
  export CP4D_TARGET_VERSION_WS
  export CP4D_UPDATE_WML
  export CP4D_CURRENT_VERSION_WML
  export CP4D_TARGET_VERSION_WML
  export CP4D_UPDATE_SPARK
  export CP4D_CURRENT_VERSION_SPARK
  export CP4D_TARGET_VERSION_SPARK
  export CP4D_UPDATE_WOS
  export CP4D_CURRENT_VERSION_WOS
  export CP4D_TARGET_VERSION_WOS
  export CP4D_UPDATE_SPSS
  export CP4D_CURRENT_VERSION_SPSS
  export CP4D_TARGET_VERSION_SPSS
  export CP4D_UPDATE_COGNOS
  export CP4D_CURRENT_VERSION_COGNOS
  export CP4D_TARGET_VERSION_COGNOS
  export STORAGE_CLASS_RWO
  export STORAGE_CLASS_RWX
  export SKIP_ENTITLEMENT_KEY_FLAG
  export DRO_STORAGE_CLASS
  export UDS_ACTION
  export DRO_NAMESPACE

  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h4 "IBM Operator Catalog" "    "
  echo_reset_dim "Current Catalog Version .................... ${COLOR_MAGENTA}${catalogId:-unknown}"
  echo_reset_dim "Updated Catalog Version .................... ${COLOR_MAGENTA}${MAS_CATALOG_VERSION}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Update Content" "    "
  echo_reset_dim "IBM Maximo Application Suite ............... ${COLOR_GREEN}All MAS instances"
  echo_reset_dim "IBM Cloud Pak Foundational Services ........ ${COLOR_GREEN}ibm-common-services"

  # IBM Db2
  if [ "$DB2_NAMESPACE" != "" ]; then
    echo_reset_dim "IBM Db2 Universal Operator ................. ${COLOR_GREEN}$DB2_NAMESPACE"
  else
    echo_reset_dim "IBM Db2 Universal Operator ................. ${COLOR_RED}Not found in target cluster"
  fi

  # Detect OCS/ODF Storage Cluster in cluster and set action
  oc get StorageCluster -A > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    echo_reset_dim "OpenShift Data Foundation  ................. ${COLOR_GREEN}Yes"
  else
    echo_reset_dim "OpenShift Data Foundation  ................. ${COLOR_RED}Not found in target cluster"
  fi

  # MongoDB Community Edition
  if [ "$MONGODB_NAMESPACE" != "" ]; then
    echo_reset_dim "MongoDb Community Edition .................. ${COLOR_GREEN}$MONGODB_NAMESPACE (${MONGODB_CURRENT_VERSION} to ${MONGODB_TARGET_VERSION})"
  else
    echo_reset_dim "MongoDb Community Edition .................. ${COLOR_RED}Not found in target cluster"
  fi

  # Kafka (Strimzi/AMQ Streams)
  if [ "$KAFKA_NAMESPACE" != "" ]; then
    echo_reset_dim "Kafka ...................................... ${COLOR_GREEN}${KAFKA_PROVIDER_NAME} ($KAFKA_NAMESPACE)"
  else
    echo_reset_dim "Kafka ...................................... ${COLOR_RED}Not found in target cluster"
  fi

  # Cloud Pak for Data
  # only print CP4D info if it's installed in first place
  if [ "$CP4D_CURRENT_VERSION" != "" ]; then
    if [ "$CP4D_UPDATE" == true ]; then
      echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION} to ${CP4D_VERSION} ($CP4D_INSTANCE_NAMESPACE)${TEXT_RESET}"

      if [[ "$STORAGE_CLASS_RWO" != "" && "$STORAGE_CLASS_RWX" != "" ]]; then
      echo_reset_dim " - File Storage Class ...................... ${COLOR_GREEN}${STORAGE_CLASS_RWX}${TEXT_RESET}"
      echo_reset_dim " - Block Storage Class ..................... ${COLOR_GREEN}${STORAGE_CLASS_RWO}${TEXT_RESET}"
      fi

      if [ "$CP4D_VERSION" != "" ]; then
        echo_reset_dim " - Version ................................. ${COLOR_GREEN}${CP4D_VERSION}${TEXT_RESET}"
      fi
    else
      echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_RED}No${TEXT_RESET}"
    fi

    # Cloud Pak for Data Services
    if [ "$CP4D_CURRENT_VERSION_WS" != "" ]; then
      if [ "$CP4D_UPDATE_WS" == true ]; then
        echo_reset_dim " - Watson Studio ........................... ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WS} to ${CP4D_TARGET_VERSION_WS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Studio ........................... ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_WML" != "" ]; then
      if [ "$CP4D_UPDATE_WML" == true ]; then
        echo_reset_dim " - Watson Machine Learning ................. ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WML} to ${CP4D_TARGET_VERSION_WML:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Machine Learning ................. ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_SPARK" != "" ]; then
      if [ "$CP4D_UPDATE_SPARK" == true ]; then
        echo_reset_dim " - Analytics Engine ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_SPARK} to ${CP4D_TARGET_VERSION_SPARK:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Analytics Engine ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_WOS" != "" ]; then
      if [ "$CP4D_UPDATE_WOS" == true ]; then
        echo_reset_dim " - Watson Openscale ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WOS} to ${CP4D_TARGET_VERSION_WOS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Openscale ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_SPSS" != "" ]; then
      if [ "$CP4D_UPDATE_SPSS" == true ]; then
        echo_reset_dim " - SPSS Modeler ............................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_SPSS} to ${CP4D_TARGET_VERSION_SPSS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - SPSS Modeler ............................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_COGNOS" != "" ]; then
      if [ "$CP4D_UPDATE_COGNOS" == true ]; then
        echo_reset_dim " - Cognos Analytics ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_COGNOS} to ${CP4D_TARGET_VERSION_COGNOS:-<Default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Cognos Analytics ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

  else
    echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_RED}Not found in target cluster"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Migrations" "    "

  # IBM to Red Hat Certificate Manager Migration
  if [ "$CERT_MANAGER_PROVIDER" == "redhat" ]
  then echo_reset_dim "IBM to Red Hat Certificate Manager ......... ${COLOR_GREEN}Yes"
  else echo_reset_dim "IBM to Red Hat Certificate Manager ......... ${COLOR_RED}Not Required"
  fi

  # UDS to DRO Migration
  if [ "$DRO_MIGRATION" = "true" ]; then
    echo_reset_dim "UDS to DRO ................................. ${COLOR_GREEN}Yes"
    echo_reset_dim " - DRO Storage Class ....................... ${COLOR_GREEN}${DRO_STORAGE_CLASS}"
    echo_reset_dim " - DRO Namespace ........................... ${COLOR_GREEN}${DRO_NAMESPACE}"
  else
    echo_reset_dim "UDS to DRO ................................. ${COLOR_RED}Not Required"
  fi

  # Grafana Operator
  if [ "$GRAFANA_V5_UPGRADE" == true ]
  then echo_reset_dim "Grafana v4 to v5 ........................... ${COLOR_GREEN}Yes"
  else echo_reset_dim "Grafana v4 to v5 ........................... ${COLOR_RED}Not Required"
  fi

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi

  echo
  echo_h2 "Launch Update"

  # Create namespace, install MAS Tekton definitions, configure RBAC
  pipelines_install_tasks_shared_namespace || exit 1

  # Replace ALL environment variables in templates
  eval "echo \"$(cat $CLI_DIR/templates/pipelinerun-update.yaml)\"" > $CONFIG_DIR/pipelinerun-update.yaml

  # Start pipeline execution
  oc -n mas-pipelines create -f $CONFIG_DIR/pipelinerun-update.yaml &>> $LOGFILE || exit 1
  echo -e "${COLOR_GREEN}Update started successfully${TEXT_RESET}"
  echo -e "\nView progress:\n  ${COLOR_CYAN}${TEXT_UNDERLINE}https://${OCP_CONSOLE_ROUTE}/pipelines/ns/mas-pipelines${TEXT_RESET}${TEXT_RESET}"
  echo

}

#!/bin/bash

function provision_fyre_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas provision-fyre [options]

Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

FYRE Credentials (Required):
  -u, --username ${COLOR_YELLOW}FYRE_USERNAME${TEXT_RESET}            FYRE username
  -a, --apikey ${COLOR_YELLOW}FYRE_APIKEY${TEXT_RESET}                FYRE API key

Cluster Configuration (Required):
  -p, --product-id ${COLOR_YELLOW}FYRE_PRODUCT_ID${TEXT_RESET}        FYRE product group ID that will own the cluster
  -q, --quota-type ${COLOR_YELLOW}FYRE_QUOTA_TYPE${TEXT_RESET}        Declare the quota to use when provisioning the cluster ("quick_burn" or "product_group")
  -c, --cluster-name ${COLOR_YELLOW}CLUSTER_NAME${TEXT_RESET}         Name of the cluster to be provisioned (lowercase only)
  -v, --ocp-version ${COLOR_YELLOW}OCP_VERSION${TEXT_RESET}           OCP version to use (e.g 4.13, 4.14)
  -d, --description ${COLOR_YELLOW}FYRE_DESCRIPTION${TEXT_RESET}      Description of the OCP cluster
  -l, --location ${COLOR_YELLOW}FYRE_SITE${TEXT_RESET}                FYRE site where cluster will be provisioned (default is svl)

Worker Node Configuration (Optional, only takes effect when quota-type is set to "product_group"):
      --worker-count ${COLOR_YELLOW}FYRE_WORKER_COUNT${TEXT_RESET}    Number of worker nodes to provision
      --worker-cpu ${COLOR_YELLOW}FYRE_WORKER_CPU${TEXT_RESET}        How many CPUs to allocate per worker node
      --worker-memory ${COLOR_YELLOW}FYRE_WORKER_MEMORY${TEXT_RESET}  How much memory to allocate per worker node

Other Commands:
      --no-storage                        Disable automatic configuration of storage in the cluster
      --no-confirm                        Provision the cluster without prompting for confirmation
  -h, --help                              Show this help message

EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function provision_fyre_noninteractive() {
  # Default to provisioning with storage enabled
  FYRE_CONFIG_STORAGE=true

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      -u|--username)
        FYRE_USERNAME=$1 && shift
        ;;
      -a|--apikey)
        FYRE_APIKEY=$1 && shift
        ;;
      -p|--product-id)
        FYRE_PRODUCT_ID=$1 && shift
        ;;
      -q|--quota-type)
        FYRE_QUOTA_TYPE=$1 && shift
        ;;
      -c|--cluster-name)
        CLUSTER_NAME=$1 && shift
        ;;
      -v|--ocp-version)
        OCP_VERSION=$1 && shift
        ;;
      -d|--description)
        FYRE_CLUSTER_DESCRIPTION=$1 && shift
        ;;
      -l|--location)
        FYRE_SITE=$1 && shift
        ;;
      --worker-count)
        FYRE_WORKER_COUNT=$1 && shift
        ;;
      --worker-cpu)
        FYRE_WORKER_CPU=$1 && shift
        ;;
      --worker-memory)
        FYRE_WORKER_MEMORY=$1 && shift
        ;;
      --no-storage)
        FYRE_CONFIG_STORAGE=false
        ;;
      --no-confirm)
        NO_CONFIRM=true
        ;;
      -h|--help)
        provision_fyre_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${TEXT_RESET}\n"
        provision_fyre_help
        exit 1
        ;;
      esac
  done

  # Check all args have been set
  [[ -z "$FYRE_USERNAME" ]] && provision_fyre_help "FYRE_USERNAME is not set"
  [[ -z "$FYRE_APIKEY" ]] && provision_fyre_help "FYRE_APIKEY is not set"
  [[ -z "$CLUSTER_NAME" ]] && provision_fyre_help "CLUSTER_NAME is not set"
  [[ -z "$OCP_VERSION" ]] && provision_fyre_help "OCP_VERSION is not set"
  [[ -z "$FYRE_CLUSTER_DESCRIPTION" ]] && provision_fyre_help "FYRE_CLUSTER_DESCRIPTION is not set"
  [[ -z "$FYRE_PRODUCT_ID" ]] && provision_fyre_help "FYRE_PRODUCT_ID is not set"
  [[ -z "$FYRE_QUOTA_TYPE" ]] && provision_fyre_help "FYRE_QUOTA_TYPE is not set"

  if [[ -z "$FYRE_SITE" ]]; then
    FYRE_SITE=svl
  fi

  [[ "$FYRE_SITE" != "svl" && "$FYRE_QUOTA_TYPE" == "quick_burn" ]] && provision_fyre_help "Quickburn is only available in svl"
}

function provision_fyre_interactive() {
  if [[ "$FYRE_USERNAME" != "" && "$FYRE_APIKEY" != "" ]]; then
    prompt_for_confirm_default_yes "Re-use saved authentication details for user '$FYRE_USERNAME'?" REUSE_FYRE_AUTH
    if [[ "$REUSE_FYRE_AUTH" == "false" ]]; then
      prompt_for_input "Fyre Username" FYRE_USERNAME
      prompt_for_input "Fyre API Key" FYRE_APIKEY
    fi
  else
    prompt_for_input "Fyre Username" FYRE_USERNAME
    prompt_for_input "Fyre API Key" FYRE_APIKEY
  fi

  if [[ ! -z "$1" ]]; then
    CLUSTER_NAME=$1
  fi
  prompt_for_input "Cluster Name" CLUSTER_NAME

  echo
  echo "OCP Version:"
  echo "  1. 4.12 (MAS 8.9-8.10)"
  echo "  2. 4.14 (MAS 8.10-8.11)"
  prompt_for_input "Select Version" OCP_VERSION_SELECTION "1"

  case $OCP_VERSION_SELECTION in
    1|4.12)
      export OCP_VERSION=4.12
      ;;
    2|4.14)
      export OCP_VERSION=4.14.12
      ;;
    *)
      # Print out a warning as there could be a typo
      echo_warning "    Using custom OCP version ($OCP_VERSION_SELECTION)"
      export OCP_VERSION=$OCP_VERSION_SELECTION
      ;;
  esac

  prompt_for_input "Cluster Description" FYRE_CLUSTER_DESCRIPTION
  prompt_for_input "FYRE Product ID" FYRE_PRODUCT_ID
  prompt_for_input "FYRE Site" FYRE_SITE

  prompt_for_confirm "Use Product Group Quota?" USE_PRODUCT_GROUP_QUOTA
  if [[ "$USE_PRODUCT_GROUP_QUOTA" == "true" ]]; then
    FYRE_QUOTA_TYPE="product_group"
    prompt_for_number "Number of Worker Nodes (min 3)" FYRE_WORKER_COUNT
    prompt_for_number "Worker Node CPU (max 16)" FYRE_WORKER_CPU
    prompt_for_number "Worker Node Memory (max 64)" FYRE_WORKER_MEMORY
  else
    FYRE_QUOTA_TYPE="quick_burn"
    if [[ "$FYRE_SITE" != "svl" ]]; then 
      echo -e "${COLOR_RED}Usage Error: QuickBurn is only supported in svl${TEXT_RESET}\n"
      exit 1
    fi
  fi

  prompt_for_input "Configure Storage (ODF)" FYRE_CONFIG_STORAGE

}


function provision_fyre() {
  # Take the first parameter off (it will be provision-fyre)
  shift
  if [[ $# -gt 0 ]]; then
    provision_fyre_noninteractive "$@"
  else
    provision_fyre_interactive
  fi

  # Fyre will provision a cluster with lowercase name so force to lowercase now
  old=$CLUSTER_NAME
  declare -l new=$CLUSTER_NAME
  if [[ $old != $new ]] ; then
    echo
    echo_warning "Cluster name converted to lowercase"
    CLUSTER_NAME=$new
  fi

  # Ensure all environment variables are available to ansible-playbook
  export FYRE_USERNAME
  export FYRE_APIKEY
  export FYRE_PRODUCT_ID
  export FYRE_QUOTA_TYPE

  export CLUSTER_TYPE=fyre
  export CLUSTER_NAME
  export OCP_VERSION
  export FYRE_CLUSTER_DESCRIPTION
  export FYRE_SITE
  export FYRE_WORKER_COUNT
  export FYRE_WORKER_CPU
  export FYRE_WORKER_MEMORY

  export FYRE_CONFIG_STORAGE

  echo
  reset_colors
  echo_h2 "Review Settings"
  echo "${TEXT_DIM}"
  echo_h2 "FYRE Authentication" "    "
  echo_reset_dim "Username .................. ${COLOR_MAGENTA}${FYRE_USERNAME}"
  echo_reset_dim "API Key ................... ${COLOR_MAGENTA}${FYRE_APIKEY:0:8}<snip>"
  reset_colors
  echo "${TEXT_DIM}"
  echo_h2 "FYRE Accounting" "    "
  echo_reset_dim "Product Group ID .......... ${COLOR_MAGENTA}${FYRE_PRODUCT_ID}"
  echo_reset_dim "Quota Type ................ ${COLOR_MAGENTA}${FYRE_QUOTA_TYPE}"
  echo_reset_dim "Site ...................... ${COLOR_MAGENTA}${FYRE_SITE}"
  reset_colors
  echo "${TEXT_DIM}"
  echo_h2 "Cluster Configuration" "    "
  echo_reset_dim "Name ...................... ${COLOR_MAGENTA}${CLUSTER_NAME}"
  echo_reset_dim "Description ............... ${COLOR_MAGENTA}${FYRE_CLUSTER_DESCRIPTION}"
  echo_reset_dim "OCP Version ............... ${COLOR_MAGENTA}${OCP_VERSION}"

  if [[ "${FYRE_QUOTA_TYPE}" == "product_group" ]]; then
    reset_colors
    echo "${TEXT_DIM}"
    echo_h2 "Worker Configuration" "    "
    echo_reset_dim "Worker Node Count ......... ${COLOR_MAGENTA}${FYRE_WORKER_COUNT:-Default}"
    echo_reset_dim "Worker Node CPU ........... ${COLOR_MAGENTA}${FYRE_WORKER_CPU:-Default}"
    echo_reset_dim "Worker Node Memory ........ ${COLOR_MAGENTA}${FYRE_WORKER_MEMORY:-Default}"
  fi

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi

  ansible-playbook ibm.mas_devops.ocp_fyre_provision || exit 1

  echo ""
  echo "IBM DevIT Fyre OCP cluster is ready to use"
  OCP_CONSOLE_ROUTE=$(oc -n openshift-console get route console -o=jsonpath='{.spec.host}')
  echo "Connected to OCP cluster: https://$OCP_CONSOLE_ROUTE"
}

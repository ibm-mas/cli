#!/bin/bash

. $CLI_DIR/functions/internal/install_config_additional_configs
. $CLI_DIR/functions/internal/install_config_applications
. $CLI_DIR/functions/internal/install_config_db2
. $CLI_DIR/functions/internal/install_config_kafka
. $CLI_DIR/functions/internal/install_config_dns
. $CLI_DIR/functions/internal/install_config_sno
. $CLI_DIR/functions/internal/install_config_storage_classes
. $CLI_DIR/functions/internal/install_config_storage_classes_sno
. $CLI_DIR/functions/internal/install_config_turbonomic
. $CLI_DIR/functions/internal/install_config_manage_storage_classes
. $CLI_DIR/functions/internal/install_config_iot_storage_classes
. $CLI_DIR/functions/internal/install_config_advanced
. $CLI_DIR/functions/internal/install_config_workload_scale

. $CLI_DIR/functions/internal/install_pipelinerun_prepare
. $CLI_DIR/functions/internal/install_pipelinerun_preview
. $CLI_DIR/functions/internal/install_pipelinerun_create

. $CLI_DIR/functions/help/install_help


# Check for existing catalog
# - If existing MAS catalog is installed, then user must install from that one
# - If existing MAS catalog is too old, direct user to run mas update command to bring the cluster up to date
# Otherwise, allow the user to choose the catalog source to install into the cluster
function validate_catalog_source {
  catalogDisplayName=$(oc -n openshift-marketplace get catalogsource ibm-operator-catalog -o yaml --ignore-not-found=true | yq -r ".spec.displayName")
  catalogImage=$(oc -n openshift-marketplace get catalogsource ibm-operator-catalog -o yaml --ignore-not-found=true | yq -r ".spec.image")

  if [[ "$catalogDisplayName" =~ .+(v8-[0-9]+-amd64) ]]; then
    # catalogId = v8-yymmdd-amd64
    # catalogVersion = yymmdd
    catalogId=$(sed -E "s/.+\\((v8-[0-9]+-amd64)\\)/\1/" <<< $catalogDisplayName)
    catalogVersion=$(sed -E "s/.+\\(v8-([0-9]+)-amd64\\)/\1/" <<< $catalogDisplayName)
  elif [[ "$catalogDisplayName" =~ .+(v8-amd64) ]]; then
    catalogId=v8-amd64
    catalogVersion=v8-amd64
  fi

  if [[ "$catalogImage" != "null" && "$catalogImage" != "" && "$catalogId" != "$MAS_CATALOG_VERSION" ]]; then
    echo
    echo_warning "Error: IBM Maximo Operator Catalog $catalogVersion is already installed on this cluster."
    echo_warning "If you wish to install a new MAS instance using the $MAS_CATALOG_VERSION catalog please first run \"mas update\" to switch to this catalog, this will ensure the appropriate actions are performed as part of the catalog update."
    echo
    exit 1
  fi
}


function install_noninteractive() {
  NON_INTERACTIVE=true
  DEV_MODE=false
  LICENSE_ACCEPTED=false

  # Defaults
  DB2_ACTION_SYSTEM=none
  DB2_ACTION_MANAGE=none
  KAFKA_ACTION_SYSTEM=none

  LOCAL_MAS_CONFIG_DIR=""
  LOCAL_MAS_CONFIG_DIR_ALREADY_CHOSEN=yes
  use_additional_configs=no

  WAIT_FOR_PVCS=true
  STORAGE_CLASS_PROVIDER=custom
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # Catalog
      -c|--mas-catalog-version)
        export MAS_CATALOG_VERSION=$1 && shift
        ;;

      # Storage
      --storage-rwo)
        export STORAGE_CLASS_RWO=$1 && shift
        ;;
      --storage-rwx)
        export STORAGE_CLASS_RWX=$1 && shift
        ;;
      --storage-pipeline)
        export PIPELINE_STORAGE_CLASS=$1 && shift
        ;;
      --storage-accessmode)
        export PIPELINE_STORAGE_ACCESSMODE=$1 && shift
        ;;

      # MAS Instance
      -i|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -w|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      -W|--mas-workspace-name)
        export MAS_WORKSPACE_NAME=$1 && shift
        ;;

      # Advanced Configuration
      --additional-configs)
        LOCAL_MAS_CONFIG_DIR_ALREADY_CHOSEN=yes
        use_additional_configs=yes
        export LOCAL_MAS_CONFIG_DIR=$1 && shift
        ;;
      --non-prod)
        export USE_NON_PROD_MODE=true
        export MAS_ANNOTATIONS="mas.ibm.com/operationalMode=nonproduction"
        ;;
      --ocp-ingress-tls-secret-name)
        export OCP_INGRESS_TLS_SECRET_NAME=$1 && shift
        ;;
      --mas-trust-default-cas)
        export MAS_TRUST_DEFAULT_CAS=$1 && shift
        ;;
      --workload-scale-profile)
        MAS_WORKLOAD_SCALE_PROFILE=$1 && shift
        case $MAS_WORKLOAD_SCALE_PROFILE in
          Guaranteed|BestEffort)
            set_mas_workload_scale_envs
            ;;
          Burstable)
            clear_mas_workload_scale_envs
            ;;
          *)
            echo_warning "Invalid workload scale profile. Must be one of [Burstable, BestEffort, Guaranteed]"
            exit 1
            ;;
        esac
        ;;
      --mas-pod-templates-dir)
        MAS_POD_TEMPLATES_DIR=$1 && shift
        check_mas_pod_templates_dir
        ;;

      # Core
      --mas-channel)
        export MAS_CHANNEL=$1 && shift
        ;;

      # Applications
      --assist-channel)
        export DEPLOY_CP4D=run
        export MAS_APP_CHANNEL_ASSIST=$1 && shift
        ;;
      --iot-channel)
        export MAS_APP_CHANNEL_IOT=$1 && shift
        ;;
      --monitor-channel)
        export MAS_APP_CHANNEL_MONITOR=$1 && shift
        ;;
      --manage-channel)
        export MAS_APP_CHANNEL_MANAGE=$1 && shift
        ;;
      --predict-channel)
        export DEPLOY_CP4D=run
        export MAS_APP_CHANNEL_PREDICT=$1 && shift
        ;;
      --visualinspection-channel)
        export MAS_APP_CHANNEL_VISUALINSPECTION=$1 && shift
        ;;
      --optimizer-channel)
        export MAS_APP_CHANNEL_OPTIMIZER=$1 && shift
        ;;
      --optimizer-plan)
        export MAS_APP_PLAN_OPTIMIZER=$1 && shift
        ;;

      # Dependencies - CP4D
      --cp4d-version)
        export CP4D_VERSION=$1 && shift
        ;;
      --cp4d-install-spss)
        export CPD_INSTALL_SPSS=true
        ;;
      --cp4d-install-openscale)
        export CPD_INSTALL_OPENSCALE=true
        ;;
      --cp4d-install-cognos)
        if [[ "$MAS_APP_CHANNEL_MANAGE" != "" ]]; then
          export CPD_INSTALL_COGNOS=true
          export DEPLOY_CP4D=run
        fi
        ;;

      # Dependencies - Db2
      --db2u-namespace)
        export DB2_NAMESPACE=$1 && shift
        ;;
      --db2u-channel)
        export DB2_CHANNEL=$1 && shift
        ;;
      --db2u-system)
        export DB2_ACTION_SYSTEM=install
        ;;
      --db2u-manage)
        export DB2_ACTION_MANAGE=install
        ;;
      --db2u-manage-type)
        if [[ "$DB2_ACTION_MANAGE" == "install" ]]; then
          export DB2_TYPE=$1 && shift
        fi
        ;;

      # Dependencies - Db2 Advanced Options
      --db2u-affinity-key)
        export DB2_SET_AFFINITY=true
        export DB2_AFFINITY_KEY=$1 && shift
        ;;
      --db2u-affinity-value)
        export DB2_AFFINITY_VALUE=$1 && shift
        ;;
      --db2u-tolerate-key)
        export DB2_SET_TOLERATIONS=false
        export DB2_TOLERATE_KEY=$1 && shift
        ;;
      --db2u-tolerate-value)
        export DB2_TOLERATE_VALUE=$1 && shift
        ;;
      --db2u-tolerate-effect)
        export DB2_TOLERATE_EFFECT=$1 && shift
        ;;
      --db2u-cpu-request)
        export DB2_CPU_REQUESTS=$1 && shift
        ;;
      --db2u-cpu-limit)
        export DB2_CPU_LIMITS=$1 && shift
        ;;
      --db2u-memory-request)
        export DB2_MEMORY_REQUESTS=$1 && shift
        ;;
      --db2u-memory-limit)
        export DB2_MEMORY_LIMITS=$1 && shift
        ;;

      --db2u-backup-storage)
        export DB2_BACKUP_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-data-storage)
        export DB2_DATA_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-logs-storage)
        export DB2_LOGS_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-meta-storage)
        export DB2_META_STORAGE_SIZE=$1 && shift
        ;;
      --db2u-temp-storage)
        export DB2_TEMP_STORAGE_SIZE=$1 && shift
        ;;

      # Dependencies - Kafka common arguments
      --kafka-provider)
        export KAFKA_ACTION_SYSTEM=install
        export KAFKA_PROVIDER=$1 && shift
        ;;
      --kafka-username)
        export AWS_KAFKA_USER_NAME=$1
        export KAFKA_USER_NAME=$1 && shift
        ;;
      --kafka-password)
        export AWS_KAFKA_USER_PASSWORD=$1
        export KAFKA_USER_PASSWORD=$1 && shift
        ;;

      # Dependencies - Kafka (AMQ & Strimzi)
      --kafka-namespace)
        export KAFKA_NAMESPACE=$1 && shift
        ;;
      --kafka-version)
        export KAFKA_VERSION=$1 && shift
        ;;

      # Dependencies - Kafka (AWS MSK)
      --msk-instance-type)
        export AWS_MSK_INSTANCE_TYPE=$1 && shift
        ;;
      --msk-instance-nodes)
        export AWS_MSK_INSTANCE_NUMBER=$1 && shift
        ;;
      --msk-instance-volume-size)
        export AWS_MSK_VOLUME_SIZE=$1 && shift
        ;;
      --msk-cidr-az1)
        export AWS_MSK_CIDR_AZ1=$1 && shift
        ;;
      --msk-cidr-az2)
        export AWS_MSK_CIDR_AZ2=$1 && shift
        ;;
      --msk-cidr-az3)
        export AWS_MSK_CIDR_AZ3=$1 && shift
        ;;
      --msk-cidr-ingress)
        export AWS_MSK_INGRESS_CIDR=$1 && shift
        ;;
      --msk-cidr-egress)
        export AWS_MSK_EGRESS_CIDR=$1 && shift
        ;;

      # Dependencies - Kafka (IBM Cloud Event Streams)
      --eventstreams-resource-group)
        export EVENTSTREAMS_RESOURCEGROUP=$1 && shift
        ;;
      --eventstreams-instance-name)
        export EVENTSTREAMS_NAME=$1 && shift
        ;;
      --eventstreams-instance-location)
        export EVENTSTREAMS_LOCATION=$1 && shift
        ;;

      # Entitlement
      --ibm-entitlement-key)
        export IBM_ENTITLEMENT_KEY=$1 && shift
        ;;

      # SLS
      --license-id)
        export SLS_LICENSE_ID=$1 && shift
        ;;
      --license-file)
        export SLS_LICENSE_FILE_LOCAL=$1 && shift
        if [[ ! -e "$SLS_LICENSE_FILE_LOCAL" ]]; then
          echo_warning "Error: File does not exist: $SLS_LICENSE_FILE_LOCAL"
          exit 1
        fi
        ;;

      # UDS
      --uds-email)
        export UDS_CONTACT_EMAIL=$1 && shift
        ;;
      --uds-firstname)
        export UDS_CONTACT_FIRSTNAME=$1 && shift
        ;;
      --uds-lastname)
        export UDS_CONTACT_LASTNAME=$1 && shift
        ;;
      # DRO
      --dro-namespace)
        export DRO_NAMESPACE=$1 && shift
        ;;

      # MongoDB
      --mongodb-namespace)
        export MONGODB_NAMESPACE=$1 && shift
        ;;

      # Manage commands - Server bundle configuration
      --manage-server-bundle-size)
        export MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE=$1 && shift
        if [[ "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "jms" || "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "snojms" ]]; then
          export MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
        fi
        ;;
      --manage-jms)
        if [[ "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "jms" || "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "snojms" ]]; then
          export MAS_APP_SETTINGS_DEFAULT_JMS=true
          export MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
        fi
        ;;
      --manage-demodata)
        export MAS_APP_SETTINGS_DEMODATA=true
        ;;
      --manage-jdbc)
        export MAS_APPWS_BINDINGS_JDBC_MANAGE=$1 && shift
        ;;

      # Manage commands - Components
      --manage-components)
        export MAS_APPWS_COMPONENTS=$1 && shift
       ;;

      # Manage commands - Customization archive
      --manage-customization-archive-name)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME=$1 && shift
        ;;
      --manage-customization-archive-url)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_URL=$1 && shift
        ;;
      --manage-customization-archive-username)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_USERNAME=$1 && shift
        ;;
      --manage-customization-archive-password)
        export MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_PASSWORD=$1 && shift
        ;;

      # Manage commands - Dabatase tablespaces
      --manage-db-tablespace)
        export MAS_APP_SETTINGS_TABLESPACE=$1 && shift
        ;;

      --manage-db-indexspace)
        export MAS_APP_SETTINGS_INDEXSPACE=$1 && shift
        ;;

      --manage-db-schema)
        export MAS_APP_SETTINGS_DB2_SCHEMA=$1 && shift
        ;;

      # Manage commands - Database encryption keys
      --manage-crypto-key)
        export MAS_APP_SETTINGS_CRYPTO_KEY=$1 && shift
        ;;
      --manage-cryptox-key)
        export MAS_APP_SETTINGS_CRYPTOX_KEY=$1 && shift
        ;;
      --manage-old-crypto-key)
        export MAS_APP_SETTINGS_OLD_CRYPTO_KEY=$1 && shift
        ;;
      --manage-old-cryptox-key)
        export MAS_APP_SETTINGS_OLD_CRYPTOX_KEY=$1 && shift
        ;;
      --manage-override-encryption-secrets)
        export MAS_APP_SETTINGS_OVERRIDE_ENCRYPTION_SECRETS_FLAG=true
        ;;

      # Manage commands - Base & secondary languages
      --manage-base-language)
        export MAS_APP_SETTINGS_BASE_LANG=$1 && shift
        ;;

      --manage-secondary-languages)
        export MAS_APP_SETTINGS_SECONDARY_LANGS=$1 && shift
        ;;

      # Manage commands - Server timezone
      --manage-server-timezone)
        export MAS_APP_SETTINGS_SERVER_TIMEZONE=$1 && shift
        export DB2_TIMEZONE=$MAS_APP_SETTINGS_SERVER_TIMEZONE # If used, set Manage dedicated Db2 timezone to be same as Manage server timezone
        ;;

      # Cloud Provider Commands - IBM Cloud
      --ibmcloud-apikey)
        export IBMCLOUD_APIKEY=$1 && shift
        ;;

      # Cloud Provider Commands - AWS
      --aws-region)
        export AWS_REGION=$1 && shift
        ;;
      --aws-access-key-id)
        export AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --aws-secret-access-key)
        export AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --aws-vpc-id)
        export VPC_ID=$1 && shift
        ;;

      # Other Commands
      --skip-pre-check)
        SKIP_PRE_CHECK=true
        ;;
      --dev-mode)
        DEV_MODE=true
        ;;
      --no-wait-for-pvcs)
        WAIT_FOR_PVCS=false
        ;;
      --no-confirm)
        NO_CONFIRM=true
        ;;
      --accept-license)
        LICENSE_ACCEPTED=true
        ;;
      -h|--help)
        install_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${TEXT_RESET}\n"
        install_help
        exit 1
        ;;
    esac
  done

  # Run validations
  [[ -z "$SLS_LICENSE_FILE_LOCAL" ]] && install_help "SLS_LICENSE_FILE_LOCAL is not set"

  manage_validate_internal_registry

  if [[ "$DEV_MODE" == "true"  ]]; then
    MAS_ICR_CP=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local
    MAS_ICR_CPOPEN=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      SLS_ICR_CP=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local
    fi
    SLS_ICR_CPOPEN=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen
  else
    MAS_ICR_CP=cp.icr.io/cp
    MAS_ICR_CPOPEN=icr.io/cpopen
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      SLS_ICR_CP=cp.icr.io/cp
    fi
    SLS_ICR_CPOPEN=icr.io/cpopen
  fi

  # Ensure that install will not trigger a change in the catalog source
  validate_catalog_source

  # Present the MAS license information
  license_prompt

  # Determine Certificate Manager provider
  cert_manager_selection

  # Work out which SLS var to use for bootstrap
  export SLS_ENTITLEMENT_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"
}


function install_interactive() {
  echo_h2 "IBM Maximo Operator Catalog Selection"
  echo "${TEXT_DIM}Select how you want to manage updates in this cluster:"
  echo "- For automatic updates select to use the online dynamic catalog.  Updates will be delivered as soon as they are published by IBM"
  echo "- To take direct control over when updates are applied to the cluster select to use a static catalog instead.  Updates will be delivered only when you update the catalog source in your cluster"
  echo
  reset_colors

  if [[ -n "$DEV_MODE" ]]; then
    # Development mode
    prompt_for_input "Select Catalog Source" MAS_CATALOG_VERSION "v8-master-amd64"
    prompt_for_input "Select Subscription Channel" MAS_CHANNEL "8.11.x-dev"
  elif [[ -z "$AIRGAP_MODE" ]]; then
    prompt_for_confirm "Enable automatic updates with the online dynamic catalog?" USE_ONLINE_CATALOG
    if [[ "$USE_ONLINE_CATALOG" == "true" ]]; then
      # Dynamic Catalog Source (Connected Install)
      MAS_CATALOG_VERSION=v8-amd64

      echo -e "${COLOR_YELLOW}MAS Version:"
      echo "  1. 8.11"
      echo "  2. 8.10"
      prompt_for_input "Select Subscription Channel" MAS_CHANNEL_SELECTION "1"

      case $MAS_CHANNEL_SELECTION in
        1|8.11|8.11.x)
          MAS_CHANNEL=8.11.x
          ;;


        2|8.10|8.10.x)
          MAS_CHANNEL=8.10.x
          ;;

        *)
          MAS_CHANNEL=$MAS_CHANNEL_SELECTION
          ;;
      esac
    else
      # Static Catalog Source (Connected Install)
      choose_mas_version
    fi
  else
    # Static Catalog Source (Disconnected Install)
    choose_mas_version
  fi

  # Ensure that install will not trigger a change in the catalog source
  validate_catalog_source

  # Present a the MAS license information
  license_prompt

  # Determine Certificate Manager provider
  cert_manager_selection

  # Configure the MAS instance
  echo
  echo_h2 "Configure MAS Instance"

  # Instance ID regex: ^[a-z][a-z0-9-]{1,10}[a-z0-9]$
  if [[ ! -z "$1" ]]; then
    MAS_INSTANCE_ID=$1
  fi
  echo "${TEXT_DIM}Instance ID restrictions:"
  echo " - Must be 3-12 characters long"
  echo " - Must only use lowercase letters, numbers, and hypen (-) symbol"
  echo " - Must start with a lowercase letter"
  echo " - Must end with a lowercase letter or a number"
  reset_colors
  prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID
  if [[ ! "${MAS_INSTANCE_ID}" =~ ^[a-z][a-z0-9-]{1,10}[a-z0-9]$ ]]; then
    echo_warning "Instance ID (${MAS_INSTANCE_ID}) does not meet requirements"
    exit 1
  fi
  echo

  # Workspace ID regex: ^[a-z][a-z0-9]{2,11}$
  echo "${TEXT_DIM}Workspace ID restrictions:"
  echo " - Must be 3-12 characters long"
  echo " - Must only use lowercase letters and numbers"
  echo " - Must start with a lowercase letter"
  reset_colors
  prompt_for_input "MAS Workspace ID" MAS_WORKSPACE_ID
  if [[ ! "${MAS_WORKSPACE_ID}" =~ ^[a-z][a-z0-9]{2,11}$ ]]; then
    echo_warning "Workspace ID (${MAS_WORKSPACE_ID}) does not meet requirements"
    exit 1
  fi
  echo

  # Workspace display name regex: ^.{3,300}$
  echo "${TEXT_DIM}Workspace display name restrictions:"
  echo " - Must be 3-300 characters long"
  reset_colors
  prompt_for_input "MAS Workspace Display Name" MAS_WORKSPACE_NAME
  if [[ ! "${MAS_WORKSPACE_NAME}" =~ ^.{3,300}$ ]]; then
    echo_warning "Workspace name (${MAS_WORKSPACE_NAME}) does not meet requirements"
    exit 1
  fi

  echo
  echo_h2 "Configure Operation Mode"
  echo "${TEXT_DIM}Maximo Application Suite can be installed in a non-production mode for internal development and testing, this setting cannot be changed after installation:"
  echo " - All applications, add-ons, and solutions have 0 (zero) installation AppPoints in non-production installations."
  echo " - These specifications are also visible in the metrics that are shared with IBM and in the product UI."
  echo
  reset_colors
  echo -e "Operational Mode:"
  echo "  1. Production Mode (default)"
  echo "  2. Non-Production Mode"
  echo
  prompt_for_input "Select Operational Mode" PROD_MODE_SELECTION "1"

  case $PROD_MODE_SELECTION in
    1)
      USE_NON_PROD_MODE=false
      ;;
    2)
      USE_NON_PROD_MODE=true
      MAS_ANNOTATIONS="mas.ibm.com/operationalMode=nonproduction"
      ;;
    *)
      echo_warning "Invalid Selection"
      exit 1
      ;;
  esac

  install_config_sno
  install_config_dns
  install_config_applications
  install_config_db2
  install_config_kafka
  install_config_turbonomic
  install_config_additional_configs

  if [[ "$SNO_MODE" == "true" ]]; then
    install_config_storage_classes_sno
  else
    install_config_storage_classes
  fi
  install_config_iot_storage_classes #10
  install_config_manage_storage_classes #11
  install_config_advanced #12

  echo ""
  if [[ "$DEV_MODE" == "true" && -z "$AIRGAP_MODE" ]]; then
    # Development Mode -- offer the ability to set MAS and SLS source independently
    echo_h2 "Configure Artifactory"
    prompt_for_input "Artifactory Username" ARTIFACTORY_USERNAME
    prompt_for_secret "Artifactory Token" ARTIFACTORY_TOKEN "Re-use saved Artifactory Token?"

    echo
    echo_h2 "Configure IBM Container Registry"
    prompt_for_secret "IBM Entitlement Key" IBM_ENTITLEMENT_KEY "Re-use saved IBM Entitlement Key?"

    echo
    echo_h2 "Configure IBM Container Registry (MAS)"
    prompt_for_input "IBM Container Registry (cp)" MAS_ICR_CP docker-na-public.artifactory.swg-devops.com/wiotp-docker-local override
    prompt_for_input "IBM Container Registry (cpopen)" MAS_ICR_CPOPEN docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen override

    echo
    echo_h2 "Configure IBM Container Registry (SLS)"
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      prompt_for_input "IBM Container Registry (cp)" SLS_ICR_CP docker-na-public.artifactory.swg-devops.com/wiotp-docker-local override
    fi
    prompt_for_input "IBM Container Registry (cpopen)" SLS_ICR_CPOPEN docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen override
  else
    # Production Mode -- everything comes from the same registry (IBM container registry)
    echo_h2 "Configure IBM Container Registry"
    prompt_for_secret "IBM Entitlement Key" IBM_ENTITLEMENT_KEY "Re-use saved IBM Entitlement Key?"

    # Use defaults
    MAS_ICR_CP=cp.icr.io/cp
    MAS_ICR_CPOPEN=icr.io/cpopen

    SLS_ICR_CPOPEN=icr.io/cpopen
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      SLS_ICR_CP=cp.icr.io/cp
    fi
  fi

  echo
  echo_h2 "Configure Product License"

  if [[ "$SLS_PROMPT_LICENSE_ID" == "true" ]]; then
    prompt_for_input "License ID" SLS_LICENSE_ID
  fi

  prompt_for_input "License File" SLS_LICENSE_FILE_LOCAL
  if [[ ! -e "$SLS_LICENSE_FILE_LOCAL" ]]; then
    echo_warning "Error: File does not exist: $SLS_LICENSE_FILE_LOCAL"
    exit 1
  fi

  SLS_ENTITLEMENT_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"

  echo ""
  echo_h2 "Configure UDS"
  prompt_for_input "UDS Contact Email" UDS_CONTACT_EMAIL
  prompt_for_input "UDS Contact First Name" UDS_CONTACT_FIRSTNAME
  prompt_for_input "UDS Contact Last Name" UDS_CONTACT_LASTNAME
}

function install() {
  echo "${TEXT_UNDERLINE}IBM Maximo Application Suite Installer (v${VERSION})${TEXT_RESET}"
  echo "Powered by ${COLOR_CYAN}${TEXT_UNDERLINE}https://github.com/ibm-mas/ansible-devops/${TEXT_RESET} and ${COLOR_CYAN}${TEXT_UNDERLINE}https://tekton.dev/${TEXT_RESET}"
  reset_colors

  # Take the first parameter off (it will be "install")
  shift

  # Process parameters that work for both interactive and non-interactive modes
  INTERACTIVE_MODE=true
  for param in "$@"
  do
    case $param in
      -c|--mas-catalog-version)
        INTERACTIVE_MODE=false
        ;;
      --dev-mode)
        DEV_MODE=true
        ;;
      --skip-grafana-install)
        GRAFANA_ACTION="none"
        ;;
      -h|--help)
        install_help
        ;;
    esac
  done

  if [[ -z $GRAFANA_ACTION ]] || [[  "$GRAFANA_ACTION" != "none" ]]; then
    # Determine whether Grafana is available in the cluster based on the available of the operator package
    oc get packagemanifest grafana-operator &> /dev/null
    if [[ "$?" == "1" ]]; then
      GRAFANA_ACTION="none"
      echo
      echo_warning "The Grafana operator package is not available in any catalogs on the target cluster, the installation of Grafana will be disabled."
      echo
    else
      GRAFANA_ACTION="install"
    fi
  fi

  if [[ "$INTERACTIVE_MODE" == "true" ]]; then
    load_config
    connect
    ocp_version_check
    detect_airgap
    detect_sno
    pipelines_install_operator
    install_interactive
  else
    # Non-interactive mode assumes you are already connected
    ocp_version_check
    detect_airgap
    detect_sno
    install_noninteractive "$@"
    pipelines_install_operator
    install_config_additional_configs
  fi

  # Determine if UDS or DRO will be installed
  # DRO is installed by default on latest catalog version, for catalogs older than 240227 install UDS
  uds_action_selection

  # Select DRO Namespace
  if [[ "$INTERACTIVE_MODE" == "true" ]] && [[ "$UDS_ACTION" == "install-dro" ]]; then
    prompt_for_input "Provide DRO Namespace [Default:'redhat-marketplace']" DRO_NAMESPACE "redhat-marketplace"
    echo_highlight "DRO is configured to install in ${DRO_NAMESPACE} namespace"
  fi

  # Prepare and launch the Tekton pipeline
  install_pipelinerun_prepare
  install_pipelinerun_preview
  install_pipelinerun_create
}

#!/bin/bash

. $CLI_DIR/functions/internal/install_config_storage_classes

function update_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas update [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Maximo Operator Catalog Selection (Required):
  -c, --catalog ${COLOR_YELLOW}MAS_CATALOG_VERSION${TEXT_RESET}     Maximo Operator Catalog Version (e.g. v8-221129-amd64)

Update Dependencies (Optional):
  --db2u-namespace ${COLOR_YELLOW}DB2_NAMESPACE${TEXT_RESET}          DB2 namespace where instances update will be performed
  --mongodb-namespace ${COLOR_YELLOW}MONGODB_NAMESPACE${TEXT_RESET}   Namespace where MongoCE operator and instance will be updated
  --mongodb-v5-upgrade ${COLOR_YELLOW}MONGODB_V5_UPGRADE${TEXT_RESET} Confirms that Mongo can be upgraded to version 5 if needed as part of the update
  --mongodb-version  ${COLOR_YELLOW}MONGODB_VERSION${TEXT_RESET}      Optional. Set Mongo version for the upgrade. Note: This overrides the default MongoDB version defined by the Maximo Operator Catalog version.
  --kafka-namespace ${COLOR_YELLOW}KAFKA_NAMESPACE${TEXT_RESET}       Namespace where Kafka operator and instance will be updated
  --kafka-provider ${COLOR_YELLOW}KAFKA_PROVIDER${TEXT_RESET}         Set Kafka provider. Supported options are 'redhat' (Red Hat AMQ Streams), or 'strimzi'
  --dro-migration  ${COLOR_YELLOW}DRO_MIGRATION${TEXT_RESET}          Confirm the removal of UDS and replacement with DRO as part of the update
  --cp4d-version  ${COLOR_YELLOW}CP4D_VERSION${TEXT_RESET}            Optional. Set Cloud Pak for Data version for the upgrade. Note: This overrides the default CP4D version defined by the Maximo Operator Catalog version.
  --dro-storage-class  ${COLOR_YELLOW}DRO_STORAGE_CLASS${TEXT_RESET}  Set Custom RWO Storage Class name for DRO as part of the update
Other Commands:
      --skip-pre-check                  Skips the 'pre-update-check' and 'post-update-verify' tasks in the update pipeline
      --no-confirm                      Launch the update without prompting for confirmation
  -h, --help                            Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function list_mas_instances() {
  oc get suite --all-namespaces --ignore-not-found
}

# Auto-detect Certificate Manager
# -----------------------------------------------------------------------------
# Validates the existence of installed IBM Certificate Manager in the target cluster
# If so, then set parameters to prepare the migration to Red Hat Certificate Manager
function validate_existing_cert_manager() {
  MAS_CATALOG_DATE=${MAS_CATALOG_VERSION:3:6}

  if [[ $MAS_CATALOG_DATE -ge 240130 ]]; then
    # Lookup existing Certificate Manager instance
    if [ -z "$CERT_MANAGER_NAMESPACE" ]; then
      CERT_MANAGER_NAMESPACE=`oc get pods -A | grep cert-manager-cainjector | awk '{print $1}'`
    fi

    # Check that Certificate Manager instance is running in the cluster
    count=`echo $CERT_MANAGER_NAMESPACE | wc -w`
    if [ $count -eq 0 ]; then
      echo_warning "No Certificate-Manager instance was found on the cluster, unable to proceed with the update"
      exit 1
    elif [ $count -eq 1 ]; then
      # Check that there's only one Certificate Manager instance running in the cluster
      # If the running Certificate Manager is the one from IBM Cloud Pak Foundational Services, let users know it will be migrated to Red Hat
      if [ "$CERT_MANAGER_NAMESPACE" == "ibm-common-services" ]; then
        CERT_MANAGER_ACTION=install
        CERT_MANAGER_PROVIDER=redhat
        echo_highlight "Dependency Upgrade Notice!"
        echo_highlight "IBM Certificate-Manager is currently running in the ${CERT_MANAGER_NAMESPACE} namespace"
        echo_highlight "This will be uninstalled and replaced by Red Hat Certificate-Manager as part of this update"
        echo
      fi
    elif [ $count -ge 1 ]; then
      # if multiple Certificate Manager instances, just alert user and skip Certificate Manager update
      echo_warning -e "There are multiple instances of Certificate-Manager running in the cluster, unable to proceed with the update"
      echo_warning -e "Certificate Manager namespaces identified: $CERT_MANAGER_NAMESPACE"
      exit 1
    fi
  fi
}

# Auto-detect MongoDB
# -----------------------------------------------------------------------------
# Validates the existance of installed MongoDB Community Edition in the target cluster
# and prints a warning message if MongoDB is supposed to be upgraded
function validate_existing_mongo() {

  if [[ "$SNO_MODE" == "true" ]]; then
    MONGODB_REPLICAS=1
  else
    MONGODB_REPLICAS=3
  fi

  if [ -z "$MONGODB_NAMESPACE" ]; then
    MONGODB_NAMESPACE=`oc get mongodbcommunity.mongodbcommunity.mongodb.com -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  # We just check current MongoDB version and warn about Mongo upgrade if MAS catalog is more recent than November 2023
  MAS_CATALOG_DATE=${MAS_CATALOG_VERSION:3:6}

  if [[ $MAS_CATALOG_DATE -ge 231128 ]]; then
    # Lookup existing MongoDb instance
    MONGODB_CURRENT_VERSION=`oc get mongodbcommunity.mongodbcommunity.mongodb.com -A -o jsonpath='{.items[0].status.version}' 2> /dev/null`

    # Only check if mongo upgrade is needed if mongo is currently installed
    if [[ $MONGODB_CURRENT_VERSION != "" ]]; then

      # Target mongo version will be defined by chosen catalog/casebundle if MONGODB_VERSION not set
      MONGODB_TARGET_VERSION=${MONGODB_VERSION}
      if [[ "$MONGODB_TARGET_VERSION" == "" ]]; then
        if [[ ! -e "${MAS_DEVOPS_COLLECTION_PATH}/common_vars/casebundles/${MAS_CATALOG_VERSION}.yml" ]]; then
          echo_warning "Unable to locate configuration file: ${MAS_DEVOPS_COLLECTION_PATH}/common_vars/casebundles/${MAS_CATALOG_VERSION}.yml"
          exit 1
        fi
        MONGODB_TARGET_VERSION=`yq -r .mongo_extras_version_default ${MAS_DEVOPS_COLLECTION_PATH}/common_vars/casebundles/${MAS_CATALOG_VERSION}.yml 2> /dev/null`
      fi

      MONGODB_CURRENT_MAJORMINOR_VERSION=${MONGODB_CURRENT_VERSION:0:3}
      MONGODB_TARGET_MAJORMINOR_VERSION=${MONGODB_TARGET_VERSION:0:3}

      # Let users know that Mongo will be upgraded if existing MongoDb major.minor version is lower than the target major version
      # We don't show this message for normal updates, e.g. 5.0.1 to 5.0.2
      if [ ! "$(printf '%s\n' "$MONGODB_TARGET_MAJORMINOR_VERSION" "$MONGODB_CURRENT_MAJORMINOR_VERSION" | sort -V | head -n1)" = "$MONGODB_TARGET_MAJORMINOR_VERSION" ]; then
        if [[ -z "$NO_CONFIRM" ]] ; then # if 'mas update -c v8-231128-amd64', but '--no--confirm' is not set, then we proceed and warn user of the mongodb upgrade, users will still have a chance to abort
          echo_highlight "Dependency Upgrade Notice!"
          echo_highlight "MongoDB Community Edition is currently running version '${MONGODB_CURRENT_VERSION}' and will be upgraded to version '${MONGODB_TARGET_VERSION}'"
          echo
          echo_highlight "It is recommended that you backup your MongoDB instance before proceeding:"
          echo -e "${COLOR_CYAN}${TEXT_UNDERLINE}https://www.ibm.com/docs/en/mas-cd/continuous-delivery?topic=suite-backing-up-mongodb-maximo-application${TEXT_RESET}"
          MONGODB_V5_UPGRADE=true
          echo
        else
          if [[ -z "$MONGODB_V5_UPGRADE" ]] ; then # if 'mas update -c v8-240130-amd64 --no-confirm' but no '--mongodb-v5-upgrade' then we fail as user must consent about the mongodb upgrade
          echo
          echo -e "${COLOR_RED}By choosing '$MAS_CATALOG_VERSION' catalog, you must confirm MongoDB upgrade to version 5.${TEXT_RESET}"
          echo -e "${COLOR_RED}Add '--mongodb-v5-upgrade' argument to the 'mas update' command in order to continue.${TEXT_RESET}"
          exit 1
          fi
        fi
      fi

      # Check that current mongo version is lower or equal than target mongo version, if not block user from downgrading mongo
      if [ ! "$(printf '%s\n' "$MONGODB_CURRENT_VERSION" "$MONGODB_TARGET_VERSION" | sort -V | head -n1)" = "$MONGODB_CURRENT_VERSION" ]; then
          echo
          echo -e "${COLOR_RED}MongoDB Community Edition is currently running version '${MONGODB_CURRENT_VERSION}' and cannot be downgraded to target version '${MONGODB_TARGET_VERSION}' defined for the '$MAS_CATALOG_VERSION' catalog update"
          exit 1
      fi
    fi
  fi
}

# Validate UDS to DRO Migration
# -----------------------------------------------------------------------------

function validate_dro_migration() {
  # warn about DRO migration if UDS is running and MAS catalog is January 2024 or newer
  MAS_CATALOG_DATE=${MAS_CATALOG_VERSION:3:6}

  UDS_NAMESPACE="ibm-common-services"
  UDS_CSV=$(oc get csv -n "${UDS_NAMESPACE}" | grep user-data-services | awk '{print $1}')

  if [[ -n $UDS_CSV ]] && [[ ($MAS_CATALOG_DATE -ge 240227) || ($MAS_CATALOG_DATE == "amd64") || ($MAS_CATALOG_DATE == "master") ]]; then
    if [[ "$NO_CONFIRM" != "true" ]] && [[ -z "${DRO_MIGRATION}" ]]; then
      prompt_for_confirm_default_yes "This update will replace IBM User Data Services with IBM Data Reporter Operator.  Do you want to proceed?" DRO_MIGRATION
    fi
    if [[ "$DRO_MIGRATION" == "true" ]]; then
      echo -e "Verifying current UDS deployment status..."
      # If Jan catalog is detected, set DRO_MIGRATION Flag to True
      UDS_STATUS=$(oc get csv -n "${UDS_NAMESPACE}" "${UDS_CSV}" -o jsonpath='{.status.phase}')
      if [[ $UDS_STATUS = *'Succeeded'* ]]; then
        echo -e "UDS is currently running in namespace ${UDS_NAMESPACE}."
        echo -e "UDS will be uninstalled and MAS will migrate to use DRO (Data Reporter Operator). All MAS instances in the cluster will be re-configured to use DRO"
        echo
        if [[ "$NO_CONFIRM" != "true" ]] && [[ -z "${DRO_STORAGE_CLASS}" ]]; then
          install_config_storage_classes
          DRO_STORAGE_CLASS=$STORAGE_CLASS_RWO
          echo "Storage class for DRO: ${DRO_STORAGE_CLASS}"
        elif [ "$DRO_STORAGE_CLASS" != "" ]; then
          echo "Storage class for DRO: ${DRO_STORAGE_CLASS}"
        else
          DRO_STORAGE_CLASS=""
          echo "No storage class selected for DRO"
        fi

        ## Check all avaliable Suite Instance's versions, if any of them is 8.9.x cancel the update. Exit mas update throw error.
        for suite_namespace in $(oc get Suite --all-namespaces --ignore-not-found -o jsonpath='{.items[*].metadata.namespace}'); do
          suite_name=$(oc get Suite -n ${suite_namespace} -o NAME)
          suite_version=$(oc get ${suite_name} -n ${suite_namespace} -o jsonpath='{.status.versions.reconciled}')

          if [[ $suite_version = 9.* ]] || [[ $suite_version = 8.11.* ]] || [[ $suite_version = 8.10.* ]]; then
            ## Check if the BASCFG url has a local UDS on all instances, if not then exit and throw error
            bascfg_name=$(oc get BasCfg -n ${suite_namespace} -o NAME)
            bas_url=$(oc get ${bascfg_name} -n ${suite_namespace} -o jsonpath='{.spec.config.url}')
            uds_url=$(oc get route uds-endpoint -n ibm-common-services -o jsonpath='{.spec.host}')

            if [[ -z ${uds_url} ]]; then
              echo_warning "UDS route is empty, Please fix your UDS installation to proceed with DRO migration, exiting mas update"
              exit 1
            fi

            if [[ ${bas_url} == *${uds_url}* ]]; then
              echo_highlight "UDS Configuration on ${suite_namespace} with MAS version ${suite_version} is compatible for DRO migration"
            elif [[ ${bas_url} == *ibm-data-reporter* ]]; then
              echo_highlight "${suite_namespace} is already configured with DRO"
            else
              echo_warning "${suite_namespace} appears to use a Remote UDS that is not running locally on this cluster. This setup is not compatible for DRO migration"
              exit 1
            fi
          else
            echo_warning "${suite_namespace} with MAS version ${suite_version} does not support DRO, you must upgrade this instance to at least MAS 8.10 before updating"
            exit 1
          fi
          echo
        done
      else
        DRO_MIGRATION="false"
        echo -e "${COLOR_YELLOW}UDS does not exist, skipping DRO migration and proceeding with mas update"
        DRO_NAMESPACE="redhat-marketplace"
        DRO_CSV=$(oc get csv -n "${DRO_NAMESPACE}" | grep ibm-data-reporter-operator | awk '{print $1}')
        echo $DRO_CSV
        if [[ -n $DRO_CSV ]]; then
          DRO_STATUS=$(oc get csv -n "${DRO_NAMESPACE}" "${DRO_CSV}" -o jsonpath='{.status.phase}')
          if [[ $DRO_STATUS = *'Succeeded'* ]]; then
            echo -e "${COLOR_YELLOW}DRO is currently running in namespace ${DRO_NAMESPACE}, skipping DRO migration and proceeding with mas update"
            UDS_ACTION="skip"
          fi
        fi
      fi
    else
      echo -e "${COLOR_YELLOW} Skipping the migration from UDS to DRO."
      echo -e "${COLOR_YELLOW} By choosing 'Yes', you must confirm the migration from UDS to DRO"
      echo -e "${COLOR_YELLOW} Or Add '--dro-migration' argument to the 'mas update' command in order to continue the migration from UDS to DRO"
    fi
  else
    DRO_MIGRATION="false"
  fi
}


# Auto-detect Grafana
# -----------------------------------------------------------------------------
# Detects whether Grafana V4 Operator is in the target cluster and prints a
# warning message if the Grafana Operator will be updated to V5

function detect_grafana_update() {

  # We just check the Grafana Operator version and warn about Grafana upgrade if MAS catalog is more recent than February 2024
  MAS_CATALOG_DATE=${MAS_CATALOG_VERSION:3:6}

  if [[ $MAS_CATALOG_DATE -ge 240227 ]]; then
    # This catalog version should install grafana operator V5 so check if V4 is installed.

    # See if the Grafana Operator v4 api versions are supported in the cluster
    if [[ "$(oc api-versions | grep '^integreatly.org/v1alpha1$'| wc -l)" -gt 0 ]]; then
      echo_highlight "Dependency Upgrade Notice!"
      echo_highlight "Grafana Operator v4 is currently installed and will be updated to v5"
      echo_highlight "- Grafana v5 instance will have a new URL and admin password"
      echo_highlight "- User accounts set up in the v4 instance will not be migrated"
      echo
      GRAFANA_V5_UPGRADE=true
    fi
  fi
}

function check_cp4d_target_version() {

  CHECK_CP4D_VERSION=$1
  CHECK_CP4D_SERVICE_ALIAS=$2

  # Workaround:
    # If CP4D 4.6.6 then don't use j2 file to lookup for CPD service version as yq fails to generate yaml from j2 due a workaround done in 'olm-utils-cm-4.6.6.yml.j2'
    if [[ "$CHECK_CP4D_VERSION" == "4.6.6" ]]; then
      OLM_UTILS_FILE="olm-utils-cm-$CHECK_CP4D_VERSION.yml"
    else
      OLM_UTILS_FILE="olm-utils-cm-$CHECK_CP4D_VERSION.yml.j2"
    fi

    FULL_PATH_OLM_UTILS_FILE="ansible-devops/roles/cp4d/templates/config_maps/$OLM_UTILS_FILE"

    # Lookup expected CP4D service version
    yq -r .data.release_components_meta "$FULL_PATH_OLM_UTILS_FILE" -o yaml > olm-utils.yaml 2>/dev/null
    if [[ $? -ne 0 ]]; then
      echo "Error while determining the target version for $CHECK_CP4D_SERVICE_ALIAS! Version $CHECK_CP4D_VERSION is not valid."
      CP4D_SERVICE_TARGET_VERSION=""
    else
      CP4D_SERVICE_TARGET_VERSION=$(yq -r ."$CHECK_CP4D_SERVICE_ALIAS".cr_version olm-utils.yaml)
      if [[ "$CP4D_SERVICE_TARGET_VERSION" == "null" ]]; then
        CP4D_SERVICE_TARGET_VERSION=""
        echo "Could not determine the target version for '$CHECK_CP4D_SERVICE_ALIAS'. Skipping upgrade for it ..."
      fi
    fi
    rm -rf olm-utils.yaml

}

# Auto-detect Cloud Pak Data Service
# -----------------------------------------------------------------------------
# Validates the existance of installed Cloud Pak Data Service in the target cluster in the CP4D namespace
# If service exists, then flag it to upgrade as we assume it must always run with same version as CP4D platform
function validate_existing_cp4d_service() {

  CP4D_SERVICE_CRD=$1
  CP4D_SERVICE_NAME=$2
  CP4D_SERVICE_ALIAS=$3

  # Target cp4d version will be defined by chosen catalog/casebundle
  if [[ "$CP4D_VERSION" == "" ]]; then
    CP4D_VERSION=`yq -r .cpd_product_version_default ansible-devops/common_vars/casebundles/${MAS_CATALOG_VERSION}.yml 2>/dev/null`
    if [[ "$CP4D_VERSION" == "null" ]]; then
      CP4D_VERSION=""
      echo "Could not determine default $CP4D_SERVICE_NAME target upgrade version based on '$MAS_CATALOG_VERSION' catalog source. Skipping upgrade..."
    fi
  fi

  # Lookup existing CP4D service version
  CP4D_SERVICE_CURRENT_VERSION=`oc get $CP4D_SERVICE_CRD -n $CP4D_INSTANCE_NAMESPACE -o yaml | yq -r ".items[0].spec.version" 2>/dev/null`
  if [[ "$CP4D_SERVICE_CURRENT_VERSION" == "null" ]]; then
    CP4D_SERVICE_CURRENT_VERSION=""
  fi

  # Only check if upgrade is needed if CP4D service is installed
  if [[ "$CP4D_SERVICE_CURRENT_VERSION" != "" ]]; then

    check_cp4d_target_version "$CP4D_VERSION" "$CP4D_SERVICE_ALIAS"

    # Only check if upgrade is needed if CP4D service target version is set
    if [[ "$CP4D_SERVICE_TARGET_VERSION" != "" ]]; then

      # If current version is lower than target version, then flag CP4D service for upgrade
      if [ ! "$(printf '%s\n' "$CP4D_SERVICE_TARGET_VERSION" "$CP4D_SERVICE_CURRENT_VERSION" | sort -V | head -n1)" = "$CP4D_SERVICE_TARGET_VERSION" ]; then
        CP4D_SERVICE_UPDATE=true
      else
        CP4D_SERVICE_UPDATE=""
      fi

    fi

  fi

}

# Auto-detect Cloud Pak Data
# -----------------------------------------------------------------------------
# Validates the existance of installed Cloud Pak Data in the target cluster
# and prints a warning message if Cloud Pak Data is supposed to be upgraded
function validate_existing_cp4d() {

  # Lookup existing CP4D instance
  if [[ "$CP4D_INSTANCE_NAMESPACE" == "" ]]; then
    CP4D_INSTANCE_NAMESPACE=`oc get ibmcpds.cpd.ibm.com -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  # Lookup existing CP4D instance storage classes
  if [[ "$STORAGE_CLASS_RWX" == "" && "$STORAGE_CLASS_RWO" == "" ]]; then
    if [[ "$CP4D_INSTANCE_NAMESPACE" != "" ]]; then
      # Try fetching file storage class for CPD 4.6 format (storageClass property)
      CPD_FILE_STORAGE_CLASS=`oc get ibmcpds.cpd.ibm.com -n $CP4D_INSTANCE_NAMESPACE -o jsonpath='{.items[0].spec.storageClass}' 2> /dev/null`
      # If not found then try fetching file storage class for CPD 4.8 format (fileStorageClass property)
      if [[ "$CPD_FILE_STORAGE_CLASS" == "" ]]; then
        CPD_FILE_STORAGE_CLASS=`oc get ibmcpds.cpd.ibm.com -n $CP4D_INSTANCE_NAMESPACE -o jsonpath='{.items[0].spec.fileStorageClass}' 2> /dev/null`
      fi

      # Try fetching block storage class for CPD 4.6 format (zenCoreMetadbStorageClass property)
      CPD_BLOCK_STORAGE_CLASS=`oc get ibmcpds.cpd.ibm.com -n $CP4D_INSTANCE_NAMESPACE -o jsonpath='{.items[0].spec.zenCoreMetadbStorageClass}' 2> /dev/null`
      # If not found then try fetching file storage class for CPD 4.8 format (blockStorageClass property)
      if [[ "$CPD_BLOCK_STORAGE_CLASS" == "" ]]; then
        CPD_BLOCK_STORAGE_CLASS=`oc get ibmcpds.cpd.ibm.com -n $CP4D_INSTANCE_NAMESPACE -o jsonpath='{.items[0].spec.blockStorageClass}' 2> /dev/null`
      fi

      STORAGE_CLASS_RWX=$CPD_FILE_STORAGE_CLASS
      STORAGE_CLASS_RWO=$CPD_BLOCK_STORAGE_CLASS
    fi
  fi

  # Lookup existing CP4D instance
  CP4D_CURRENT_VERSION=`oc get ibmcpds.cpd.ibm.com -A -o jsonpath='{.items[0].spec.version}' 2> /dev/null`

  # Target cp4d version will be defined by chosen catalog/casebundle
  if [[ "$CP4D_VERSION" == "" ]]; then
    CP4D_VERSION=`yq -r .cpd_product_version_default ansible-devops/common_vars/casebundles/${MAS_CATALOG_VERSION}.yml 2> /dev/null`
    if [[ "$CP4D_VERSION" == "null" ]]; then
      echo "Could not determine default Cloud Pak for Data target upgrade version based on '$MAS_CATALOG_VERSION' catalog source. Skipping upgrade..."
      CP4D_VERSION=""
    fi
  fi

  # Lookup CP4D target version is valid
  if [[ "$CP4D_VERSION" != "" ]]; then
    check_cp4d_target_version "$CP4D_VERSION" "cpd_platform"
    # If CP4D_SERVICE_TARGET_VERSION is empty, it means it's not a valid version to be upgraded thus skip
    if [[ "$CP4D_SERVICE_TARGET_VERSION" == "" ]]; then
      CP4D_VERSION=""
    fi
  fi

  # Check if CP4D is currently installed, if not then don't bother trying to upgrade
  # Set CP4D_UPDATE if current CP4D version is lower than expected
  if [[ "$CP4D_CURRENT_VERSION" != "" && "$CP4D_VERSION" != "" ]]; then
    if [ ! "$(printf '%s\n' "$CP4D_VERSION" "$CP4D_CURRENT_VERSION" | sort -V | head -n1)" = "$CP4D_VERSION" ]; then

      CP4D_CURRENT_MAJORMINOR_VERSION=${CP4D_CURRENT_VERSION:0:3}
      CP4D_TARGET_MAJORMINOR_VERSION=${CP4D_VERSION:0:3}

      # Let users know that cp4d will be upgraded if existing cp4d major.minor version is lower than the target major version
      # We don't show this message for patch updates, e.g. 4.8.0 to 4.8.1
      if [ ! "$(printf '%s\n' "$CP4D_TARGET_MAJORMINOR_VERSION" "$CP4D_CURRENT_MAJORMINOR_VERSION" | sort -V | head -n1)" = "$CP4D_TARGET_MAJORMINOR_VERSION" ]; then
        if [[ -z "$NO_CONFIRM" ]] ; then # if 'mas update -c v8-231128-amd64', but '--no--confirm' is not set, then we proceed and warn user of the mongodb upgrade, users will still have a chance to abort
          echo_highlight "Dependency Upgrade Notice!"
          echo_highlight "Cloud Pak For Data is currently running on version ${CP4D_CURRENT_VERSION} and will be upgraded to version ${CP4D_VERSION}"
          echo
          echo_highlight "It is recommended that you backup your Cloud Pak for Data instance before proceeding:"
          echo -e "${COLOR_CYAN}${TEXT_UNDERLINE}https://www.ibm.com/docs/en/cloud-paks/cp-data/4.8.x?topic=administering-backing-up-restoring-cloud-pak-data${TEXT_RESET}"
        fi
      fi

      CP4D_UPDATE=true
      SKIP_ENTITLEMENT_KEY_FLAG=true # this will skip ibm-entitlement-key assertion in cp4d role, as entitlement key is not sent in update pipeline but it is required in cp4d role

      # Only check CP4D services if CP4D platform is installed in first place
      if [[ "$CP4D_CURRENT_VERSION" != "" ]]; then
        # Check if CP4D services are installed, if found then flag them to be upgraded

        # Validates CP4D services upgrade - Watson Studio
        validate_existing_cp4d_service 'ws.ws.cpd.ibm.com' 'Watson Studio' 'ws'
        CP4D_UPDATE_WS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_WS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_WS=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Watson Machine Learning
        validate_existing_cp4d_service 'wmlbases.wml.cpd.ibm.com' 'Watson Machine Learning' 'wml'
        CP4D_UPDATE_WML=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_WML=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_WML=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Spark
        validate_existing_cp4d_service 'analyticsengines.ae.cpd.ibm.com' 'Analytics Engine' 'analyticsengine'
        CP4D_UPDATE_SPARK=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_SPARK=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_SPARK=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Watson Openscale
        validate_existing_cp4d_service 'woservices.wos.cpd.ibm.com' 'Watson Openscale' 'openscale'
        CP4D_UPDATE_WOS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_WOS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_WOS=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - SPSS Modeler
        validate_existing_cp4d_service 'spss.spssmodeler.cpd.ibm.com' 'SPSS Modeler' 'spss'
        CP4D_UPDATE_SPSS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_SPSS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_SPSS=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Cognos
        validate_existing_cp4d_service 'caservices.ca.cpd.ibm.com' 'Cognos Analytics' 'cognos_analytics'
        CP4D_UPDATE_COGNOS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_COGNOS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_COGNOS=$CP4D_SERVICE_TARGET_VERSION
      fi
    fi

    if [ ! "$(printf '%s\n' "$CP4D_CURRENT_VERSION" "$CP4D_VERSION" | sort -V | head -n1)" = "$CP4D_CURRENT_VERSION" ]; then
      echo -e "${COLOR_YELLOW}Cloud Pak for Data is currently running on version ($CP4D_CURRENT_VERSION) equal/higher than the target upgrade version ($CP4D_VERSION), skipping upgrade."
    fi
  fi
}

function detect_watson_discovery() {
    WD_SERVICE_CURRENT_VERSION=$(oc get watsondiscoveries.discovery.watson.ibm.com -n ibm-cpd -o yaml  2>/dev/null | yq -r ".items[0].spec.version")
    if [[ "$WD_SERVICE_CURRENT_VERSION" == "null" ]]; then
      WD_SERVICE_CURRENT_VERSION=""
    fi

    # If Watson Discovery is installed particularly in ibm-cpd namespace, then block MAS update as the MAS CLI no longer supports installation/management of Watson Discovery
    if [[ -n "$WD_SERVICE_CURRENT_VERSION" ]]; then
      echo
      echo_warning "Watson Discovery is currently installed in the instance of Cloud Pak for Data that is managed by the MAS CLI (in the ibm-cpd namespace), this is no longer supported and the update can not proceed as a result. Please contact IBM support for assistance."
      exit 1
    fi
}

# Validate Selected Catalog
# -----------------------------------------------------------------------------
# Validates that the selected catalog version is one that is suitable to use
# based on the currently installed catalog source
#
# - You can't update to an older catalog source
# - The dynamic catalog can only be updated to the most recent static catalog
#
# Note: We don't currently support conversion from static to dynamic
#
function validate_update() {
  if [[ "$catalogVersion" != "" ]] && [[ "$catalogId" > "$MAS_CATALOG_VERSION" ]]; then
    echo
    if [[ "$catalogIsDynamic" == "true" ]];
      then echo_warning "Selected catalog is older than the currently installed catalog.  Dynamic catalog can only be updated to the latest static catalog ($MOST_RECENT_CATALOG)"
      else echo_warning "Selected catalog is older than the currently installed catalog.  Unable to update catalog from $catalogId to $MAS_CATALOG_VERSION"
    fi
    echo
    exit 1
  fi

  # Validates CP4D services upgrade - Watson Discovery
  # If Watson Discovery is detected then we should block the upgrade as per product/technical management team's decision
  detect_watson_discovery

  echo_highlight "Inspecting target cluster to determine update content and migration actions ..."

  # Detect if cluster is SNO
  detect_sno

  # Validates Red Hat Cerficate Manager migration only if January catalog or more recent used
  validate_existing_cert_manager

  # Validates MongoDB upgrade is confirmed while using November catalog
  validate_existing_mongo

  # Validates UDS to DRO migration only if UDS is running and January catalog or more recent is used
  validate_dro_migration

  # Confirm Grafana Operator upgrade
  detect_grafana_update

  # Validates CP4D upgrade
  validate_existing_cp4d

  # Lookup for OCP console route
  if [[ -z "$OCP_CONSOLE_ROUTE" ]]; then
    OCP_CONSOLE_ROUTE=$(oc -n openshift-console get route console -o=jsonpath='{.spec.host}') # lookup ocp url regardless
  fi

}

# Inspect Installed Catalog
# -----------------------------------------------------------------------------
# Lookup details of the installed catalog source to determine:
#
# - Whether a dynamic or static catalog source is in use
# - The version of the catalog source in use
#
# This information is shown the user, along with a message indicating that
# this command would switch a dynamic catalog install to a static catalog install
# if they proceed.
#
# If we cannot determine the version of the catalog we show an error message
# but allow the install to proceed as this is not a fatal issue.
#
function show_current_catalog() {
  catalogDisplayName=$(oc -n openshift-marketplace get catalogsource ibm-operator-catalog -o yaml | yq -r ".spec.displayName")
  catalogImage=$(oc -n openshift-marketplace get catalogsource ibm-operator-catalog -o yaml | yq -r ".spec.image")

  echo
  echo_h2 "Review Installed Catalog"
  echo "${catalogDisplayName}"
  echo -e "   ${COLOR_CYAN}${TEXT_UNDERLINE}${catalogImage}"
  reset_colors

  if [[ "$catalogDisplayName" =~ .+(v8-[0-9]+-amd64) ]]; then
    # catalogId = v8-yymmdd-amd64
    # catalogVersion = yymmdd
    catalogId=$(sed -E "s/.+\\((v8-[0-9]+-amd64)\\)/\1/" <<< $catalogDisplayName)
    catalogVersion=$(sed -E "s/.+\\(v8-([0-9]+)-amd64\\)/\1/" <<< $catalogDisplayName)
    catalogIsDynamic=false
  elif [[ "$catalogDisplayName" =~ .+(v8-amd64) ]]; then
    catalogId=$MOST_RECENT_CATALOG
    catalogVersion=$(sed -E "s/.+\\(v8-([0-9]+)-amd64\\)/\1/" <<< $MOST_RECENT_CATALOG)
    catalogIsDynamic=true

    echo
    echo "Automatic catalog updates are currently enabled on this cluster, completing this update will switch to a manually managed catalog source"
    echo "For more information refer to: ${COLOR_CYAN}${TEXT_UNDERLINE}https://ibm-mas.github.io/cli/guides/choosing-the-right-catalog/"
    reset_colors
  else
    echo
    echo_warning "Unable to determine identity & version of currently installed ibm-maximo-operator-catalog"
  fi
}


# Perform non-interative update
# -----------------------------------------------------------------------------
function update_noninteractive() {
  detect_airgap
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      -c|--catalog)
        MAS_CATALOG_VERSION=$1 && shift
        ;;
      --db2u-namespace)
        DB2_NAMESPACE=$1 && shift
        ;;
      --mongodb-namespace)
        MONGODB_NAMESPACE=$1 && shift
        ;;
      --mongodb-v5-upgrade)
        MONGODB_V5_UPGRADE=true
        ;;
      --mongodb-version)
        MONGODB_VERSION=$1 && shift
        ;;
      --kafka-namespace)
        KAFKA_NAMESPACE=$1 && shift
        ;;
      --kafka-provider)
        KAFKA_PROVIDER=$1 && shift
        ;;
      --dro-migration)
        DRO_MIGRATION=true
        ;;
      --dro-storage-class)
        DRO_STORAGE_CLASS=$1 && shift
        ;;
      --cp4d-version)
        CP4D_VERSION=$1 && shift
        ;;
      --no-confirm)
        NO_CONFIRM=true
        ;;
      --skip-pre-check)
        SKIP_PRE_CHECK=true
        ;;
      -h|--help)
        update_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${TEXT_RESET}\n"
        update_help
        exit 1
        ;;
      esac
  done

  # Check all args have been set
  [[ -z "$MAS_CATALOG_VERSION" ]] && update_help "MAS_CATALOG_VERSION is not set"

  ocp_version_check
  show_current_catalog
  validate_update
}


# Perform interative update
# -----------------------------------------------------------------------------
function update_interactive() {
  connect
  ocp_version_check
  detect_airgap

  show_current_catalog

  echo
  echo_h2 "Select IBM Maximo Operator Catalog Version"
  choose_catalog_version
  echo
  echo "The following MAS instances have been detected on the target cluster:"
  echo
  reset_colors
  list_mas_instances
  echo
  validate_update

  # Auto-detect Db2
  # ---------------------------------------------------------------------------
  if [ -z "$DB2_NAMESPACE" ]; then
    DB2_NAMESPACE=`oc get db2ucluster.db2u.databases.ibm.com -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  oc get Operator db2u-operator.ibm-common-services > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    prompt_for_input "Db2u Universal Operator detected. Db2u namespace to update?" DB2_NAMESPACE "db2u"
    echo
  fi

  # Detect Kafka in cluster and set namespace
  # Auto-detect Kafka
  # ---------------------------------------------------------------------------
  if [ -z "$KAFKA_NAMESPACE" ]; then
    KAFKA_NAMESPACE=`oc get Kafka.kafka.strimzi.io -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  if [ -z "$KAFKA_PROVIDER" ] && [ -n "$KAFKA_NAMESPACE" ]; then
    KAFKA_OPERATOR=`oc get subscription -n $KAFKA_NAMESPACE -o jsonpath='{.items[0].spec.name}' 2> /dev/null`
    if [ "$?" == "0" ]; then
      if [ "$KAFKA_OPERATOR" == "amq-streams" ]; then
        KAFKA_PROVIDER="redhat"
        KAFKA_PROVIDER_NAME="AMQ Streams) ........................"
      elif [ "$KAFKA_OPERATOR" == "strimzi-kafka-operator" ]; then
        KAFKA_PROVIDER="strimzi"
        KAFKA_PROVIDER_NAME="Strimzi) ............................"
      fi
    fi
  fi
}

# Main function
# -----------------------------------------------------------------------------
function update() {
  # Take the first parameter off (it will be "update")
  shift
  if [[ $# -gt 0 ]]; then
    update_noninteractive "$@"
  else
    update_interactive
  fi

  export MAS_CATALOG_VERSION
  export DB2_NAMESPACE
  export MONGODB_NAMESPACE
  export MONGODB_V5_UPGRADE
  export MONGODB_V6_UPGRADE
  export MONGODB_REPLICAS
  export MONGODB_VERSION
  export KAFKA_NAMESPACE
  export KAFKA_PROVIDER
  export CERT_MANAGER_PROVIDER
  export CERT_MANAGER_ACTION
  export DRO_MIGRATION
  export GRAFANA_V5_UPGRADE
  export CP4D_UPDATE
  export CP4D_VERSION
  export CP4D_UPDATE_WS
  export CP4D_CURRENT_VERSION_WS
  export CP4D_TARGET_VERSION_WS
  export CP4D_UPDATE_WML
  export CP4D_CURRENT_VERSION_WML
  export CP4D_TARGET_VERSION_WML
  export CP4D_UPDATE_SPARK
  export CP4D_CURRENT_VERSION_SPARK
  export CP4D_TARGET_VERSION_SPARK
  export CP4D_UPDATE_WOS
  export CP4D_CURRENT_VERSION_WOS
  export CP4D_TARGET_VERSION_WOS
  export CP4D_UPDATE_SPSS
  export CP4D_CURRENT_VERSION_SPSS
  export CP4D_TARGET_VERSION_SPSS
  export CP4D_UPDATE_COGNOS
  export CP4D_CURRENT_VERSION_COGNOS
  export CP4D_TARGET_VERSION_COGNOS
  export STORAGE_CLASS_RWO
  export STORAGE_CLASS_RWX
  export SKIP_ENTITLEMENT_KEY_FLAG
  export DRO_STORAGE_CLASS
  export UDS_ACTION

  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h4 "IBM Operator Catalog" "    "
  echo_reset_dim "Current Catalog Version .................... ${COLOR_MAGENTA}${catalogId:-unknown}"
  echo_reset_dim "Updated Catalog Version .................... ${COLOR_MAGENTA}${MAS_CATALOG_VERSION}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Update Content" "    "
  echo_reset_dim "IBM Maximo Application Suite ............... ${COLOR_GREEN}All MAS instances"
  echo_reset_dim "IBM Cloud Pak Foundational Services ........ ${COLOR_GREEN}ibm-common-services"

  # IBM Db2
  if [ "$DB2_NAMESPACE" != "" ]; then
    echo_reset_dim "IBM Db2 Universal Operator ................. ${COLOR_GREEN}$DB2_NAMESPACE"
  else
    echo_reset_dim "IBM Db2 Universal Operator ................. ${COLOR_RED}Not found in target cluster"
  fi

  # Detect OCS/ODF Storage Cluster in cluster and set action
  oc get StorageCluster -A > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    echo_reset_dim "OpenShift Data Foundation  ................. ${COLOR_GREEN}Yes"
  else
    echo_reset_dim "OpenShift Data Foundation  ................. ${COLOR_RED}Not found in target cluster"
  fi

  # MongoDB Community Edition
  if [ "$MONGODB_NAMESPACE" != "" ]; then
    echo_reset_dim "MongoDb Community Edition .................. ${COLOR_GREEN}$MONGODB_NAMESPACE (${MONGODB_CURRENT_VERSION} to ${MONGODB_TARGET_VERSION})"
  else
    echo_reset_dim "MongoDb Community Edition .................. ${COLOR_RED}Not found in target cluster"
  fi

  # Kafka (Strimzi/AMQ Streams)
  if [ "$KAFKA_NAMESPACE" != "" ]; then
    echo_reset_dim "Kafka ...................................... ${COLOR_GREEN}$KAFKA_PROVIDER_NAME ($KAFKA_NAMESPACE)"
  else
    echo_reset_dim "Kafka ...................................... ${COLOR_RED}Not found in target cluster"
  fi

  # Cloud Pak for Data
  # only print CP4D info if it's installed in first place
  if [ "$CP4D_CURRENT_VERSION" != "" ]; then
    if [ "$CP4D_UPDATE" == true ]; then
      echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION} to ${CP4D_VERSION} ($CP4D_INSTANCE_NAMESPACE)${TEXT_RESET}"

      if [[ "$STORAGE_CLASS_RWO" != "" && "$STORAGE_CLASS_RWX" != "" ]]; then
      echo_reset_dim " - File Storage Class ...................... ${COLOR_GREEN}${STORAGE_CLASS_RWX}${TEXT_RESET}"
      echo_reset_dim " - Block Storage Class ..................... ${COLOR_GREEN}${STORAGE_CLASS_RWO}${TEXT_RESET}"
      fi

      if [ "$CP4D_VERSION" != "" ]; then
        echo_reset_dim " - Version ................................. ${COLOR_GREEN}${CP4D_VERSION}${TEXT_RESET}"
      fi
    else
      echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_RED}No${TEXT_RESET}"
    fi

    # Cloud Pak for Data Services
    if [ "$CP4D_CURRENT_VERSION_WS" != "" ]; then
      if [ "$CP4D_UPDATE_WS" == true ]; then
        echo_reset_dim " - Watson Studio ........................... ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WS} to ${CP4D_TARGET_VERSION_WS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Studio ........................... ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_WML" != "" ]; then
      if [ "$CP4D_UPDATE_WML" == true ]; then
        echo_reset_dim " - Watson Machine Learning ................. ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WML} to ${CP4D_TARGET_VERSION_WML:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Machine Learning ................. ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_SPARK" != "" ]; then
      if [ "$CP4D_UPDATE_SPARK" == true ]; then
        echo_reset_dim " - Analytics Engine ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_SPARK} to ${CP4D_TARGET_VERSION_SPARK:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Analytics Engine ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_WOS" != "" ]; then
      if [ "$CP4D_UPDATE_WOS" == true ]; then
        echo_reset_dim " - Watson Openscale ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WOS} to ${CP4D_TARGET_VERSION_WOS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Openscale ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_SPSS" != "" ]; then
      if [ "$CP4D_UPDATE_SPSS" == true ]; then
        echo_reset_dim " - SPSS Modeler ............................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_SPSS} to ${CP4D_TARGET_VERSION_SPSS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - SPSS Modeler ............................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_COGNOS" != "" ]; then
      if [ "$CP4D_UPDATE_COGNOS" == true ]; then
        echo_reset_dim " - Cognos Analytics ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_COGNOS} to ${CP4D_TARGET_VERSION_COGNOS:-<Default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Cognos Analytics ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

  else
    echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_RED}Not found in target cluster"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Migrations" "    "

  # IBM to Red Hat Certificate Manager Migration
  if [ "$CERT_MANAGER_PROVIDER" == "redhat" ]
  then echo_reset_dim "IBM to Red Hat Certificate Manager ......... ${COLOR_GREEN}Yes"
  else echo_reset_dim "IBM to Red Hat Certificate Manager ......... ${COLOR_RED}Not Required"
  fi

  # UDS to DRO Migration
  if [ "$DRO_MIGRATION" = "true" ]; then
    echo_reset_dim "UDS to DRO ................................. ${COLOR_GREEN}Yes"
    echo_reset_dim " - DRO Storage Class ....................... ${COLOR_GREEN}${DRO_STORAGE_CLASS}"
  else
    echo_reset_dim "UDS to DRO ................................. ${COLOR_RED}Not Required"
  fi

  # Grafana Operator
  if [ "$GRAFANA_V5_UPGRADE" == true ]
  then echo_reset_dim "Grafana v4 to v5 ........................... ${COLOR_GREEN}Yes"
  else echo_reset_dim "Grafana v4 to v5 ........................... ${COLOR_RED}Not Required"
  fi

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi

  echo
  echo_h2 "Launch Update"

  # Create namespace, install MAS Tekton definitions, configure RBAC
  pipelines_install_tasks_shared_namespace || exit 1

  # Replace ALL environment variables in templates
  eval "echo \"$(cat $CLI_DIR/templates/pipelinerun-update.yaml)\"" > $CONFIG_DIR/pipelinerun-update.yaml

  # Start pipeline execution
  oc -n mas-pipelines create -f $CONFIG_DIR/pipelinerun-update.yaml &>> $LOGFILE || exit 1
  echo -e "${COLOR_GREEN}Update started successfully${TEXT_RESET}"
  echo -e "\nView progress:\n  ${COLOR_CYAN}${TEXT_UNDERLINE}https://${OCP_CONSOLE_ROUTE}/pipelines/ns/mas-pipelines${TEXT_RESET}${TEXT_RESET}"
  echo

}

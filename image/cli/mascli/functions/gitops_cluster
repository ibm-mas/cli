#!/usr/bin/env bash

function gitops_cluster_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops-cluster [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}            Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}     Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}             Account ID
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}             Cluster ID

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                     Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}   Secrets Manager key seperator string

Operator Catalog:
      --catalog-version ${COLOR_YELLOW}MAS_CATALOG_VERSION${TEXT_RESET}   Version of ibm-maximo-operator-catalog to use
      --catalog-image ${COLOR_YELLOW}MAS_CATALOG_IMAGE${TEXT_RESET}       Contain image to use for ibm-maximo-operator-catalog
      --catalog-action ${COLOR_YELLOW}MAS_CATALOG_ACTION${TEXT_RESET}     Action to take on MAS Catalog, either `install`, `update` or `none`. Default is `install`

IBM Cloud Pak Foundational Services:
      --common-services-channel ${COLOR_YELLOW}COMMON_SERVICES_CHANNEL${TEXT_RESET} OLM Channel of the IBM Common Services to install
      --common-services-action ${COLOR_YELLOW}COMMON_SERVICES_ACTION${TEXT_RESET}   Action to take on common-services, either `install`, `upgrade` or `none`. Default is `install`

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}           Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}           GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}            Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}           Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}             Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}     Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}              Git ssh key path
Other Commands:
  -h, --help                              Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_cluster_noninteractive() {
  # TODO: Remember to change the defaults to suite public before release!
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"

  GITHUB_PUSH="false"
  export MAS_CATALOG_ACTION=${MAS_CATALOG_ACTION:-"install"}
  export COMMON_SERVICES_ACTION=${COMMON_SERVICES_ACTION:-"install"}
  export GIT_COMMIT_MSG=${GIT_COMMIT_MSG:-"gitops-cluster commit"}
  export COMMON_SERVICES_CHANNEL=${COMMON_SERVICES_CHANNEL:-"v3.23"}
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}
  export MAS_CATALOG_VERSION=${MAS_CATALOG_VERSION:-"v8-230414-amd64"}
  export MAS_CATALOG_IMAGE=${MAS_CATALOG_IMAGE:-"docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen/ibm-maximo-operator-catalog"}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
      
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Operator Catalog
      --catalog-version)
        export MAS_CATALOG_VERSION=$1 && shift
        ;;
      --catalog-image)
        export MAS_CATALOG_IMAGE=$1 && shift
        ;;
      --mas-catalog-action)
        export MAS_CATALOG_ACTION=$1 && shift
        ;;

      # IBM Cloud Pak Foundational Services
      --common-services-channel)
        export COMMON_SERVICES_CHANNEL=$1 && shift
        ;;
      --common_services_action)
        export COMMON_SERVICES_ACTION=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_cluster_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_cluster_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
    esac
  done

  [[ -z "$ACCOUNT_ID" ]] && gitops_cluster_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_cluster_help "CLUSTER_ID is not set"

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_cluster_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_cluster_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_cluster_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_cluster_help "GIT_BRANCH is not set"
  fi

  [[ -z "$SECRETS_PATH" ]] && gitops_cluster_help "SECRETS_PATH is not set"

  if [[ "$MAS_CATALOG_ACTION" == "update" || "$MAS_CATALOG_ACTION" == "install" ]]; then
    if [ -z $ICR_USERNAME ] || [ -z $ICR_PASSWORD ]; then
      echo 'Missing required environment variables, make sure to set ICR_USERNAME, ICR_PASSWORD'
      exit 1
    fi
  fi

  if [[ "$COMMON_SERVICES_ACTION" == "upgrade" || "$COMMON_SERVICES_ACTION" == "install" ]]; then
    [[ -z "$COMMON_SERVICES_CHANNEL" ]] && gitops_cluster_help "COMMON_SERVICES_CHANNEL is not set"
  fi
}

function gitops_cluster() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_cluster_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_cluster_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  GITOPS_APPS_DIR=${GITOPS_CLUSTER_DIR}/apps

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Application Directory ................. ${COLOR_MAGENTA}${GITOPS_APPS_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path .......................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Operator Catalog" "    "
  echo_reset_dim "Catalog Version ....................... ${COLOR_MAGENTA}${MAS_CATALOG_VERSION}"
  echo_reset_dim "Catalog Image ......................... ${COLOR_MAGENTA}${MAS_CATALOG_IMAGE}"
  echo_reset_dim "Catalog Action ........................ ${COLOR_MAGENTA}${MAS_CATALOG_ACTION}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Common Services" "    "
  echo_reset_dim "Common Services Channel  .............. ${COLOR_MAGENTA}${COMMON_SERVICES_CHANNEL}"
  echo_reset_dim "Common Services Action ................ ${COLOR_MAGENTA}${COMMON_SERVICES_ACTION}"
  reset_colors


  # Set up secrets
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Configuring Cluster secrets"
  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login

  export SECRET_NAME_IBM_ENTITLEMENT=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}ibm_entitlement
  export SECRET_KEY_IBM_ENTITLEMENT=${SECRET_NAME_IBM_ENTITLEMENT}#image_pull_secret_b64


  if [ -z $GIT_SSH ]; then
    export GIT_SSH="false"
  fi

  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_APPS_DIR}
  if [[ -n ${ARTIFACTORY_USERNAME} && -n ${ARTIFACTORY_TOKEN} ]]; then
    export ARTIFACTORY_AUTH_TOKEN=$(echo -n $ARTIFACTORY_USERNAME:$ARTIFACTORY_TOKEN | base64 -w 0)
  fi
  export ICR_AUTH_TOKEN=$(echo -n $ICR_USERNAME:$ICR_PASSWORD | base64 -w 0)

  echo "- Generate image pull secret"
  jinja -X .+ $CLI_DIR/templates/gitops/ibm-entitlement-with-artifactory.json.j2 -o ${GITOPS_APPS_DIR}/ibm-entitlement-with-artifactory.json

  IBM_ENTITLEMENT_WITH_ARTIFACTORY=${GITOPS_APPS_DIR}/ibm-entitlement-with-artifactory.json
  IBM_ENTITLEMENT_WITH_ARTIFACTORY=$(cat $IBM_ENTITLEMENT_WITH_ARTIFACTORY)
  export IBM_ENTITLEMENT_B64=$(echo -n $IBM_ENTITLEMENT_WITH_ARTIFACTORY | base64  -w 0)
  # echo -e "- IBM_ENTITLEMENT_B64=${IBM_ENTITLEMENT_B64}"
  sm_update_secret $SECRET_NAME_IBM_ENTITLEMENT "{\"image_pull_secret_b64\": \"${IBM_ENTITLEMENT_B64}\"}"
  rm -rf ${GITOPS_APPS_DIR}/ibm-entitlement-with-artifactory.json
  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Generating Argo Applications"
  echo "- Cluster Scoped AppProject"
  jinja -X .+ $CLI_DIR/templates/gitops/appproject-cluster-scope.yaml.j2 -o ${GITOPS_APPS_DIR}/appproject-cluster-scope.yaml
  if [[ "$MAS_CATALOG_ACTION" == "update" || "$MAS_CATALOG_ACTION" == "install" ]]; then
    echo "- IBM Operator Catalog"
    jinja -X .+ $CLI_DIR/templates/gitops/ibm-operator-catalog.yaml.j2 -o ${GITOPS_APPS_DIR}/ibm-operator-catalog.yaml
  fi
  if [[ "$COMMON_SERVICES_ACTION" == "upgrade" || "$COMMON_SERVICES_ACTION" == "install" ]]; then
    echo "- IBM Common Services"
    jinja -X .+ $CLI_DIR/templates/gitops/ibm-common-services.yaml.j2 -o ${GITOPS_APPS_DIR}/ibm-common-services.yaml
  fi

  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_APPS_DIR "${GIT_COMMIT_MSG}"
    remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO

    argocd_login
    argocd_sync ${CLUSTER_ID}-watcher

    if [[ "$MAS_CATALOG_ACTION" == "update" || "$MAS_CATALOG_ACTION" == "install" ]]; then
      check_argo_app_synced ibm-operator-catalog ${CLUSTER_ID}-watcher
      check_argo_app_healthy ibm-operator-catalog ${CLUSTER_ID}-watcher
    fi

    if [[ "$COMMON_SERVICES_ACTION" == "upgrade" || "$COMMON_SERVICES_ACTION" == "install" ]]; then
      add_role_to_user ibm-common-services
      check_argo_app_synced ibm-common-services ${CLUSTER_ID}-watcher ibm-common-services
      check_argo_app_healthy ibm-common-services ${CLUSTER_ID}-watcher
    fi
  fi

}

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
{% if wait_for_install == true %}
  name: mas-update-after-install
{% else %}
  name: mas-update
{% endif %}
spec:
{% if wait_for_install == true %}
  workspaces:
    # Shared storage to hold mustgather output for tasks
    - name: shared-mustgather
{% endif %}

  params:
{% if wait_for_install == true %}
    # MAS Instance ID (the instance who's install to wait for)
    - name: mas_instance_id
      type: string
    - name: fvt_image_registry
      type: string
    - name: fvt_image_digest
      type: string
{% endif %}

    # Tekton Pipeline image pull policy (for ibmmas/cli images)
    - name: image_pull_policy
      type: string
      default: IfNotPresent

    # Catalog Version
    - name: mas_catalog_version
      type: string

    # Development Build Support
    - name: artifactory_username
      default: ""
      type: string
      description: Required to install development MAS catalogs
    - name: artifactory_token
      default: ""
      type: string
      description: Required to install development MAS catalogs

    # ocs/odf storage action
    - name: ocs_action
      type: string
      default: "upgrade"
      description: Set to 'upgrade' to update ocs/odf

    # common services action
    - name: common_services_action
      type: string
      default: "upgrade"
      description: Set to 'upgrade' to update common_services

    # cert-manager update
    - name: cert_manager_action
      type: string
      default: ""
      description: Set to 'install' to update to red hat certificate manager
    - name: cert_manager_provider
      type: string
      default: ""
      description: Certificate manager provider (ibm or redhat)

    # db2 update
    - name: db2_action
      type: string
      default: "upgrade"
      description: Set to 'upgrade' to update db2 instances in specified db2 namespace
    - name: db2_namespace
      type: string
      default: "db2u"
      description: Namespace where db2 instances will be updated

    # mongodb update
    - name: mongodb_action
      type: string
      default: "install"
      description: Set to 'install' to update mongodb instances in specified mongodb namespace
    - name: mongodb_namespace
      type: string
      default: "mongoce"
      description: Namespace where mongodb instances will be updated
    - name: mongodb_v5_upgrade
      type: string
      description: Approves the MongoDb upgrade to version 5 if needed
      default: ""

    # kafka update
    - name: kafka_action
      type: string
      default: "upgrade"
      description: Set to 'upgrade' to update kafka instances in specified namespace
    - name: kafka_namespace
      type: string
      default: "strimzi"
      description: Namespace where kafka instances will be updated
    - name: kafka_provider
      type: string
      default: "strimzi"
      description: kafka provider such as 'redhat' or 'strimzi'

    # SLS 3.8.0 registry change
    - name: update_sls_registry
      default: ""
      type: string
      description: Set to 'true' to change all LicenseService CRs' registry to cpopen
    
    # UDS/DRO Migration
    - name: dro_migration
      default: ""
      type: string
      description: Set to 'true' to Migration UDS to DRO 

    # grafana operator update
    - name: grafana_v5_upgrade
      type: string
      description: Approves the Grafana Operator upgrade to version 5
      default: ""

  tasks:
{% if wait_for_install == true %}
    # 0. Wait for the install pipeline to complete
    # -------------------------------------------------------------------------
    - name: wait-for-install
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
      taskRef:
        kind: Task
        name: mas-fvt-wait-for-install
{% endif %}

    # 1. Verify health of the cluster before we change anything
    # -------------------------------------------------------------------------
    {{ lookup('template', 'taskdefs/cluster-setup/ocp-verify-all.yml.j2', template_vars={
        'name': 'pre-update-check',
        'devops_suite_name': 'pre-update-check'
      }) | indent(4) }}
{% if wait_for_install == true %}
      runAfter:
        - wait-for-install
{% endif %}

    # 2. Run the catalog update
    # -------------------------------------------------------------------------
    - name: update-catalog
      taskRef:
        kind: Task
        name: mas-devops-ibm-catalogs
      runAfter:
        - pre-update-check
      params:
        - name: devops_suite_name
          value: update-catalog

        - name: mas_catalog_version
          value: $(params.mas_catalog_version)

        # Development catalog support
        - name: artifactory_username
          value: $(params.artifactory_username)
        - name: artifactory_token
          value: $(params.artifactory_token)

    # 3. Update SLS LicenseService CR registry if needed
    # -------------------------------------------------------------------------
    - name: update-licenseservice
      taskRef:
        kind: Task
        name: sls-registry-update
      runAfter:
        - update-catalog
      when:
        - input: "true"
          operator: in
          values: ["$(params.update_sls_registry)"]

    # 4. Verify health of the cluster before we consider the update complete
    # -------------------------------------------------------------------------
    {{ lookup('template', 'taskdefs/cluster-setup/ocp-verify-all.yml.j2', template_vars={
        'name': 'post-update-verify',
        'devops_suite_name': 'post-update-verify'
      }) | indent(4) }}
      runAfter:
        - update-catalog

    # 5. Update Dependencies
    # ---------------------------------------------------------------------------
    - name: update-ocs
      taskRef:
        kind: Task
        name: mas-devops-ocs
      runAfter:
        - post-update-verify
      params:
        - name: devops_suite_name
          value: update-ocs
        - name: ocs_action
          value: $(params.ocs_action)

    - name: update-common-services
      taskRef:
        kind: Task
        name: mas-devops-common-services
      runAfter:
        - update-ocs
      params:
        - name: devops_suite_name
          value: update-common-services
        - name: common_services_action
          value: $(params.common_services_action)

    # Only migrate to Red Hat Certificate Manager if identified that IBM Cloud Pak Foundational Services Certificate Manager is running
    - name: update-cert-manager
      taskRef:
        kind: Task
        name: mas-devops-cert-manager
      runAfter:
        - update-common-services
      params:
        - name: devops_suite_name
          value: update-cert-manager
        - name: cert_manager_action
          value: $(params.cert_manager_action)
        - name: cert_manager_provider
          value: $(params.cert_manager_provider)
      when:
        - input: "$(params.cert_manager_action)"
          operator: in
          values: ["install"]
        - input: "$(params.cert_manager_provider)"
          operator: in
          values: ["redhat"]

    - name: update-grafana
      taskRef:
        kind: Task
        name: mas-devops-cluster-monitoring
      when:
        - input: $(params.grafana_v5_upgrade)
          operator: in
          values: ["true", "True"]
      params:
        - name: cluster_monitoring_action
          value: update_grafana
      runAfter:
        - update-common-services

    - name: update-db2
      taskRef:
        kind: Task
        name: mas-devops-db2
      runAfter:
        - update-common-services
      params:
        - name: devops_suite_name
          value: update-db2
        - name: db2_action
          value: $(params.db2_action)
        - name: db2_namespace
          value: $(params.db2_namespace)

    - name: update-mongodb
      taskRef:
        kind: Task
        name: mas-devops-mongodb
      runAfter:
        - update-common-services
      params:
        - name: devops_suite_name
          value: update-mongodb
        - name: mongodb_action
          value: $(params.mongodb_action)
        - name: mongodb_namespace
          value: $(params.mongodb_namespace)
        - name: mongodb_v5_upgrade
          value: $(params.mongodb_v5_upgrade)

    - name: update-kafka
      taskRef:
        kind: Task
        name: mas-devops-kafka
      runAfter:
        - update-common-services
      params:
        - name: devops_suite_name
          value: update-kafka
        - name: kafka_action
          value: $(params.kafka_action)
        - name: kafka_namespace
          value: $(params.kafka_namespace)
        - name: kafka_provider
          value: $(params.kafka_provider)
    
    # UDS/DRO Migration
    - name: update-uds
      taskRef:
        kind: Task
        name: mas-devops-uds
      runAfter:
        - update-common-services
      params:
        - name: dro_migration
          value: $(params.dro_migration)

    # 6. Verify health of the cluster after dependencies updates
    # -------------------------------------------------------------------------
    {{ lookup('template', 'taskdefs/cluster-setup/ocp-verify-all.yml.j2', template_vars={
        'name': 'post-deps-update-verify',
        'devops_suite_name': 'post-deps-update-verify'
      }) | indent(4) }}
      runAfter:
        - update-licenseservice
        - update-db2
        - update-mongodb
        - update-kafka
        - update-cert-manager
        - update-uds
        - update-grafana


{% if wait_for_install == true %}
  # In FVT only this is the time to take a must-gather and finalize the result
  # ---------------------------------------------------------------------------
  finally:
    # Collect must-gather
    # -------------------------------------------------------------------------
    - name: must-gather
      taskRef:
        kind: Task
        name: mas-devops-must-gather
      params:
        - name: base_output_dir
          value: "/workspace/mustgather/$(context.pipelineRun.name)"
      workspaces:
        - name: mustgather
          workspace: shared-mustgather

    # Finalize the record in the FVT database
    # -------------------------------------------------------------------------
    - name: finalize
      taskRef:
        kind: Task
        name: mas-fvt-finalize
{% endif %}

{% if wait_for_install == true %}
    # 7. Test for outages during mongo update
    # -------------------------------------------------------------------------
    - name: fvt-mongo-update
      taskRef:
        kind: Task
        name: mas-ivt-core
      params:
        - name: fvt_image_registry
          value: $(params.fvt_image_registry)
        - name: fvt_image_digest
          value: $(params.fvt_image_digest)
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_workspace_id
          value:  "NOT_USED"
        - name: fvt_test_suite
          value: "mongohealth"
{% endif %}

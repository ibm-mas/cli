#!/bin/bash

function channel_select_iot() {
  case $MAS_CHANNEL in
    8.11.x)
      MAS_APP_CHANNEL_IOT=8.8.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_IOT=8.7.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_IOT=8.6.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_IOT
      ;;
  esac
  true
}

function channel_select_monitor() {
  case $MAS_CHANNEL in
    8.11.x)
      MAS_APP_CHANNEL_MONITOR=8.11.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_MONITOR=8.10.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_MONITOR=8.9.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MONITOR
      ;;
  esac
  true
}

function channel_select_manage() {
  case $MAS_CHANNEL in
    8.11.x)
      MAS_APP_CHANNEL_MANAGE=8.7.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_MANAGE=8.6.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_MANAGE=8.5.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MANAGE
      ;;
  esac
  true
}

function channel_select_predict() {
  case $MAS_CHANNEL in
    8.11.x)
      MAS_APP_CHANNEL_PREDICT=8.9.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_PREDICT=8.8.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_PREDICT=8.7.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_PREDICT
      ;;
  esac
  true
}


function channel_select_optimizer() {
  case $MAS_CHANNEL in
    8.11.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.5.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.4.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.3.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_OPTIMIZER
      ;;
  esac
  true
}

function channel_select_assist() {
  case $MAS_CHANNEL in
    8.11.x)
      MAS_APP_CHANNEL_ASSIST=8.8.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_ASSIST=8.7.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_ASSIST=8.6.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_ASSIST
      ;;
  esac
  true
}

function channel_select_visualinspection() {
  case $MAS_CHANNEL in
    8.11.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.9.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.8.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.7.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_VISUALINSPECTION
      ;;
  esac
  true
}


function config_pipeline_applications() {
  echo
  echo_h2 "Application Selection"
  if prompt_for_confirm "Install IoT?" MAS_APP_INSTALL_IOT; then
    channel_select_iot || exit 1

    if prompt_for_confirm "Install Monitor?" MAS_APP_INSTALL_MONITOR; then
      channel_select_monitor || exit 1
    else
      MAS_APP_CHANNEL_MONITOR=""
    fi
  else
    MAS_APP_CHANNEL_IOT=""
    MAS_APP_CHANNEL_MONITOR=""
  fi

  if prompt_for_confirm "Install Manage?" MAS_APP_INSTALL_MANAGE; then
    channel_select_manage || exit 1
    if prompt_for_confirm "Install Predict?" MAS_APP_INSTALL_PREDICT; then
      channel_select_predict || exit 1
    else
      MAS_APP_CHANNEL_PREDICT=""
    fi
  else
    # Wipe *all* Manage-related variables
    MAS_APP_CHANNEL_MANAGE=""
    MAS_APPWS_BINDINGS_JDBC_MANAGE=""

    MAS_APP_CHANNEL_PREDICT=""
  fi

  if prompt_for_confirm "Install Assist?" MAS_APP_INSTALL_ASSIST; then
    channel_select_assist || exit 1
  else
    MAS_APP_CHANNEL_ASSIST=""
  fi

  if prompt_for_confirm "Install Optimizer?" MAS_APP_INSTALL_OPTIMIZER; then
    channel_select_optimizer || exit 1
  else
    MAS_APP_CHANNEL_OPTIMIZER=""
  fi

  if prompt_for_confirm "Install Visual Inspection?" MAS_APP_INSTALL_VISUALINSPECTION; then
    channel_select_visualinspection || exit 1
  else
    MAS_APP_CHANNEL_VISUALINSPECTION=""
  fi

  manage_validate_internal_registry

  if [[ "$MAS_APP_CHANNEL_ASSIST" != '' ]]; then assist_settings; fi
  if [[ "$MAS_APP_CHANNEL_MANAGE" != '' ]]; then manage_settings; fi
  if [[ "$MAS_APP_CHANNEL_OPTIMIZER" != '' ]]; then optimizer_settings; fi
  if [[ "$MAS_APP_CHANNEL_PREDICT" != '' ]]; then predict_settings; fi

  if [[ "$MAS_APP_CHANNEL_PREDICT" != "" || "$MAS_APP_CHANNEL_ASSIST" != "" ]]; then
    cp4d_channel_selection
  fi

}


# Assist Settings Function
# -----------------------------------------------------------------------------
function assist_settings() {
  echo
  echo_h3 "Configure Maximo Assist"
  echo "${TEXT_DIM}Assist requires access to Cloud Object Storage (COS), this install supports automatic setup using either IBMCloud COS or in-cluster COS via OpenShift Container Storage/OpenShift Data Foundation (OCS/ODF)."
  reset_colors
  echo
  while : ; do
    prompt_for_input 'COS Provider [ibm/ocs]' COS_TYPE "ibm"
    [[ "$COS_TYPE" != "ibm" && "$COS_TYPE" != "ocs" ]] || break
  done
  if [[ "$COS_TYPE" == "ibm" ]]; then
    prompt_for_secret "IBM Cloud API Key" IBMCLOUD_APIKEY
    prompt_for_input "IBM Cloud Resource Group" IBMCOS_RESOURCEGROUP $IBMCOS_RESOURCEGROUP "Default"
  fi
}


# Manage builds containers at install-time
# -----------------------------------------------------------------------------
# We can save customers wasted time by detecting if the image-registry service
# is available in the cluster.  If it's not, and they've selected to install
# Manage then their install is going to fail, so let's just prevent the install
# starting in the first place.
function manage_validate_internal_registry() {
  if [[ "$MAS_APP_CHANNEL_MANAGE" != "" ]]; then
    oc -n openshift-image-registry get service image-registry &> /dev/null
    if [[ "$?" != "0" ]]; then
      echo
      echo_warning "Unable to proceed with installation of Maximo Manage.  Could not detect the required \"image-registry\" service in the openshift-image-registry namespace."
      echo_warning "  For more inforomation refer to ${COLOR_CYAN}${TEXT_UNDERLINE}https://www.ibm.com/docs/en/masv-and-l/continuous-delivery?topic=installing-enabling-openshift-internal-image-registry"
      reset_colors
      echo
      exit 1
    fi
  fi
}


# Manage Settings Function
# -----------------------------------------------------------------------------
function manage_settings() {
  echo
  echo_h3 "Configure Maximo Manage"
  echo "${TEXT_DIM}Customize your Manage installation, refer to the product documentation for more information."
  reset_colors

  case $MAS_APP_CHANNEL_MANAGE in
    8.9.x|8.10.x)
      # Manage Bindings - Watson Studio Local (Manage v8.11 + only)
      echo
      echo_h4 "Manage Binding Configuration"
      if prompt_for_confirm "Install and bind Watson Studio Local?"; then
        MAS_APPWS_BINDINGS_HEALTH_WSL_FLAG=true
      fi
      ;;
  esac

  # Manage Component Selection
  echo
  echo_h4 "Manage Component Selection"
  echo "${TEXT_DIM}Define which Manage Industry Solutions and Add-ons will be configured in the Manage install."
  echo "Provide a comma-separated list of component=version values, e.g. 'base=latest,health=latest,civil=latest'"
  reset_colors
  echo
  if prompt_for_confirm "Customize Manage components?"; then
    prompt_for_input "Manage components to be installed" MAS_APPWS_COMPONENTS
    if [[ -z "$MAS_APPWS_COMPONENTS" ]]; then
      MAS_APPWS_COMPONENTS="base=latest,health=latest"
    fi
    if [[ "${MAS_APPWS_COMPONENTS,,}" == *"it="* ]]; then
      echo_h4 "Maximo IT License Terms"
      echo -e "${COLOR_YELLOW}For information about your Maximo IT License, see "https://ibm.biz/MAXIT81-License". To continue with the installation, you must accept the license terms."
      prompt_for_confirm_default_yes "Do you accept the license terms?" LICENSE_RESPONSE
      if [[ "$LICENSE_RESPONSE" == "false" ]]; then
        exit 1
      fi
    fi
  fi

  # Manage Settings - Database
  echo
  echo_h4 "Manage Settings - Database"
  echo "${TEXT_DIM}Customise the schema, tablespace, indexspace, and encryption settings used by Manage"
  reset_colors
  echo
  if prompt_for_confirm "Customize database settings?"; then
    MAS_APP_SETTINGS_DB2_SCHEMA='maximo'
    MAS_APP_SETTINGS_TABLESPACE='MAXDATA'
    MAS_APP_SETTINGS_INDEXSPACE='MAXINDEX'
    prompt_for_input "Schema" MAS_APP_SETTINGS_DB2_SCHEMA
    prompt_for_input "Tablespace" MAS_APP_SETTINGS_TABLESPACE
    prompt_for_input "Indexspace" MAS_APP_SETTINGS_INDEXSPACE
    echo
    if prompt_for_confirm "Customize database encryption settings?"; then
      # TODO: Someone needs to explain what these actually do (with a link to documentation) and change the env vars to meaningful labels
      prompt_for_input "MXE_SECURITY_CRYPTO_KEY" MAS_APP_SETTINGS_CRYPTO_KEY
      prompt_for_input "MXE_SECURITY_CRYPTOX_KEY" MAS_APP_SETTINGS_CRYPTOX_KEY
      prompt_for_input "MXE_SECURITY_OLD_CRYPTO_KEY" MAS_APP_SETTINGS_OLD_CRYPTO_KEY
      prompt_for_input "MXE_SECURITY_OLD_CRYPTOX_KEY" MAS_APP_SETTINGS_OLD_CRYPTOX_KEY
      if prompt_for_confirm "Override database encryption secrets with provided keys"; then
        MAS_APP_SETTINGS_OVERRIDE_ENCRYPTION_SECRETS_FLAG=true
      fi
    fi
  fi

  # Manage Settings - Customization
  echo
  echo_h4 "Manage Settings - Customization"
  # TODO: Improve the guidance here.  e.g. Should the url include the filename, or is archive name appended to the URL?
  echo "${TEXT_DIM}Provide a customization archive to be used in the Manage build process"
  reset_colors
  echo
  if prompt_for_confirm "Include customization archive?"; then
    MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME='manage-custom-archive'
    prompt_for_input "Customization archive name" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME
    prompt_for_input "Customization archive url" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_URL
    if prompt_for_confirm "Provide authentication to access customization archive URL?"; then
      prompt_for_input "Username" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_USERNAME
      prompt_for_secret "Password" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_PASSWORD
    fi
  fi

  echo
  echo_h4 "Manage Settings - Cognos Analytics"
  echo "${TEXT_DIM}Manage application supports the integration with Cognos Analytics for reporting features which is an optional service installed on top of IBM Cloud Pak for Data. Unless requested these will not be installed."
  echo "Once Manage application and Cognos Analytics are installed, you will be able to configure the Manage & Cognos integration following this documentation: https://ibm.biz/BdMuxs"
  reset_colors
  echo
  if prompt_for_confirm "Install Cognos Analytics"; then
    CPD_INSTALL_COGNOS=true
    DEPLOY_CP4D=run
  fi

  # Manage Settings - Attachments
  # TODO after https://github.com/ibm-mas/ansible-devops/issues/1010
  # Following vars should be set depending on answers here
  # But we should, first of all, unify the roles so we ahve all the choices in one place (filestorage, ibm, aws)
  # - COS_TYPE=ibm # Obtained in FVT Configs, including custom
  # - COS_SETUP_FOR_MANAGE_ATTACHMENTS=true # Obtained in start_pipeline default

  # Manage Settings - Other
  echo
  echo_h4 "Manage Settings - Other"
  echo "${TEXT_DIM}Other miscellanous settings for the installation"
  reset_colors
  echo
  prompt_for_confirm "Create demo data?" MAS_APP_SETTINGS_DEMODATA
  if prompt_for_confirm "Configure JMS?"; then
    MAS_APP_SETTINGS_DEFAULT_JMS=true
    MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
    if [[ "$SNO_MODE" == "true" ]]; then
      MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='snojms' # will just deploy manage with 'all' + 'jms' bundle pods
    else
      MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='jms' # will deploy manage with 'mea','rpt','ui','cron' and 'jms' bundle pods
    fi
  fi

}


# Predict Settings Function
# -----------------------------------------------------------------------------
function predict_settings() {
  echo
  echo_h3 "Configure Maximo Predict"
  echo "${TEXT_DIM}Predict application supports the integration with IBM SPSS and Watson Openscale which are optional services installed on top of IBM Cloud Pak for Data. Unless requested these will not be installed."
  reset_colors
  echo
  if prompt_for_confirm "Install IBM SPSS Statistics"; then
    CPD_INSTALL_SPSS=true
  fi
  if prompt_for_confirm "Install Watson OpenScale"; then
    CPD_INSTALL_OPENSCALE=true
  fi
}


# Optimizer Settings Function
# -----------------------------------------------------------------------------
function optimizer_settings() {
  echo
  echo_h3 "Configure Maximo Optimizer"
  # TODO: Provide info + link to documentation about limited versus full
  echo "${TEXT_DIM}Optimizer supports two install plans - limited and full."
  reset_colors
  echo

  while : ; do
    prompt_for_input 'Plan [full/limited]' MAS_APP_PLAN_OPTIMIZER "full"
    [[ "$MAS_APP_PLAN_OPTIMIZER" != "full" && "$MAS_APP_PLAN_OPTIMIZER" != "limited" ]] || break
  done
}

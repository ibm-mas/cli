
function check_cp4d_target_version() {

  CHECK_CP4D_VERSION=$1
  CHECK_CP4D_SERVICE_ALIAS=$2

  # Workaround:
    # If CP4D 4.6.6 then don't use j2 file to lookup for CPD service version as yq fails to generate yaml from j2 due a workaround done in 'olm-utils-cm-4.6.6.yml.j2'
    if [[ "$CHECK_CP4D_VERSION" == "4.6.6" ]]; then
      OLM_UTILS_FILE="olm-utils-cm-$CHECK_CP4D_VERSION.yml"
    else
      OLM_UTILS_FILE="olm-utils-cm-$CHECK_CP4D_VERSION.yml.j2"
    fi

    FULL_PATH_OLM_UTILS_FILE="ansible-devops/roles/cp4d/templates/config_maps/$OLM_UTILS_FILE"

    # Lookup expected CP4D service version
    yq -r .data.release_components_meta "$FULL_PATH_OLM_UTILS_FILE" -o yaml > olm-utils.yaml 2>/dev/null
    if [[ $? -ne 0 ]]; then
      echo "Error while determining the target version for $CHECK_CP4D_SERVICE_ALIAS! Version $CHECK_CP4D_VERSION is not valid."
      CP4D_SERVICE_TARGET_VERSION=""
    else
      CP4D_SERVICE_TARGET_VERSION=$(yq -r ."$CHECK_CP4D_SERVICE_ALIAS".cr_version olm-utils.yaml)
      if [[ "$CP4D_SERVICE_TARGET_VERSION" == "null" ]]; then
        CP4D_SERVICE_TARGET_VERSION=""
        echo "Could not determine the target version for '$CHECK_CP4D_SERVICE_ALIAS'. Skipping upgrade for it ..."
      fi
    fi
    rm -rf olm-utils.yaml

}

# Auto-detect Cloud Pak Data Service
# -----------------------------------------------------------------------------
# Validates the existance of installed Cloud Pak Data Service in the target cluster in the CP4D namespace
# If service exists, then flag it to upgrade as we assume it must always run with same version as CP4D platform
function validate_existing_cp4d_service() {

  CP4D_SERVICE_CRD=$1
  CP4D_SERVICE_NAME=$2
  CP4D_SERVICE_ALIAS=$3

  # Target cp4d version will be defined by chosen catalog/casebundle
  if [[ "$CP4D_VERSION" == "" ]]; then
    CP4D_VERSION=`yq -r .cpd_product_version_default ansible-devops/common_vars/casebundles/${MAS_CATALOG_VERSION}.yml 2>/dev/null`
    if [[ "$CP4D_VERSION" == "null" ]]; then
      CP4D_VERSION=""
      echo "Could not determine default $CP4D_SERVICE_NAME target upgrade version based on '$MAS_CATALOG_VERSION' catalog source. Skipping upgrade..."
    fi
  fi

  # Lookup existing CP4D service version
  CP4D_SERVICE_CURRENT_VERSION=`oc get $CP4D_SERVICE_CRD -n $CP4D_INSTANCE_NAMESPACE -o yaml | yq -r ".items[0].spec.version" 2>/dev/null`
  if [[ "$CP4D_SERVICE_CURRENT_VERSION" == "null" ]]; then
    CP4D_SERVICE_CURRENT_VERSION=""
  fi

  # Only check if upgrade is needed if CP4D service is installed
  if [[ "$CP4D_SERVICE_CURRENT_VERSION" != "" ]]; then

    check_cp4d_target_version "$CP4D_VERSION" "$CP4D_SERVICE_ALIAS"

    # Only check if upgrade is needed if CP4D service target version is set
    if [[ "$CP4D_SERVICE_TARGET_VERSION" != "" ]]; then

      # If current version is lower than target version, then flag CP4D service for upgrade
      if [ ! "$(printf '%s\n' "$CP4D_SERVICE_TARGET_VERSION" "$CP4D_SERVICE_CURRENT_VERSION" | sort -V | head -n1)" = "$CP4D_SERVICE_TARGET_VERSION" ]; then
        CP4D_SERVICE_UPDATE=true
      else
        CP4D_SERVICE_UPDATE=""
      fi

    fi

  fi

}

# Auto-detect Cloud Pak Data
# -----------------------------------------------------------------------------
# Validates the existance of installed Cloud Pak Data in the target cluster
# and prints a warning message if Cloud Pak Data is supposed to be upgraded
function validate_existing_cp4d() {


      # Only check CP4D services if CP4D platform is installed in first place
      if [[ "$CP4D_CURRENT_VERSION" != "" ]]; then
        # Check if CP4D services are installed, if found then flag them to be upgraded

        # Validates CP4D services upgrade - Watson Studio
        validate_existing_cp4d_service 'ws.ws.cpd.ibm.com' 'Watson Studio' 'ws'
        CP4D_UPDATE_WS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_WS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_WS=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Watson Machine Learning
        validate_existing_cp4d_service 'wmlbases.wml.cpd.ibm.com' 'Watson Machine Learning' 'wml'
        CP4D_UPDATE_WML=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_WML=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_WML=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Spark
        validate_existing_cp4d_service 'analyticsengines.ae.cpd.ibm.com' 'Analytics Engine' 'analyticsengine'
        CP4D_UPDATE_SPARK=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_SPARK=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_SPARK=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Watson Openscale
        validate_existing_cp4d_service 'woservices.wos.cpd.ibm.com' 'Watson Openscale' 'openscale'
        CP4D_UPDATE_WOS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_WOS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_WOS=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - SPSS Modeler
        validate_existing_cp4d_service 'spss.spssmodeler.cpd.ibm.com' 'SPSS Modeler' 'spss'
        CP4D_UPDATE_SPSS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_SPSS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_SPSS=$CP4D_SERVICE_TARGET_VERSION

        # Validates CP4D services upgrade - Cognos
        validate_existing_cp4d_service 'caservices.ca.cpd.ibm.com' 'Cognos Analytics' 'cognos_analytics'
        CP4D_UPDATE_COGNOS=$CP4D_SERVICE_UPDATE
        CP4D_CURRENT_VERSION_COGNOS=$CP4D_SERVICE_CURRENT_VERSION
        CP4D_TARGET_VERSION_COGNOS=$CP4D_SERVICE_TARGET_VERSION
      fi
    fi

    if [ ! "$(printf '%s\n' "$CP4D_CURRENT_VERSION" "$CP4D_VERSION" | sort -V | head -n1)" = "$CP4D_CURRENT_VERSION" ]; then
      echo -e "${COLOR_YELLOW}Cloud Pak for Data is currently running on version ($CP4D_CURRENT_VERSION) equal/higher than the target upgrade version ($CP4D_VERSION), skipping upgrade."
    fi
  fi
}


# Perform non-interative update
# -----------------------------------------------------------------------------
function update_noninteractive() {
  detect_airgap
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      -c|--catalog)
        MAS_CATALOG_VERSION=$1 && shift
        ;;
      --db2u-namespace)
        DB2_NAMESPACE=$1 && shift
        ;;
      --mongodb-namespace)
        MONGODB_NAMESPACE=$1 && shift
        ;;
      --mongodb-v5-upgrade)
        MONGODB_V5_UPGRADE=true
        ;;
      --mongodb-version)
        MONGODB_VERSION=$1 && shift
        ;;
      --kafka-namespace)
        KAFKA_NAMESPACE=$1 && shift
        ;;
      --kafka-provider)
        KAFKA_PROVIDER=$1 && shift
        ;;
      --dro-migration)
        DRO_MIGRATION=true
        ;;
      --dro-namespace)
        DRO_NAMESPACE=$1 && shift
        ;;
      --dro-storage-class)
        DRO_STORAGE_CLASS=$1 && shift
        ;;
      --cp4d-version)
        CP4D_VERSION=$1 && shift
        ;;
      --no-confirm)
        NO_CONFIRM=true
        ;;
      --skip-pre-check)
        SKIP_PRE_CHECK=true
        ;;
      -h|--help)
        update_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${TEXT_RESET}\n"
        update_help
        exit 1
        ;;
      esac
  done

  # Check all args have been set
  [[ -z "$MAS_CATALOG_VERSION" ]] && update_help "MAS_CATALOG_VERSION is not set"

  ocp_version_check
  show_current_catalog
  validate_update
}


# Perform interative update
# -----------------------------------------------------------------------------
function update_interactive() {
  connect
  ocp_version_check
  detect_airgap

  show_current_catalog

  echo
  echo_h2 "Select IBM Maximo Operator Catalog Version"
  choose_catalog_version
  echo
  echo "The following MAS instances have been detected on the target cluster:"
  echo
  reset_colors
  list_mas_instances
  echo
  validate_update

  # Auto-detect Db2
  # ---------------------------------------------------------------------------
  if [ -z "$DB2_NAMESPACE" ]; then
    DB2_NAMESPACE=`oc get db2ucluster.db2u.databases.ibm.com -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  oc get Operator db2u-operator.ibm-common-services > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    prompt_for_input "Db2u Universal Operator detected. Db2u namespace to update?" DB2_NAMESPACE "db2u"
    echo
  fi

  # Detect Kafka in cluster and set namespace
  # Auto-detect Kafka
  # ---------------------------------------------------------------------------
  if [ -z "$KAFKA_NAMESPACE" ]; then
    KAFKA_NAMESPACE=`oc get Kafka.kafka.strimzi.io -A -o jsonpath='{.items[0].metadata.namespace}' 2> /dev/null`
  fi

  if [ -z "$KAFKA_PROVIDER" ] && [ -n "$KAFKA_NAMESPACE" ]; then
    KAFKA_OPERATOR=`oc get subscription -n $KAFKA_NAMESPACE -o jsonpath='{.items[0].spec.name}' 2> /dev/null`
    if [ "$?" == "0" ]; then
      if [ "$KAFKA_OPERATOR" == "amq-streams" ]; then
        KAFKA_PROVIDER="redhat"
        KAFKA_PROVIDER_NAME="AMQ Streams"
      elif [ "$KAFKA_OPERATOR" == "strimzi-kafka-operator" ]; then
        KAFKA_PROVIDER="strimzi"
        KAFKA_PROVIDER_NAME="Strimzi"
      fi
    fi
  fi
}

# Main function
# -----------------------------------------------------------------------------
function update() {
  # Take the first parameter off (it will be "update")
  shift
  if [[ $# -gt 0 ]]; then
    update_noninteractive "$@"
  else
    update_interactive
  fi

  export MAS_CATALOG_VERSION
  export DB2_NAMESPACE
  export MONGODB_NAMESPACE
  export MONGODB_V5_UPGRADE
  export MONGODB_V6_UPGRADE
  export MONGODB_REPLICAS
  export MONGODB_VERSION
  export KAFKA_NAMESPACE
  export KAFKA_PROVIDER
  export CERT_MANAGER_PROVIDER
  export CERT_MANAGER_ACTION
  export DRO_MIGRATION
  export GRAFANA_V5_UPGRADE
  export CP4D_UPDATE
  export CP4D_VERSION
  export CP4D_UPDATE_WS
  export CP4D_CURRENT_VERSION_WS
  export CP4D_TARGET_VERSION_WS
  export CP4D_UPDATE_WML
  export CP4D_CURRENT_VERSION_WML
  export CP4D_TARGET_VERSION_WML
  export CP4D_UPDATE_SPARK
  export CP4D_CURRENT_VERSION_SPARK
  export CP4D_TARGET_VERSION_SPARK
  export CP4D_UPDATE_WOS
  export CP4D_CURRENT_VERSION_WOS
  export CP4D_TARGET_VERSION_WOS
  export CP4D_UPDATE_SPSS
  export CP4D_CURRENT_VERSION_SPSS
  export CP4D_TARGET_VERSION_SPSS
  export CP4D_UPDATE_COGNOS
  export CP4D_CURRENT_VERSION_COGNOS
  export CP4D_TARGET_VERSION_COGNOS
  export STORAGE_CLASS_RWO
  export STORAGE_CLASS_RWX
  export SKIP_ENTITLEMENT_KEY_FLAG
  export DRO_STORAGE_CLASS
  export UDS_ACTION
  export DRO_NAMESPACE

  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h4 "IBM Operator Catalog" "    "
  echo_reset_dim "Current Catalog Version .................... ${COLOR_MAGENTA}${catalogId:-unknown}"
  echo_reset_dim "Updated Catalog Version .................... ${COLOR_MAGENTA}${MAS_CATALOG_VERSION}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Update Content" "    "
  echo_reset_dim "IBM Maximo Application Suite ............... ${COLOR_GREEN}All MAS instances"
  echo_reset_dim "IBM Cloud Pak Foundational Services ........ ${COLOR_GREEN}ibm-common-services"

  # IBM Db2
  if [ "$DB2_NAMESPACE" != "" ]; then
    echo_reset_dim "IBM Db2 Universal Operator ................. ${COLOR_GREEN}$DB2_NAMESPACE"
  else
    echo_reset_dim "IBM Db2 Universal Operator ................. ${COLOR_RED}Not found in target cluster"
  fi

  # Detect OCS/ODF Storage Cluster in cluster and set action
  oc get StorageCluster -A > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    echo_reset_dim "OpenShift Data Foundation  ................. ${COLOR_GREEN}Yes"
  else
    echo_reset_dim "OpenShift Data Foundation  ................. ${COLOR_RED}Not found in target cluster"
  fi

  # MongoDB Community Edition
  if [ "$MONGODB_NAMESPACE" != "" ]; then
    echo_reset_dim "MongoDb Community Edition .................. ${COLOR_GREEN}$MONGODB_NAMESPACE (${MONGODB_CURRENT_VERSION} to ${MONGODB_TARGET_VERSION})"
  else
    echo_reset_dim "MongoDb Community Edition .................. ${COLOR_RED}Not found in target cluster"
  fi

  # Kafka (Strimzi/AMQ Streams)
  if [ "$KAFKA_NAMESPACE" != "" ]; then
    echo_reset_dim "Kafka ...................................... ${COLOR_GREEN}${KAFKA_PROVIDER_NAME} ($KAFKA_NAMESPACE)"
  else
    echo_reset_dim "Kafka ...................................... ${COLOR_RED}Not found in target cluster"
  fi

  # Cloud Pak for Data
  # only print CP4D info if it's installed in first place
  if [ "$CP4D_CURRENT_VERSION" != "" ]; then
    if [ "$CP4D_UPDATE" == true ]; then
      echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION} to ${CP4D_VERSION} ($CP4D_INSTANCE_NAMESPACE)${TEXT_RESET}"

      if [[ "$STORAGE_CLASS_RWO" != "" && "$STORAGE_CLASS_RWX" != "" ]]; then
      echo_reset_dim " - File Storage Class ...................... ${COLOR_GREEN}${STORAGE_CLASS_RWX}${TEXT_RESET}"
      echo_reset_dim " - Block Storage Class ..................... ${COLOR_GREEN}${STORAGE_CLASS_RWO}${TEXT_RESET}"
      fi

      if [ "$CP4D_VERSION" != "" ]; then
        echo_reset_dim " - Version ................................. ${COLOR_GREEN}${CP4D_VERSION}${TEXT_RESET}"
      fi
    else
      echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_RED}No${TEXT_RESET}"
    fi

    # Cloud Pak for Data Services
    if [ "$CP4D_CURRENT_VERSION_WS" != "" ]; then
      if [ "$CP4D_UPDATE_WS" == true ]; then
        echo_reset_dim " - Watson Studio ........................... ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WS} to ${CP4D_TARGET_VERSION_WS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Studio ........................... ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_WML" != "" ]; then
      if [ "$CP4D_UPDATE_WML" == true ]; then
        echo_reset_dim " - Watson Machine Learning ................. ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WML} to ${CP4D_TARGET_VERSION_WML:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Machine Learning ................. ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_SPARK" != "" ]; then
      if [ "$CP4D_UPDATE_SPARK" == true ]; then
        echo_reset_dim " - Analytics Engine ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_SPARK} to ${CP4D_TARGET_VERSION_SPARK:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Analytics Engine ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_WOS" != "" ]; then
      if [ "$CP4D_UPDATE_WOS" == true ]; then
        echo_reset_dim " - Watson Openscale ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_WOS} to ${CP4D_TARGET_VERSION_WOS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Watson Openscale ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_SPSS" != "" ]; then
      if [ "$CP4D_UPDATE_SPSS" == true ]; then
        echo_reset_dim " - SPSS Modeler ............................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_SPSS} to ${CP4D_TARGET_VERSION_SPSS:-<default>}${TEXT_RESET}"
      else
        echo_reset_dim " - SPSS Modeler ............................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

    if [ "$CP4D_CURRENT_VERSION_COGNOS" != "" ]; then
      if [ "$CP4D_UPDATE_COGNOS" == true ]; then
        echo_reset_dim " - Cognos Analytics ........................ ${COLOR_GREEN}Yes - ${CP4D_CURRENT_VERSION_COGNOS} to ${CP4D_TARGET_VERSION_COGNOS:-<Default>}${TEXT_RESET}"
      else
        echo_reset_dim " - Cognos Analytics ........................ ${COLOR_RED}No${TEXT_RESET}"
      fi
    fi

  else
    echo_reset_dim "Cloud Pak for Data Platform ................ ${COLOR_RED}Not found in target cluster"
  fi

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "Migrations" "    "

  # IBM to Red Hat Certificate Manager Migration
  if [ "$CERT_MANAGER_PROVIDER" == "redhat" ]
  then echo_reset_dim "IBM to Red Hat Certificate Manager ......... ${COLOR_GREEN}Yes"
  else echo_reset_dim "IBM to Red Hat Certificate Manager ......... ${COLOR_RED}Not Required"
  fi

  # UDS to DRO Migration
  if [ "$DRO_MIGRATION" = "true" ]; then
    echo_reset_dim "UDS to DRO ................................. ${COLOR_GREEN}Yes"
    echo_reset_dim " - DRO Storage Class ....................... ${COLOR_GREEN}${DRO_STORAGE_CLASS}"
    echo_reset_dim " - DRO Namespace ........................... ${COLOR_GREEN}${DRO_NAMESPACE}"
  else
    echo_reset_dim "UDS to DRO ................................. ${COLOR_RED}Not Required"
  fi

  # Grafana Operator
  if [ "$GRAFANA_V5_UPGRADE" == true ]
  then echo_reset_dim "Grafana v4 to v5 ........................... ${COLOR_GREEN}Yes"
  else echo_reset_dim "Grafana v4 to v5 ........................... ${COLOR_RED}Not Required"
  fi

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi

  echo
  echo_h2 "Launch Update"

  # Create namespace, install MAS Tekton definitions, configure RBAC
  pipelines_install_tasks_shared_namespace || exit 1

  # Replace ALL environment variables in templates
  eval "echo \"$(cat $CLI_DIR/templates/pipelinerun-update.yaml)\"" > $CONFIG_DIR/pipelinerun-update.yaml

  # Start pipeline execution
  oc -n mas-pipelines create -f $CONFIG_DIR/pipelinerun-update.yaml &>> $LOGFILE || exit 1
  echo -e "${COLOR_GREEN}Update started successfully${TEXT_RESET}"
  echo -e "\nView progress:\n  ${COLOR_CYAN}${TEXT_UNDERLINE}https://${OCP_CONSOLE_ROUTE}/pipelines/ns/mas-pipelines${TEXT_RESET}${TEXT_RESET}"
  echo

}

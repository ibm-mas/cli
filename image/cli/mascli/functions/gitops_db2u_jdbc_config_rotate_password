#!/usr/bin/env bash

function gitops_db2u_jdbc_config_rotate_password_help() { gitops_db2u_jdbc_config_rotate_password
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_db2u_jdbc_config_rotate_password [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}    Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID
  -A, --argocd-check ${COLOR_YELLOW}ARGOCD_CHECK${TEXT_RESET}        ArgoCD check flag, when set to true, will make ArgoCD calls

IBM Maximo Application Suite:
      -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}  IBM Suite Maximo Application Suite Instance ID      

IBM DB2U JDBC Configuration:
      --mas-config-scope ${COLOR_YELLOW}MAS_CONFIG_SCOPE${TEXT_RESET}         Supported values are 'system', 'ws', 'app', or 'wsapp'
      --mas-workspace-id ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}         MAS WORKSPACE ID
      --mas-app-id ${COLOR_YELLOW}MAS_APP_ID${TEXT_RESET}                     MAS APPLICATION ID
      --db2-dbname ${COLOR_YELLOW}DB2_DBNAME${TEXT_RESET}                     DB2 DB Name
      --db2-ldap-username ${COLOR_YELLOW}DB2_LDAP_USERNAME${TEXT_RESET}       DB2 LDAP Username
      --db2-ldap-password ${COLOR_YELLOW}DB2_LDAP_PASSWORD${TEXT_RESET}       DB2 LDAP Password
      --db2-rotate-password ${COLOR_YELLOW}DB2_ROTATE_PASSWORD${TEXT_RESET}   DB2 Rotate Password

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                     Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}   Secrets Manager key seperator string      


Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_db2u_jdbc_config_rotate_password_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-db2u-jdbc-config commit"
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}
  export ARGOCD_CHECK=${ARGOCD_CHECK:-"true"}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -A|--argocd-check)
        export ARGOCD_CHECK=$1 && shift
        ;;

      # MAS
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -W|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      --mas-app-id)
        export MAS_APP_ID=$1 && shift
        ;;
      --mas-config-scope)
        export MAS_CONFIG_SCOPE=$1 && shift
        ;;      

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;
      # DB2
      --db2-dbname )
        export DB2_DBNAME=$1 && shift
        ;;

      --db2-ldap-username )
        export DB2_LDAP_USERNAME=$1 && shift
        ;;

      --db2-rotate-password )
        export DB2_ROTATE_PASSWORD=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_db2u_jdbc_config_rotate_password_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_db2u_jdbc_config_rotate_password_help "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_db2u_jdbc_config_rotate_password_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_db2u_jdbc_config_rotate_password_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_db2u_jdbc_config_rotate_password_help "CLUSTER_ID is not set"

  #db2u
  [[ -z "$DB2_LDAP_USERNAME" ]] && gitops_db2u_jdbc_config_rotate_password_help "DB2_LDAP_USERNAME is not set"
  [[ -z "$DB2_ROTATE_PASSWORD" ]] && gitops_db2u_jdbc_config_rotate_password_help "DB2_ROTATE_PASSWORD is not set"
  
  #MAS
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_db2u_jdbc_config_rotate_password_help "MAS_INSTANCE_ID is not set"
  [[ -z "$MAS_CONFIG_SCOPE" ]] && gitops_db2u_jdbc_config_rotate_password_help "MAS_CONFIG_SCOPE is not set"
  [[ -z "$MAS_WORKSPACE_ID" ]] && gitops_db2u_jdbc_config_rotate_password_help "MAS_WORKSPACE_ID is not set"
  [[ -z "$MAS_APP_ID" ]] && gitops_db2u_jdbc_config_rotate_password_help "MAS_APP_ID is not set"
  
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_db2u_jdbc_config_rotate_password_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_db2u_jdbc_config_rotate_password_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_db2u_jdbc_config_rotate_password_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_db2u_jdbc_config_rotate_password_help "GIT_BRANCH is not set"
  fi

}

function gitops_db2u_jdbc_config_rotate_password() {
  # Take the first parameter off (it will be create-gitops)
  unset MAS_INSTANCE_ID
  unset DB2_LDAP_USERNAME
  shift
  if [[ $# -gt 0 ]]; then
    gitops_db2u_jdbc_config_rotate_password_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_db2u_jdbc_config_rotate_password_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  GITOPS_APPS_DIR=${GITOPS_CLUSTER_DIR}/apps

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Application Directory ................. ${COLOR_MAGENTA}${GITOPS_APPS_DIR}"
  echo_reset_dim "ArgoCD Check .......................... ${COLOR_MAGENTA}${ARGOCD_CHECK}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path ............................ ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Instance ID ............................. ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "DB2_DBNAME .............................. ${COLOR_MAGENTA}${DB2_DBNAME}"
  echo_reset_dim "DB2_LDAP_USERNAME ....................... ${COLOR_MAGENTA}${DB2_LDAP_USERNAME}"
  echo_reset_dim "DB2_ROTATE_PASSWORD ..................... ${COLOR_MAGENTA}${DB2_ROTATE_PASSWORD}"
  echo_reset_dim "MAS_CONFIG_SCOPE ........................ ${COLOR_MAGENTA}${MAS_CONFIG_SCOPE}"
  echo_reset_dim "MAS_WORKSPACE_ID ........................ ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
  echo_reset_dim "MAS_APP_ID .............................. ${COLOR_MAGENTA}${MAS_APP_ID}"
  reset_colors

  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-db2u-jdbc-config
  mkdir -p $TEMP_DIR


  if [ -z $GIT_SSH ]; then
    export GIT_SSH=false
  fi


  # Set and Validate App Names
  # ---------------------------------------------------------------------------
  validate_app_name "${CLUSTER_ID}-watcher"
  validate_app_name "mas-${MAS_INSTANCE_ID}-db2-jdbc-config"
  validate_app_name "mas-${MAS_INSTANCE_ID}-db2-jdbc-config-rotate-password"


  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_APPS_DIR}


  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Starting Rotate DB2U password"


  echo_reset_dim "......................................... ${COLOR_MAGENTA}"
  echo

  export AWS_DB2_SECRET_ID=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}db2
  echo_reset_dim "AWS_DB2_SECRET_ID ......................... ${COLOR_MAGENTA}$AWS_DB2_SECRET_ID"

  export DB2_INSTANCE_NAME=db2wh-${MAS_INSTANCE_ID}
  export DB2_NAMESPACE=mas-${MAS_INSTANCE_ID}-db2u-manage
  export DB2_JDBC_USERNAME=db2inst1
  export DB2_DBNAME=${DB2_DBNAME:-"BLUDB"}
  export DB2_ROTATE_PASSWORD=${DB2_ROTATE_PASSWORD:-false}

  echo_reset_dim ""
  echo_reset_dim "DB2_INSTANCE_NAME ....................... ${COLOR_MAGENTA}${DB2_INSTANCE_NAME,,}"
  echo_reset_dim "DB2_NAMESPACE ........................... ${COLOR_MAGENTA}$DB2_NAMESPACE"
  echo_reset_dim "DB2_JDBC_USERNAME ....................... ${COLOR_MAGENTA}$DB2_JDBC_USERNAME"
  echo_reset_dim "DB2_DBNAME .............................. ${COLOR_MAGENTA}$DB2_DBNAME"
  echo_reset_dim "DB2_ROTATE_PASSWORD ..................... ${COLOR_MAGENTA}$DB2_ROTATE_PASSWORD"
  echo_reset_dim "DB2_LDAP_USERNAME ....................... ${COLOR_MAGENTA}$DB2_LDAP_USERNAME"
  


  # Change / Rotate db2 ldap password : Starts
  if [[ -n ${DB2_LDAP_USERNAME} && ${DB2_ROTATE_PASSWORD} == 'true' ]]; then  

    echo_reset_dim "Start DB2 ROTATE_PASSWORD, checking user in aws secretmanager"  
    oc exec -it c-${DB2_INSTANCE_NAME,,}-db2u-0 -n ${DB2_NAMESPACE} -c db2u -- su -lc "id ${DB2_LDAP_USERNAME}"
    if [[ $? -ne 0 ]]; then
      echo_reset_dim "${COLOR_RED}The db2 user ${DB2_LDAP_USERNAME} does not exists, please check the db2 username."
      exit 1
    fi
    # Check if user exist in aws secret manager
    export AWS_DB2_LDAP_CURRENT_USERNAME=$(aws secretsmanager get-secret-value --secret-id $AWS_DB2_SECRET_ID --query 'SecretString' --output text 2> /dev/null | jq .username | tr -d '"')
    export AWS_DB2_LDAP_CURRENT_PASSWORD=$(aws secretsmanager get-secret-value --secret-id $AWS_DB2_SECRET_ID --query 'SecretString' --output text 2> /dev/null | jq .password | tr -d '"')
    echo_reset_dim "AWS_DB2_LDAP_CURRENT_USERNAME:$AWS_DB2_LDAP_CURRENT_USERNAME and AWS_DB2_LDAP_CURRENT_PASSWORD:$AWS_DB2_LDAP_CURRENT_PASSWORD"

    if [[ -n ${AWS_DB2_LDAP_CURRENT_USERNAME} && -n ${AWS_DB2_LDAP_CURRENT_PASSWORD} && ${DB2_LDAP_USERNAME} != ${AWS_DB2_LDAP_CURRENT_USERNAME} ]]; then
      echo_reset_dim "${COLOR_RED}The input db2 user ${DB2_LDAP_USERNAME} is not matching with user $DB2_LDAP_CURRENT_USERNAME present in aws secret manager $AWS_DB2_SECRET_ID. "
      exit 1
    fi


    ### Change password : Starts ### 
    export DB2_LDAP_POD_NAME=`oc get pods -o custom-columns=POD:.metadata.name -l app=${DB2_INSTANCE_NAME,,},role=ldap -n mas-${MAS_INSTANCE_ID}-db2u-manage  --no-headers`
    echo_reset_dim "DB2_LDAP_POD_NAME ..................... ${COLOR_MAGENTA}${DB2_LDAP_POD_NAME}"       
    export DB2_LDAP_NEW_PASSWORD=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 20`
    echo_reset_dim "DB2_LDAP_NEW_PASSWORD ................. ${COLOR_MAGENTA}${DB2_LDAP_NEW_PASSWORD}"
    oc exec -it -n ${DB2_NAMESPACE} ${DB2_LDAP_POD_NAME} -- /opt/ibm/ldap_scripts/changePassword.py -u ${DB2_LDAP_USERNAME} -cp ${AWS_DB2_LDAP_CURRENT_USERNAME} -np ${DB2_LDAP_NEW_PASSWORD}
    if [[ $? -ne 0 ]]; then
      echo_reset_dim "${COLOR_RED} DB change password Failed, during DB rotation"
      exit 1
    fi
    ### Change password : Ends ###

    ### Test that the new password can connect to db2 : Starts ###
    while [[ true ]]
    do
      echo_reset_dim "Validate db2 connection for ......... ${COLOR_MAGENTA}${DB2_LDAP_USERNAME} with new password"
      oc exec -it c-${DB2_INSTANCE_NAME,,}-db2u-0 -n ${DB2_NAMESPACE} -c db2u -- su -lc "db2 connect to ${DB2_DBNAME} user ${DB2_LDAP_USERNAME} using ${DB2_LDAP_NEW_PASSWORD}" db2inst1
      if [[ $? -eq 0 ]]; then
        echo_reset_dim "Validated db2 connection for ...... ${COLOR_MAGENTA}${DB2_LDAP_USERNAME} with new password !"
        # Update JDBC secrets starts
        export DB2_JDBC_USERNAME=$DB2_LDAP_USERNAME
        export JDBC_INSTANCE_PASSWORD=$DB2_LDAP_NEW_PASSWORD
        export DB2_LDAP_PASSWORD=$DB2_LDAP_NEW_PASSWORD
        # Update JDBC secrets ends

        ### Update Ldap Username / Password in AWS secret manager Starts
        if [[ -n ${DB2_JDBC_USERNAME} && -n ${JDBC_INSTANCE_PASSWORD} ]]; then
          sm_update_secret $AWS_DB2_SECRET_ID "{ \"username\": \"$DB2_JDBC_USERNAME\", \"password\": \"$JDBC_INSTANCE_PASSWORD\"}"
          export SECRET_KEY_DB2_USERNAME=${AWS_DB2_SECRET_ID}#username
          export SECRET_KEY_DB2_PASSWORD=${AWS_DB2_SECRET_ID}#password
        fi
        ### Update Ldap Username / Password in AWS secret manager Ends
        break
      else
        echo_reset_dim "${COLOR_RED} DB Connection Failed, during DB rotation"
        exit 1
      fi
    done
    ### Test that the new password can connect to db2 : Ends ###
  fi
  # Change / Rotate db2 ldap password : Ends
  echo_reset_dim "......................................... ${COLOR_MAGENTA}"
  echo

  echo_reset_dim ""
  echo_reset_dim "DB2_INSTANCE_NAME ....................... ${COLOR_MAGENTA}${DB2_INSTANCE_NAME,,}"
  echo_reset_dim "DB2_NAMESPACE ........................... ${COLOR_MAGENTA}$DB2_NAMESPACE"
  echo_reset_dim "DB2_JDBC_USERNAME ....................... ${COLOR_MAGENTA}$DB2_JDBC_USERNAME"
  echo_reset_dim "JDBC_INSTANCE_PASSWORD .................. ${COLOR_MAGENTA}$JDBC_INSTANCE_PASSWORD"
  echo_reset_dim "DB2_DBNAME .............................. ${COLOR_MAGENTA}$DB2_DBNAME"  
  echo_reset_dim "......................................... ${COLOR_MAGENTA}"
  echo

  echo_reset_dim "Generating DB2U JDBC Config file ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.ibm-db2u-jdbc-config-rotate-password.yaml"
  
  jinja -X .+ $CLI_DIR/templates/gitops/ibm-db2u-jdbc-config-rotate-password.yaml.j2 -o ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.ibm-db2u-jdbc-config-rotate-password.yaml

  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH "${GITOPS_WORKING_DIR}/${GITHUB_REPO}" "${GIT_COMMIT_MSG}"
    remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO

    if [ "${ARGOCD_CHECK}" == "true" ]; then

      argocd_login
      argocd_sync ${CLUSTER_ID}-watcher
      argocd_hard_refresh mas-${MAS_INSTANCE_ID}-db2-jdbc-config    
      argocd_hard_refresh mas-${MAS_INSTANCE_ID}-db2-jdbc-config-rotate-password
      check_argo_app_synced mas-${MAS_INSTANCE_ID}-db2-jdbc-config-rotate-password ${CLUSTER_ID}-watcher ${DB2_NAMESPACE}
      check_argo_app_healthy mas-${MAS_INSTANCE_ID}-db2-jdbc-config-rotate-password ${CLUSTER_ID}-watcher
    fi

  fi
}

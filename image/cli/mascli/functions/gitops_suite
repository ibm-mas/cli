#!/usr/bin/env bash

function gitops_suite_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_suite [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Basic Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID
  -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}  IBM Suite Maximo Application Suite Instance ID
  -A, --argocd-check ${COLOR_YELLOW}ARGOCD_CHECK${TEXT_RESET}        ArgoCD check flag, when set to true will make ArgoCD calls

AWS Secrets Manager Configuration (Required):
      --sm-aws-secret-region ${COLOR_YELLOW}SM_AWS_REGION${TEXT_RESET}          Region of the AWS Secrets Manager to use
      --sm-aws-access-key ${COLOR_YELLOW}SM_AWS_ACCESS_KEY_ID${TEXT_RESET}      Your AWS Access Key ID
      --sm-aws-secret-key ${COLOR_YELLOW}SM_AWS_SECRET_ACCESS_KEY${TEXT_RESET}  Your AWS Secret Key
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                   Secrets Manager path

MongoDb Provider Selection (Required):
      --mongo-provider ${COLOR_YELLOW}MONGODB_PROVIDER${TEXT_RESET}  The mongodb provider to install ('aws' or 'yaml')

IBM Suite License Service:
      --sls-channel ${COLOR_YELLOW}SLS_CHANNEL${TEXT_RESET}  IBM Suite License Service Subscription Channel

IBM Maximo Application Suite:
      --mas-annotations ${COLOR_YELLOW}MAS_ANNOTATIONS${TEXT_RESET}                   MAS Annotations definition in dict format
      --mas-channel ${COLOR_YELLOW}MAS_CHANNEL${TEXT_RESET}                           MAS Core Platform Subscription Channel
      --mas-domain ${COLOR_YELLOW}MAS_DOMAIN${TEXT_RESET}                             MAS Domain
      --mas-image-tags ${COLOR_YELLOW}MAS_IMAGE_TAGS${TEXT_RESET}                     MAS Image tags definition in dict format
      --mas-labels ${COLOR_YELLOW}MAS_LABELS${TEXT_RESET}                             MAS Labels definition in dict format
      --mas-manual-cert-mgmt ${COLOR_YELLOW}MAS_MANUAL_CERT_MGMT${TEXT_RESET}         MAS Manual Cert Management

Target Cluster (Optional):
      --cluster-url ${COLOR_YELLOW}CLUSTER_URL${TEXT_RESET}       Set to target a remote Kubernetes cluster (defaults to 'https://kubernetes.default.svc')

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_suite_noninteractive() {
  # Set defaults
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"

  GIT_COMMIT_MSG="gitops-suite commit"

  export REGION_ID=${REGION_ID:-${SM_AWS_REGION}}

  # Target the local (to ArgoCD) cluster
  export CLUSTER_URL=${CLUSTER_URL:-"https://kubernetes.default.svc"}

  # Disable manual certificate management by default
  export MAS_MANUAL_CERT_MGMT=${MAS_MANUAL_CERT_MGMT:-"False"}

  # Target IBM Container Registry by default
  export ICR_CP=${ICR_CP:-"cp.icr.io/cp"}
  export ICR_CP_OPEN=${ICR_CP_OPEN:-"icr.io/cpopen"}

  # cert-manager namespace, in case redhat default value is cert-manager
  export CERT_MANAGER_NAMESPACE=${CERT_MANAGER_NAMESPACE:-"cert-manager"}
  export ARGOCD_CHECK=${ARGOCD_CHECK:-"true"}
        
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -A|--argocd-check)
        export ARGOCD_CHECK=$1 && shift
        ;;

      # AWS Secrets Manager Configuration
      --sm-aws-secret-region)
        export SM_AWS_REGION=$1
        export REGION_ID=$1
        shift
        ;;
      --sm-aws-access-key)
        export SM_AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --sm-aws-secret-key)
        export SM_AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;

      # cert manager
      --cert-manager-namespace)
        export CERT_MANAGER_NAMESPACE=$1 && shift
        ;;

      # MongoDb Provider Selection
      --mongo-provider)
        export MONGODB_PROVIDER=$1 && shift
        ;;

      # AWS MongoDb provider
      --user-action)
        export USER_ACTION=$1 && shift
        ;;

      # SLS
      --sls-channel)
        export SLS_CHANNEL=$1 && shift
        ;;

      # MAS
      --mas-annotations)
        export MAS_ANNOTATIONS=$1 && shift
        ;;
      --mas-channel)
        export MAS_CHANNEL=$1 && shift
        ;;
      --mas-domain)
        export MAS_DOMAIN=$1 && shift
        ;;
      --mas-image-tags)
        export MAS_IMAGE_TAGS=$1 && shift
        ;;
      --mas-labels)
        export MAS_LABELS=$1 && shift
        ;;
      --mas-manual-cert-mgmt)
        export MAS_MANUAL_CERT_MGMT=$1 && shift
        ;;

      # Target Cluster (Optional)
      --cluster-url)
        export CLUSTER_URL=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_suite_help
        ;;
      *)
        # unknown option
        gitops_suite_help "Usage Error: Unsupported option \"${key}\" "
        ;;
      esac
  done

  [[ -z "$ACCOUNT_ID" ]] && gitops_suite_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_suite_help "CLUSTER_ID is not set"
  [[ -z "$REGION_ID" && -z "$SM_AWS_REGION" ]] && gitops_cluster_help "REGION_ID or SM_AWS_REGION is not set"
  [[ -z "$CLUSTER_URL" ]] && gitops_cluster_help "CLUSTER_URL is not set"
  [[ -z "$MONGODB_PROVIDER" ]] && gitops_process_mongo_user_help "MONGODB_PROVIDER is not set"

  if [ $MONGODB_PROVIDER == 'aws' ]; then
    [[ -z "$USER_ACTION" ]] && gitops_process_mongo_user_help "USER_ACTION is not set"
    [[ -z "$MAS_INSTANCE_ID" ]] && gitops_process_mongo_user_help "MAS_INSTANCE_ID is not set"
    if [ -z $SM_AWS_ACCESS_KEY_ID ] || [ -z $SM_AWS_SECRET_ACCESS_KEY ] || [ -z $SM_AWS_REGION ]; then
      echo 'Missing required params for AWS mongo provider, make sure to provide --aws-access-key, --aws-secret-key, --aws-region'
      exit 1
    fi
  fi

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_suite_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_suite_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_suite_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_suite_help "GIT_BRANCH is not set"
  fi

}

function gitops_suite() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_suite_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_suite_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_INSTANCE_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${REGION_ID}/${CLUSTER_ID}/${MAS_INSTANCE_ID}

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h4 "Target" "    "
  echo_reset_dim "Account ID ..................... ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region ID ...................... ${COLOR_MAGENTA}${REGION_ID}"
  echo_reset_dim "Cluster ID ..................... ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Cluster URL .................... ${COLOR_MAGENTA}${CLUSTER_URL}"
  echo_reset_dim "MAS Instance ID ................ ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "Instance Config Directory ...... ${COLOR_MAGENTA}${GITOPS_INSTANCE_DIR}"
  echo_reset_dim "ArgoCD Check ................... ${COLOR_MAGENTA}${ARGOCD_CHECK}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h4 "AWS Secrets Manager" "    "
  echo_reset_dim "Region ......................... ${COLOR_MAGENTA}${SM_AWS_REGION}"
  echo_reset_dim "Secret Key ..................... ${COLOR_MAGENTA}${SM_AWS_ACCESS_KEY_ID:0:4}<snip>"
  echo_reset_dim "Access Key ..................... ${COLOR_MAGENTA}${SM_AWS_SECRET_ACCESS_KEY:0:4}<snip>"
  echo_reset_dim "Secrets Path ................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h4 "Mongo" "    "
  echo_reset_dim "Mongo Provider  ................ ${COLOR_MAGENTA}${MONGODB_PROVIDER}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h4 "IBM Suite License Service" "    "
  echo_reset_dim "Subscription Channel ........... ${COLOR_MAGENTA}${SLS_CHANNEL}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h4 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Subscription Channel ........... ${COLOR_MAGENTA}${MAS_CHANNEL}"
  echo_reset_dim "Domain ......................... ${COLOR_MAGENTA}${MAS_DOMAIN}"
  echo_reset_dim "Image Tags ..................... ${COLOR_MAGENTA}${MAS_IMAGE_TAGS}"
  echo_reset_dim "Annotations .................... ${COLOR_MAGENTA}${MAS_ANNOTATIONS}"
  echo_reset_dim "Labels ......................... ${COLOR_MAGENTA}${MAS_LABELS}"
  echo_reset_dim "MAS Manual Cert Mgt ............ ${COLOR_MAGENTA}${MAS_MANUAL_CERT_MGMT}"
  echo_reset_dim "Cert Manager Namespace ......... ${COLOR_MAGENTA}${CERT_MANAGER_NAMESPACE}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h4 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ................. ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory .............. ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host ........................... ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization ................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ..................... ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ......................... ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h4 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ................. ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory .............. ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  # Set up Suite secrets
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Configuring Suite secrets"
  AVP_TYPE=aws
  sm_login


  # Define cluster-level secrets used
  # ---------------------------------------------------------------------------
  # Note that this cluster-level secret is set up by gitops-cluster
  export SECRET_KEY_IBM_ENTITLEMENT=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}ibm_entitlement#image_pull_secret_b64
  
  export SECRET_NAME_AWS_ACCESS=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}aws
  export SECRET_KEY_AWS_ACCESS_KEY_ID=${SECRET_NAME_AWS_ACCESS}#sm_aws_access_key_id
  export SECRET_KEY_AWS_SECRET_ACCESS_KEY=${SECRET_NAME_AWS_ACCESS}#sm_aws_secret_access_key
  # The AWS secret is established by the gitops_cluster step

  # Get the cluster-level secrets used
  # ---------------------------------------------------------------------------
  # Note that this cluster-level secret is set up by gitops-mongo
  export SECRET_NAME_MASTER_MONGO=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}mongo
  export SECRET_KEY_DOCDB_HOST=${SECRET_NAME_MASTER_MONGO}#docdb_host
  export SECRET_KEY_DOCDB_PORT=${SECRET_NAME_MASTER_MONGO}#docdb_port
  export SECRET_KEY_DOCDB_MASTER_USERNAME=${SECRET_NAME_MASTER_MONGO}#username
  export SECRET_KEY_DOCDB_MASTER_PASSWORD=${SECRET_NAME_MASTER_MONGO}#password
  export SECRET_KEY_DOCDB_MASTER_INFO=${SECRET_NAME_MASTER_MONGO}#info

  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-suite
  rm -rf TEMP_DIR
  mkdir -p $TEMP_DIR

  # by default yaml. pass aws, in case if configuring with DocDB
  export MONGODB_PROVIDER=${MONGODB_PROVIDER:-"yaml"}

  export MONGO_SECRET_FILE=$TEMP_DIR/mongo-secret.json
  export MONGO_CONFIG_FILE=$TEMP_DIR/mongo-info.yaml

  sm_get_secret_file ${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}mongo $MONGO_SECRET_FILE

  jq -r .info $MONGO_SECRET_FILE > $MONGO_CONFIG_FILE
  MASTER_MONGO_USERNAME=$(jq -r .username $MONGO_SECRET_FILE)
  MASTER_MONGO_PASSWORD=$(jq -r .password $MONGO_SECRET_FILE)
  UNESCAPED_MONGO_INFO=$(jq -r .info $MONGO_SECRET_FILE)


  # Instance-level secrets to use
  # ---------------------------------------------------------------------------
  # Note that these instance-level secrets are set up by gitops-license
  export SECRET_KEY_LICENSE_FILE=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}license#license_file
  export LICENSE_FILE=$TEMP_DIR/license.lic
  sm_get_secret_file $SECRET_KEY_LICENSE_FILE $LICENSE_FILE

  # Set certs only if manual cert is True
  if [ "${MAS_MANUAL_CERT_MGMT}" = "True" ] ; then
    export PUBLIC_CERT_SECRET_NAME=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}certs${SECRETS_KEY_SEPERATOR}core
    export CERT_FILE=$TEMP_DIR/cert.yml
    export CA_CERT_FILE=$TEMP_DIR/ca_cert.yml
    export TLS_CERT_FILE=$TEMP_DIR/tls_cert.yml
    export TLS_KEY_FILE=$TEMP_DIR/tls_key.yml

    sm_get_secret_file $PUBLIC_CERT_SECRET_NAME $CERT_FILE
    jq -r .cert_ca $CERT_FILE > $CA_CERT_FILE
    jq -r .cert_tls $CERT_FILE > $TLS_CERT_FILE
    jq -r .tls_key $CERT_FILE > $TLS_KEY_FILE

    if [[ -n "$CA_CERT_FILE" ]]; then
      export CA_CERT=$(cat ${CA_CERT_FILE})
      echo_reset_dim "CA_CERT ............................... ${COLOR_MAGENTA}${CA_CERT}"
    fi
    if [[ -n "$TLS_CERT_FILE" ]]; then
      export TLS_CERT=$(cat ${TLS_CERT_FILE})
      echo_reset_dim "TLS_CERT .............................. ${COLOR_MAGENTA}${TLS_CERT}"
    fi
    if [[ -n "$TLS_KEY_FILE" ]]; then
      export TLS_KEY=$(cat ${TLS_KEY_FILE})
      echo_reset_dim "TLS_KEY ............................... ${COLOR_MAGENTA}${TLS_KEY}"
    fi
  fi
  # Instance-level secrets to create
  # ---------------------------------------------------------------------------
  export SECRET_NAME_MONGO=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}mongo
  export SECRET_KEY_MONGO_USERNAME=${SECRET_NAME_MONGO}#username
  export SECRET_KEY_MONGO_PASSWORD=${SECRET_NAME_MONGO}#password
  export SECRET_KEY_MONGO_INFO=${SECRET_NAME_MONGO}#info

  
  export MONGO_INSTANCE_SECRET_FILE=$TEMP_DIR/mongo-instance-secret.json
  sm_get_secret_file ${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}mongo $MONGO_INSTANCE_SECRET_FILE
  INSTANCE_MONGO_USERNAME=$(jq -r .username $MONGO_INSTANCE_SECRET_FILE)
  INSTANCE_MONGO_PASSWORD=$(jq -r .password $MONGO_INSTANCE_SECRET_FILE)

  # Setting mongo instance secret with info field copied from the cluster level secret, 
  # Instance username and password will be created in presync hook 

  ESCAPED_INFO=${UNESCAPED_MONGO_INFO//\"/\\\"}
  ESCAPED_INFO=${ESCAPED_INFO//$'\n'/\\n}
  sm_update_secret $SECRET_NAME_MONGO "{\"info\": \"$ESCAPED_INFO\", \"username\": \"$INSTANCE_MONGO_USERNAME\", \"password\": \"$INSTANCE_MONGO_PASSWORD\"}"

  if [ -z $GIT_SSH ]; then
    export GIT_SSH="false"
  fi


  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_INSTANCE_DIR}


  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Generating Argo Project and Applications"

  echo "- Base Config"
  jinja -X .+ $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-mas-instance-base.yaml.j2 -o ${GITOPS_INSTANCE_DIR}/ibm-mas-instance-base.yaml

  echo "- IBM Suite License Service"
  jinja -X .+ -d $MONGO_CONFIG_FILE $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-sls.yaml.j2 -o ${GITOPS_INSTANCE_DIR}/ibm-sls.yaml

  echo "- IBM Maximo Application Suite Core Platform"
  jinja -X .+ $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-mas-suite.yaml.j2 -o ${GITOPS_INSTANCE_DIR}/ibm-mas-suite.yaml


  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then

    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_INSTANCE_DIR "${GIT_COMMIT_MSG}"
    remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO

    if [ "${ARGOCD_CHECK}" == "true" ]; then
      CLUSTER_ROOT_APP="cluster.${ACCOUNT_ID}.${REGION_ID}.${CLUSTER_ID}"
      INSTANCE_ROOT_APP="instance.${ACCOUNT_ID}.${REGION_ID}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"
      SUITE_APP_NAME="suite.${ACCOUNT_ID}.${REGION_ID}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"
      SLS_APP_NAME="sls.${ACCOUNT_ID}.${REGION_ID}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"

      argocd_login
      argocd_sync "${CLUSTER_ROOT_APP}" ## trigger the instance appset to pick up the new config files
      check_argo_app_synced "${INSTANCE_ROOT_APP}"  "${CLUSTER_ROOT_APP}" # wait for the instance root app to sync

      # ensure the Vault plugin picks up latest secrets from AWS SM
      argocd_hard_refresh "${SUITE_APP_NAME}"
      argocd_hard_refresh "${SLS_APP_NAME}"

      # Wait for SLS to sync and become healthy
      argocd_sync "${SLS_APP_NAME}"
      check_argo_app_synced "${SLS_APP_NAME}" "${INSTANCE_ROOT_APP}" mas-${MAS_INSTANCE_ID}-sls
      check_argo_app_healthy "${SLS_APP_NAME}" "${INSTANCE_ROOT_APP}"

      # Wait for Suite to become healthy
      # health check of suite will be done in gitops_suite_config (suite will not be healthy until core configs are established)
      argocd_sync "${SUITE_APP_NAME}"
      check_argo_app_synced "${SUITE_APP_NAME}" "${INSTANCE_ROOT_APP}" mas-${MAS_INSTANCE_ID}-core
    fi


  fi


}

#!/usr/bin/env bash

function gitops_db2u_jdbc_config_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_db2u_jdbc_config [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}    Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -r, --region-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}             Region ID
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID
  -A, --argocd-check ${COLOR_YELLOW}ARGOCD_CHECK${TEXT_RESET}        ArgoCD check flag, when set to true, will make ArgoCD calls

IBM Maximo Application Suite:
      -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}   IBM Suite Maximo Application Suite Instance ID      
      --mas-app-id ${COLOR_YELLOW}MAS_APP_ID${TEXT_RESET}                 IBM Suite Maximo Application Suite App that will use this db2u instance      
      --mas-workspace-id ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}     MAS WORKSPACE ID

IBM DB2U:                       
      --tls-version ${COLOR_YELLOW}TLS_VERSION${TEXT_RESET}                                       TLS Version
      --db2-ldap-username ${COLOR_YELLOW}DB2_LDAP_USERNAME${TEXT_RESET}                           DB2 LDAP Username to create
      --db2-ldap-password ${COLOR_YELLOW}DB2_LDAP_PASSWORD${TEXT_RESET}                           DB2 LDAP Password to create

IBM DB2U JDBC Configuration:
      --mas-config-scope ${COLOR_YELLOW}MAS_CONFIG_SCOPE${TEXT_RESET}             Supported values are 'system', 'ws', 'app', or 'wsapp'

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                     Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}   Secrets Manager key seperator string      

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_db2u_jdbc_config_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-db2u-jdbc-config commit"
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}

  # TODO: will need to add explicit args to pipeline when we start using this code to deploy to MCSP
  export REGION=${REGION:-${SM_AWS_REGION}}
  export CLUSTER_URL=${CLUSTER_URL:-"https://kubernetes.default.svc"} # use an in-cluster argocd worker (which fvtsaas does)
  # alternatively for CLUSTER_URL, we could look it up from ArgoCD like this:
  # export CLUSTER_URL
  # argocd_get_cluster_url "${CLUSTER_ID}" "CLUSTER_URL"

  export ARGOCD_CHECK=${ARGOCD_CHECK:-"true"}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -r|--region)
        export REGION=$1 && shift
        ;;
      -u|--cluster-url)
        export CLUSTER_URL=$1 && shift
        ;;
      -A|--argocd-check)
        export ARGOCD_CHECK=$1 && shift
        ;;

      # MAS
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -W|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      --mas-app-id)
        export MAS_APP_ID=$1 && shift
        ;;
      --mas-config-scope)
        export MAS_CONFIG_SCOPE=$1 && shift
        ;;      

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;

      # DB2
      --tls-version )
        export TLS_VERSION=$1 && shift
        ;;
      --db2-ldap-username )
        export DB2_LDAP_USERNAME=$1 && shift
        ;;
      --db2-ldap-password )
        export DB2_LDAP_PASSWORD=$1 && shift
        ;;
      --db2-internal )
        export DB2_INTERNAL=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_db2u_jdbc_config_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_db2u_jdbc_config_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$SM_AWS_ACCESS_KEY_ID" ]] &&  gitops_db2u_jdbc_config_help "SM_AWS_ACCESS_KEY_ID is not set"
  [[ -z "$SM_AWS_SECRET_ACCESS_KEY" ]] && gitops_db2u_jdbc_config_help "SM_AWS_SECRET_ACCESS_KEY is not set"
  [[ -z "$SM_AWS_REGION" ]] && gitops_db2u_jdbc_config_help "SM_AWS_REGION is not set"

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_db2u_jdbc_config_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_db2u_jdbc_config_help "ACCOUNT_ID is not set"
  [[ -z "$REGION" ]] && gitops_db2u_jdbc_config_help "REGION is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_db2u_jdbc_config_help "CLUSTER_ID is not set"
  
  #MAS
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_db2u_jdbc_config_help "MAS_INSTANCE_ID is not set"
  [[ -z "$MAS_CONFIG_SCOPE" ]] && gitops_db2u_jdbc_config_help "MAS_CONFIG_SCOPE is not set"
  if [[ "$MAS_CONFIG_SCOPE" == "wsapp" || "$MAS_CONFIG_SCOPE" == "ws" ]]; then
    [[ -z "$MAS_WORKSPACE_ID" ]] && gitops_db2u_jdbc_config_help "MAS_WORKSPACE_ID is not set"
  fi
  [[ -z "$MAS_APP_ID" ]] && gitops_db2u_jdbc_config_help "MAS_APP_ID is not set"

  [[ -z "$DB2_LDAP_USERNAME" ]] && gitops_db2u_jdbc_config_help "DB2_LDAP_USERNAME is not set"
  [[ -z "$DB2_LDAP_PASSWORD" ]] && gitops_db2u_jdbc_config_help "DB2_LDAP_PASSWORD is not set"
  
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_db2u_jdbc_config_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_db2u_jdbc_config_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_db2u_jdbc_config_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_db2u_jdbc_config_help "GIT_BRANCH is not set"
  fi

}


function gitops_db2u_jdbc_config() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_db2u_jdbc_config_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_db2u_jdbc_config_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  rm -rf $GITOPS_WORKING_DIR/$GITHUB_REPO
  GITOPS_INSTANCE_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${REGION}/${CLUSTER_ID}/${MAS_INSTANCE_ID}


  #Defaults
  if [[ -z $DB2_DBNAME ]]; then
    export DB2_DBNAME=BLUDB
  fi
  export DB2_INSTANCE_NAME=db2wh-${MAS_INSTANCE_ID}-${MAS_APP_ID}
  export DB2_NAMESPACE=db2u
  export TLS_VERSION=${TLS_VERSION:-"TLSv1.2"}
  # by default db2 internal is true, set it to false if db2 is external
  export DB2_INTERNAL=${DB2_INTERNAL:-"true"}

  echo
  reset_colors
  echo_h2 "Review Settings "

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region ................................ ${COLOR_MAGENTA}${REGION}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Config Directory ...................... ${COLOR_MAGENTA}${GITOPS_INSTANCE_DIR}"
  echo_reset_dim "ArgoCD Check .......................... ${COLOR_MAGENTA}${ARGOCD_CHECK}"

  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path ............................ ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "MAS Instance ID ......................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "MAS_CONFIG_SCOPE ........................ ${COLOR_MAGENTA}${MAS_CONFIG_SCOPE}"
  echo_reset_dim "MAS_WORKSPACE_ID ........................ ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
  echo_reset_dim "MAS_APP_ID .............................. ${COLOR_MAGENTA}${MAS_APP_ID}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "DB2 Cluster Configuration" "    "
  echo_reset_dim "db2-instance-name ....................... ${COLOR_MAGENTA}${DB2_INSTANCE_NAME}"
  echo_reset_dim "db2-dbname  ............................. ${COLOR_MAGENTA}${DB2_DBNAME}"
  echo_reset_dim "TLS_VERSION ............................. ${COLOR_MAGENTA}${TLS_VERSION}"
  echo_reset_dim "DB2_LDAP_USERNAME ....................... ${COLOR_MAGENTA}${DB2_LDAP_USERNAME}"
  echo_reset_dim "DB2_LDAP_PASSWORD ....................... ${COLOR_MAGENTA}${DB2_LDAP_PASSWORD:0:4}<snip>"
  reset_colors


  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login

  # Set by postsync job in ibm-common-services chart
  # This is a workaround for the fact that we cannot interact with the cluster directly (see https://jsw.ibm.com/browse/MASCORE-1425)
  # NOTE: this isn't a secret value, so it's safe to fetch it here and embed it in our config in the clear
  echo "Fetching cluster domain from Secrets manager"
  export CLUSTER_DOMAIN=`oc get ingress.config.openshift.io  cluster -o=jsonpath='{.spec.domain}'`
  export SECRET_NAME_CLUSTER_DOMAIN=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}cluster_domain
  export CLUSTER_DOMAIN=$(sm_get_secret_value ${SECRET_NAME_CLUSTER_DOMAIN} "cluster_domain")
  echo "cluster domain: ${CLUSTER_DOMAIN}"
  if [[ -z "${CLUSTER_DOMAIN}" ]]; then
    echo "Failed to fetch cluster domain from secrets manager"
    exit
  fi

  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-db2u-jdbc-config
  mkdir -p $TEMP_DIR


  if [ -z $GIT_SSH ]; then
    export GIT_SSH=false
  fi
  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_INSTANCE_DIR}


  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Generating DB2U JDBC Configuraton"


  echo
  if [[ "$MAS_CONFIG_SCOPE" == "app" ]]; then
      echo_reset_dim "${COLOR_RED} App-level JDBC configuration not supported yet"
      exit 1
  elif [[ "$MAS_CONFIG_SCOPE" == "system" ]]; then
    export SUITE_JDBCCFG_NAME="system.ibm-mas-jdbc-config"
    export JDBCCFG_DIR="${GITOPS_INSTANCE_DIR}/configs"
    export JDBCCFG_FILENAME="${SUITE_JDBCCFG_NAME}.yaml"
    export JDBCCFG_TEMPLATE="$CLI_DIR/templates/gitops/appset-configs/cluster/instance/configs/ibm-mas-jdbc-config.yaml.j2"
  elif [[ "$MAS_CONFIG_SCOPE" == "ws" ]]; then
      echo_reset_dim "${COLOR_RED} Workspace-level JDBC configuration not supported yet"
      exit 1
  elif [[ "$MAS_CONFIG_SCOPE" == "wsapp" ]]; then
    export SUITE_JDBCCFG_NAME="wsapp.${MAS_WORKSPACE_ID}.${MAS_APP_ID}.ibm-mas-jdbc-config"
    export JDBCCFG_DIR="${GITOPS_INSTANCE_DIR}/configs"
    export JDBCCFG_FILENAME="${SUITE_JDBCCFG_NAME}.yaml"
    export JDBCCFG_TEMPLATE="$CLI_DIR/templates/gitops/appset-configs/cluster/instance/configs/ibm-mas-jdbc-config.yaml.j2"
  fi
  
  mkdir -p "${JDBCCFG_DIR}"


  # Create a secret in SM containing the username/password for this specific DB2 database instance.
  # A presync hook on the jdbccfg chart will take care of ensuring the user added to the database's LDAP registry
  export DB2_CREDENTIALS_SECRET_ID=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}db2${SECRETS_KEY_SEPERATOR}${DB2_INSTANCE_NAME}${SECRETS_KEY_SEPERATOR}credentials
  echo_reset_dim "DB2_CREDENTIALS_SECRET_ID ......................... ${COLOR_MAGENTA}$DB2_CREDENTIALS_SECRET_ID"
  sm_update_secret $DB2_CREDENTIALS_SECRET_ID "{ \"username\": \"$DB2_LDAP_USERNAME\", \"password\": \"$DB2_LDAP_PASSWORD\"}"
  export SECRET_KEY_DB2_USERNAME=${DB2_CREDENTIALS_SECRET_ID}#username
  export SECRET_KEY_DB2_PASSWORD=${DB2_CREDENTIALS_SECRET_ID}#password


  # Fetch the CA and target port for the instance set by the postsync job in the ibm-db2u-database chart
  # Note: these aren't really secrets, so we can safely fetch them here and embed them in the generated config file as plaintext.
  # We just use SM as a means for passing this runtime-generated value from the cluster as a workaround for the fact that we cannot interact with the cluster directly here.
  # See https://jsw.ibm.com/browse/MASCORE-1425
  export DB2_CONFIG_SECRET_ID=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}db2${SECRETS_KEY_SEPERATOR}${DB2_INSTANCE_NAME}${SECRETS_KEY_SEPERATOR}config
  export DB2_CA_PEM=$(sm_get_secret_value ${DB2_CONFIG_SECRET_ID} "ca_b64")
  export DB2_TLS_SERVICEPORT=$(sm_get_secret_value ${DB2_CONFIG_SECRET_ID} "tls_serviceport")
  export JDBC_URL="jdbc:db2://c-${DB2_INSTANCE_NAME}-db2u-engn-svc.${DB2_NAMESPACE}.svc:${DB2_TLS_SERVICEPORT}/${DB2_DBNAME}:sslConnection=true;sslVersion=${TLS_VERSION};"

  echo_reset_dim "......................................... ${COLOR_MAGENTA}"
  echo_reset_dim ""
  echo_reset_dim "DB2_INSTANCE_NAME ....................... ${COLOR_MAGENTA}${DB2_INSTANCE_NAME}"
  echo_reset_dim "DB2_NAMESPACE ........................... ${COLOR_MAGENTA}$DB2_NAMESPACE"
  echo_reset_dim "DB2_CA_PEM .............................. ${COLOR_MAGENTA}$DB2_CA_PEM"    
  echo_reset_dim "DB2_DBNAME .............................. ${COLOR_MAGENTA}$DB2_DBNAME"
  echo_reset_dim "TLS_VERSION ............................. ${COLOR_MAGENTA}$TLS_VERSION"
  echo_reset_dim "DB2_TLS_SERVICEPORT ..................... ${COLOR_MAGENTA}$DB2_TLS_SERVICEPORT"
  echo_reset_dim "JDBC_URL ................................ ${COLOR_MAGENTA}$JDBC_URL"
  echo_reset_dim "SUITE_JDBCCFG_NAME ...................... ${COLOR_MAGENTA}$SUITE_JDBCCFG_NAME"
  echo_reset_dim "JDBCCFG_DIR ............................. ${COLOR_MAGENTA}$JDBCCFG_DIR"
  echo_reset_dim "JDBCCFG_FILENAME ........................ ${COLOR_MAGENTA}$JDBCCFG_FILENAME"  
  echo_reset_dim "......................................... ${COLOR_MAGENTA}"
  echo_reset_dim ""
  reset_colors


  echo
  echo_reset_dim "Generating DB2U JDBC Config file ${JDBCCFG_DIR}/${JDBCCFG_FILENAME}"
  jinja -X .+ $JDBCCFG_TEMPLATE -o "${JDBCCFG_DIR}/${JDBCCFG_FILENAME}"

  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_INSTANCE_DIR "${GIT_COMMIT_MSG}"

    if [ "${ARGOCD_CHECK}" == "true" ]; then
      argocd_login

      if [[ "$MAS_CONFIG_SCOPE" == "system" ]]; then
        CLUSTER_ROOT_APP="cluster.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}"
        INSTANCE_ROOT_APP="instance.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"
        JDBC_CONFIG_APP="${MAS_INSTANCE_ID}-jdbc-system.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"
        argocd_sync "${INSTANCE_ROOT_APP}" ## trigger the config appset to pick up the new config files
        check_argo_app_synced "${INSTANCE_ROOT_APP}" "${CLUSTER_ROOT_APP}" # wait for the instance root app to sync

        argocd_hard_refresh "${JDBC_CONFIG_APP}"
        check_argo_app_synced "${JDBC_CONFIG_APP}" "${INSTANCE_ROOT_APP}"
        check_argo_app_healthy "${JDBC_CONFIG_APP}" "${INSTANCE_ROOT_APP}"
      elif [[ "$MAS_CONFIG_SCOPE" == "wsapp" ]]; then

        CLUSTER_ROOT_APP="cluster.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}"
        INSTANCE_ROOT_APP="instance.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"
        JDBC_CONFIG_APP="${MAS_INSTANCE_ID}-jdbc-wsapp-${MAS_WORKSPACE_ID}-${MAS_APP_ID}-configs.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"
        argocd_sync "${INSTANCE_ROOT_APP}" # trigger the config appset to pick up the new config files
        check_argo_app_synced "${INSTANCE_ROOT_APP}" "${CLUSTER_ROOT_APP}" # wait for the instance root app to sync

        argocd_hard_refresh "${JDBC_CONFIG_APP}"
        check_argo_app_synced "${JDBC_CONFIG_APP}" "${INSTANCE_ROOT_APP}"
        check_argo_app_healthy "${JDBC_CONFIG_APP}" "${INSTANCE_ROOT_APP}"
    fi

    fi

  fi
  if [ "$GITHUB_PUSH" == "true" ]; then  
	  remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO
  fi
  exit 0
}

#!/usr/bin/env bash

function gitops_odh_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_odh [options]

Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -r, --region-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}             Region ID
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID
  -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}  IBM Suite Maximo Application Suite Instance ID

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                    Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}  Secrets Manager key seperator string

ODH Configuration:
      --odh-channel
      --odh-catalog-source
      --odh-operator-version
      --odh-namespace
      --pull-secret-name
      --opendatahub-name
      --opendatahub-operator-group
      --opendatahub-installplan
      --opendatahub-channel
      --opendatahub-source
      --opendatahub-source-namespace

Pipeline Configuration:
      --odh-pipeline-name
      --odh-pipeline-namespace
      --odh-pipeline-operator-name
      --odh-pipeline-source
      --odh-pipeline-source-namespace
      --odh-pipeline-channel
      --odh-pipeline-installplan
      --pipeline-catalog-source

Service Mesh:
      --service-mesh-namespace
      --service-mesh-channel
      --service-mesh-catalog-source
      --service-mesh-source-namespace

Serverless:
      --serverless-namespace
      --serverless-channel
      --serverless-operator-name
      --serverless-operator-source
      --serverless-operator-source-namespace

Authorino:
      --authorino-catalog-source

Storage:
      --storage-provider
      --storage-accesskey
      --storage-secretkey
      --storage-host
      --storage-port
      --storage-ssl
      --storage-region
      --pipelines-bucket
      --primary-storage-class

Database:
      --db-host
      --db-port
      --db-user
      --db-database
      --db-secret-name
      --db-secret-value

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}


function gitops_odh_noninteractive() {
  GIT_COMMIT_MSG="gitops-odh commit"
  while [[ $# -gt 0 ]]; do
    key="$1"; shift
    case $key in
      -d|--dir) export GITOPS_WORKING_DIR="$1"; shift ;;
      -a|--account-id) export ACCOUNT_ID="$1"; shift ;;
      -c|--cluster-id) export CLUSTER_ID="$1"; shift ;;
      -m|--mas-instance-id) export MAS_INSTANCE_ID="$1"; shift ;;

      # ODH
      --odh-channel) export ODH_CHANNEL="$1"; shift ;;
      --odh-catalog-source) export ODH_CATALOG_SOURCE="$1"; shift ;;
      --odh-operator-version) export ODH_OPERATOR_VERSION="$1"; shift ;;
      --odh-namespace) export ODH_NAMESPACE="$1"; shift ;;
      --pull-secret-name) export PULL_SECRET_NAME="$1"; shift ;;
      --opendatahub-name) export OPENDATAHUB_NAME="$1"; shift ;;
      --opendatahub-operator-group) export OPENDATAHUB_OPERATOR_GROUP_NAME="$1"; shift ;;
      --opendatahub-installplan) export OPENDATAHUB_INSTALLPLAN_APPROVAL="$1"; shift ;;
      --opendatahub-channel) export OPENDATAHUB_CHANNEL="$1"; shift ;;
      --opendatahub-source) export OPENDATAHUB_SOURCE="$1"; shift ;;
      --opendatahub-source-namespace) export OPENDATAHUB_SOURCE_NAMESPACE="$1"; shift ;;

      # Pipeline
      --odh-pipeline-name) export ODH_PIPELINE_NAME="$1"; shift ;;
      --odh-pipeline-namespace) export ODH_PIPELINE_NAMESPACE="$1"; shift ;;
      --odh-pipeline-operator-name) export ODH_PIPELINE_OPERATOR_NAME="$1"; shift ;;
      --odh-pipeline-source) export ODH_PIPELINE_SOURCE="$1"; shift ;;
      --odh-pipeline-source-namespace) export ODH_PIPELINE_SOURCE_NAMESPACE="$1"; shift ;;
      --odh-pipeline-channel) export ODH_PIPELINE_CHANNEL="$1"; shift ;;
      --odh-pipeline-installplan) export ODH_PIPELINE_INSTALLPLAN="$1"; shift ;;
      --pipeline-catalog-source) export PIPELINE_CATALOG_SOURCE="$1"; shift ;;

      # Service Mesh
      --service-mesh-namespace) export SERVICE_MESH_NAMESPACE="$1"; shift ;;
      --service-mesh-channel) export SERVICE_MESH_CHANNEL="$1"; shift ;;
      --service-mesh-catalog-source) export SERVICE_MESH_CATALOG_SOURCE="$1"; shift ;;
      --service-mesh-source-namespace) export SERVICE_MESH_SOURCE_NAMESPACE="$1"; shift ;;

      # Serverless
      --serverless-namespace) export SERVERLESS_NAMESPACE="$1"; shift ;;
      --serverless-channel) export SERVERLESS_CHANNEL="$1"; shift ;;
      --serverless-operator-name) export SERVERLESS_OPERATOR_NAME="$1"; shift ;;
      --serverless-operator-source) export SERVERLESS_OPERATOR_SOURCE="$1"; shift ;;
      --serverless-operator-source-namespace) export SERVERLESS_OPERATOR_SOURCE_NAMESPACE="$1"; shift ;;

      # Authorino
      --authorino-catalog-source) export AUTHORINO_CATALOG_SOURCE="$1"; shift ;;

      # Storage
      --storage-provider) export MAS_AIBROKER_STORAGE_PROVIDER="$1"; shift ;;
      --storage-accesskey) export MAS_AIBROKER_STORAGE_ACCESSKEY="$1"; shift ;;
      --storage-secretkey) export MAS_AIBROKER_STORAGE_SECRETKEY="$1"; shift ;;
      --storage-host) export MAS_AIBROKER_STORAGE_HOST="$1"; shift ;;
      --storage-port) export MAS_AIBROKER_STORAGE_PORT="$1"; shift ;;
      --storage-ssl) export MAS_AIBROKER_STORAGE_SSL="$1"; shift ;;
      --storage-region) export MAS_AIBROKER_STORAGE_REGION="$1"; shift ;;
      --pipelines-bucket) export MAS_AIBROKER_STORAGE_PIPELINES_BUCKET="$1"; shift ;;
      --primary-storage-class) export PRIMARY_STORAGE_CLASS="$1"; shift ;;

      # Database
      --db-host) export MAS_AIBROKER_DB_HOST="$1"; shift ;;
      --db-port) export MAS_AIBROKER_DB_PORT="$1"; shift ;;
      --db-user) export MAS_AIBROKER_DB_USER="$1"; shift ;;
      --db-database) export MAS_AIBROKER_DB_DATABASE="$1"; shift ;;
      --db-secret-name) export MAS_AIBROKER_DB_SECRET_NAME="$1"; shift ;;
      --db-secret-value) export MAS_AIBROKER_DB_SECRET_VALUE="$1"; shift ;;

      # GitHub
      -P|--github-push) export GITHUB_PUSH=true ;;
      -H|--github-host) export GITHUB_HOST="$1"; shift ;;
      -O|--github-org) export GITHUB_ORG="$1"; shift ;;
      -R|--github-repo) export GITHUB_REPO="$1"; shift ;;
      -B|--git-branch) export GIT_BRANCH="$1"; shift ;;
      -M|--git-commit-msg) export GIT_COMMIT_MSG="$1"; shift ;;
      -S|--github-ssh) export GIT_SSH="$1"; shift ;;

      -h|--help) gitops_odh_help ;;
      *) gitops_odh_help "Unknown option $key" ;;
    esac
  done

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_odh_help "Missing GITOPS_WORKING_DIR"
  [[ -z "$ACCOUNT_ID" ]] && gitops_odh_help "Missing ACCOUNT_ID"
  [[ -z "$CLUSTER_ID" ]] && gitops_odh_help "Missing CLUSTER_ID"
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_odh_help "Missing MAS_INSTANCE_ID"
}

function gitops_odh() {
  shift
  if [[ $# -gt 0 ]]; then
    gitops_odh_noninteractive "$@"
  else
    echo "Interactive mode not implemented."
    exit 1
  fi

  mkdir -p "$GITOPS_WORKING_DIR"
  GITOPS_INSTANCE_DIR="${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${CLUSTER_ID}/${MAS_INSTANCE_ID}"
  mkdir -p "$GITOPS_INSTANCE_DIR"

  echo
  echo_h2 "Generating OpenDataHub GitOps YAML"
  echo "Output: ${GITOPS_INSTANCE_DIR}/ibm-mas-odh-install.yaml"

  jinjanate_commmon "$CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-mas-odh-install.yaml.j2" "${GITOPS_INSTANCE_DIR}/ibm-mas-odh-install.yaml"

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "Pushing changes to GitHub"
    save_to_target_git_repo "$GITHUB_HOST" "$GITHUB_ORG" "$GITHUB_REPO" "$GIT_BRANCH" "${GITOPS_WORKING_DIR}/${GITHUB_REPO}" "$GIT_COMMIT_MSG"
    remove_git_repo_clone "$GITOPS_WORKING_DIR/$GITHUB_REPO"
  fi
}

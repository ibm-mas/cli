#!/bin/bash

function mirror_to_registry() {
  echo
  echo_h2 "1. Configure Target Mirror"
  prompt_for_input "Mirror Registry Host" REGISTRY_PUBLIC_HOST && export REGISTRY_PUBLIC_HOST
  prompt_for_input "Mirror Registry Port" REGISTRY_PUBLIC_PORT && export REGISTRY_PUBLIC_PORT

  echo
  echo_h2 "2. Configure Authentication"
  prompt_for_input "Mirror Registry Username" REGISTRY_USERNAME && export REGISTRY_USERNAME
  prompt_for_input "Mirror Registry Password" REGISTRY_PASSWORD && export REGISTRY_PASSWORD

  echo
  echo_h2 "2. Configure Images to Mirror"
  echo "${TEXT_DIM}"
  echo "Timing are an estimate only, and will vary based on the quality of the host network connection"
  reset_colors
  # These playbooks aren't available in ansible-airgap repository so we can't use there here yet
  # prompt_for_confirm "OpenShift Release Images" MIRROR_OPENSHIFT_RELEASE
  # if [[ $MIRROR_OPENSHIFT_RELEASE == "true" ]]; then
  #   prompt_for_input "Red Hat OpenShift Release" OPENSHIFT_RELEASE
  #   export OPENSHIFT_RELEASE
  # fi
  # prompt_for_confirm "OpenShift standard operator catalogs" MIRROR_OPENSHIFT_OPERATORS
  # if [[ $MIRROR_OPENSHIFT_OPERATORS == "true" ]]; then
  #   prompt_for_input "Red Hat OpenShift standard operator catalogs version" OPENSHIFT_OPERATORS
  #   export OPENSHIFT_OPERATORS
  # fi
  prompt_for_confirm "Mirror all images (~1 hour)" MIRROR_EVERYTHING

  if [[ "$MIRROR_EVERYTHING" == "true" ]]; then
    MIRROR_RH_RELEASE=true
    prompt_for_input "Red Hat Openshift Release Version (x.y)" OPENSHIFT_RELEASE_VERSION "4.10"

    MIRROR_RH_OPERATORS=true
    prompt_for_input "Red Hat Openshift Operators Version (x.y.z)" OPENSHIFT_OPERATORS_VERSION "4.10.18"

    MIRROR_COMMONSERVICES=true
    MIRROR_UDS=true
    MIRROR_SLS=true
    MIRROR_TRUSTSTOREMGR=true
    MIRROR_MAS_CORE=true
    MIRROR_MAS_IOT=true
    MIRROR_MAS_MANAGE=true
    MIRROR_MAS_MONITOR=true
    MIRROR_MAS_VI=true
    MIRROR_THIRDPARTY=true
  else
    prompt_for_confirm "Red Hat OpenShift Container Platform Release (x minutes)" MIRROR_RH_RELEASE
    prompt_for_input "Release Version (x.y)" OPENSHIFT_RELEASE_VERSION "4.10"

    prompt_for_confirm "Red Hat OpenShift Container Platform Operators (x minutes)" MIRROR_RH_OPERATORS
    prompt_for_input "Operator Version (x.y.z)" OPENSHIFT_OPERATORS_VERSION "4.10.18"

    prompt_for_confirm "IBM Foundational Services (10 minutes)" MIRROR_COMMONSERVICES
    prompt_for_confirm "IBM Db2 Universal Operator (5 minutes)" MIRROR_DB2
    prompt_for_confirm "IBM User Data Services (5 minutes)" MIRROR_UDS
    prompt_for_confirm "IBM Suite License Service (2 minutes)" MIRROR_SLS
    prompt_for_confirm "IBM Truststore Manager (1 minute)" MIRROR_TRUSTSTOREMGR
    prompt_for_confirm "IBM Maximo Application Suite - Core (5 minutes)" MIRROR_MAS_CORE
    # prompt_for_confirm "IBM Maximo Application Suite - Assist (x minutes)" MIRROR_MAS_ASSIST
    # prompt_for_confirm "IBM Maximo Application Suite - Health & Predict Utilities (x minutes)" MIRROR_MAS_HPU
    prompt_for_confirm "IBM Maximo Application Suite - IoT (10 minutes)" MIRROR_MAS_IOT
    prompt_for_confirm "IBM Maximo Application Suite - Manage (5 minutes)" MIRROR_MAS_MANAGE
    prompt_for_confirm "IBM Maximo Application Suite - Monitor (5 minutes)" MIRROR_MAS_MONITOR
    # prompt_for_confirm "IBM Maximo Application Suite - Predict (x minutes)" MIRROR_MAS_PREDICT
    prompt_for_confirm "IBM Maximo Application Suite - Visual Inspection (10 minutes)" MIRROR_MAS_VI
    prompt_for_confirm "Third Party Content (x minutes)" MIRROR_THIRDPARTY
  fi

  echo
  echo_h2 "3. Configure Authentication for Mirroring"
  prompt_for_input "IBM Entitlement Key" IBM_ENTITLEMENT_KEY
  export IBM_ENTITLEMENT_KEY
  if [[ $MIRROR_UDS == "true" ]]; then
    prompt_for_input "Red Hat Connect Username" REDHAT_CONNECT_USERNAME
    prompt_for_input "Red Hat Connect Password" REDHAT_CONNECT_PASSWORD
    export REDHAT_CONNECT_USERNAME
    export REDHAT_CONNECT_PASSWORD
  fi

  echo
  prompt_for_confirm "Proceed with these settings" || exit 0

  echo
  echo_h2 "4. Run Mirror Process"
  # These playbooks aren't available in ansible-airgap repository so we can't use there here yet
  # prompt_for_confirm "Mirror OpenShift Release Images" MIRROR_OPENSHIFT_RELEASE
  # [ "$MIRROR_OPENSHIFT_RELEASE" == "true" ] && ansible-playbook ibm.mas_airgap.mirror_openshift_release
  # [ "$MIRROR_OPENSHIFT_OPERATORS" == "true" ] && ansible-playbook ibm.mas_airgap.mirror_openshift_operators
  TIMESTAMP=$(date "+%Y%m%d-%H%M%S")
  LOG_PREFIX="$DIR/mirror-$TIMESTAMP"
  [ "$MIRROR_RH_RELEASE" == "true" ]      && echo "Mirroring Red Hat OCP Release Images ..." && ansible-playbook ibm.mas_airgap.mirror_openshift_release &> $LOG_PREFIX-ocp-release.log
  [ "$MIRROR_RH_OPERATORS" == "true" ]    && echo "Mirroring Red Hat OCP Operator Images ..." && ansible-playbook ibm.mas_airgap.mirror_openshift_operators &> $LOG_PREFIX-ocp-operators.log

  [ "$MIRROR_COMMONSERVICES" == "true" ]  && echo "Mirroring IBM Foundational Services Images ..." && ansible-playbook ibm.mas_airgap.mirror_common_services &> $LOG_PREFIX-foundation-services.log
  [ "$MIRROR_DB2" == "true" ]             && echo "Mirroring IBM Db2 Universal Operator Images ..." && ansible-playbook ibm.mas_airgap.mirror_db2uoperator &> $LOG_PREFIX-db2u.log
  [ "$MIRROR_UDS" == "true" ]             && echo "Mirroring IBM User Data Services Images ..." && ansible-playbook ibm.mas_airgap.mirror_uds &> $LOG_PREFIX-uds.log
  [ "$MIRROR_SLS" == "true" ]             && echo "Mirroring IBM Suite License Service Images ..." && ansible-playbook ibm.mas_airgap.mirror_sls &> $LOG_PREFIX-sls.log
  [ "$MIRROR_TRUSTSTOREMGR" == "true" ]   && echo "Mirroring IBM Truststore Manager Images ..." && ansible-playbook ibm.mas_airgap.mirror_truststore_mgr &> $LOG_PREFIX-truststore-mgr.log
  [ "$MIRROR_MAS_CORE" == "true" ]        && echo "Mirroring IBM Maximo Application Suite (Core) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_core &> $LOG_PREFIX-mas-core.log
  [ "$MIRROR_MAS_ASSIST" == "true" ]      && echo "Mirroring IBM Maximo Application Suite (Assist) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_assist &> $LOG_PREFIX-mas-assist.log
  [ "$MIRROR_MAS_HPU" == "true" ]         && echo "Mirroring IBM Maximo Application Suite (HP Utilities) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_hputilities &> $LOG_PREFIX-mas-hputilities.log
  [ "$MIRROR_MAS_IOT" == "true" ]         && echo "Mirroring IBM Maximo Application Suite (IoT) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_iot &> $LOG_PREFIX-mas-iot.log
  [ "$MIRROR_MAS_MANAGE" == "true" ]      && echo "Mirroring IBM Maximo Application Suite (Manage) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_manage &> $LOG_PREFIX-mas-manage.log
  [ "$MIRROR_MAS_MONITOR" == "true" ]     && echo "Mirroring IBM Maximo Application Suite (Monitor) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_monitor &> $LOG_PREFIX-mas-monitor.log
  [ "$MIRROR_MAS_PREDICT" == "true" ]     && echo "Mirroring IBM Maximo Application Suite (Predict) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_predict &> $LOG_PREFIX-mas-predict.log
  [ "$MIRROR_MAS_VI" == "true" ]          && echo "Mirroring IBM Maximo Application Suite (Visual Inspection) Images ..." && ansible-playbook ibm.mas_airgap.mirror_mas_visualinspection &> $LOG_PREFIX-mas-visualinspection.log
  [ "$MIRROR_THIRDPARTY" == "true" ]      && echo "Mirroring Third Party Images ..." && ROLE_NAME=thirdparty_mirror ansible-playbook ibm.mas_airgap.run_role &> $LOG_PREFIX-thirdparty.log

  true
}


#!/bin/bash

function provision_aws_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas provision-aws-sno [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

AWS Credentials (Required):
  -a, --accesskeyid ${COLOR_YELLOW}AWS_ACCESS_KEY_ID${TEXT_RESET}           AWS ACCESS KEY ID
  -k, --secretkey ${COLOR_YELLOW}AWS_SECRET_ACCESS_KEY${TEXT_RESET}         AWS SECRET ACCESS KEY

Cluster Configuration (Required):
  -c, --cluster-name ${COLOR_YELLOW}CLUSTER_NAME${TEXT_RESET}               Name of the cluster to be provisioned
  -v, --ocp-version ${COLOR_YELLOW}OCP_VERSION${TEXT_RESET}                 OCP version to use (e.g 4.8_openshift, 4.10_openshift)

IPI Configuration (Required):
  -r, --region-name ${COLOR_YELLOW}IPI_REGION${TEXT_RESET}                  Region of the cluster to be provisioned (e.g. us-east-1, us-east-2)
  -d, --domain-name ${COLOR_YELLOW}IPI_BASE_DOMAIN${TEXT_RESET}             Base Domain name (e.g. buyermas4aws.com)

Other Commands:
      --no-confirm                              Provision the cluster without prompting for confirmation
  -h, --help                                    Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}


# function provision_aws_noninteractive provides a non-interactive method to input all the environment variables at one shot.
function provision_aws_noninteractive() {
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      -a|--accesskeyid)
        AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      -k|--secretkey)
        AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      -c|--cluster-name)
        CLUSTER_NAME=$1 && shift
        ;;
      -v|--ocp-version)
        OCP_VERSION=$1 && shift
        ;;
      -r|--region-name)
        IPI_REGION=$1 && shift
        ;;
      -d|--domain-name)
        IPI_BASE_DOMAIN=$1 && shift
        ;;
      --no-confirm)
        NO_CONFIRM=true
        ;;
      -h|--help)
        provision_aws_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        provision_aws_help
        exit 1
        ;;
      esac
  done

  # Check all args have been set
  [[ -z "$AWS_ACCESS_KEY_ID" ]] && provision_aws_help "AWS_ACCESS_KEY_ID is not set"
  [[ -z "$AWS_SECRET_ACCESS_KEY" ]] && provision_aws_help "AWS_SECRET_ACCESS_KEY is not set"
  [[ -z "$CLUSTER_NAME" ]] && provision_aws_help "CLUSTER_NAME is not set"
  [[ -z "$OCP_VERSION" ]] && provision_aws_help "OCP_VERSION is not set"
  [[ -z "$IPI_REGION" ]] && provision_aws_help "IPI_REGION is not set"
  [[ -z "$IPI_BASE_DOMAIN" ]] && provision_aws_help "IPI_BASE_DOMAIN is not set"
}

# function provision_aws_default contains default variables for a generic AWS provisioning.
function provision_aws_set_default_env_var() {
  export IPI_PLATFORM=aws             # IPI_PLATFORM
  export CLUSTER_TYPE=ipi             # CLUSTER_TYPE
  export IPI_PULL_SECRET_FILE="/root/masconfig-sno/pull-secret"                   # IPI_PULL_SECRET_FILE
  export IPI_DIR="/root/sno"          # IPI_DIR
  export IPI_CONTROLPLANE_REPLICAS=3  # IPI_CONTROLPLANE_REPLICAS
  export IPI_COMPUTE_REPLICAS=3       # IPI_COMPUTE_REPLICAS
}


# function provision_aws_interactive contains the prompts for the different variables.
function provision_aws_interactive() {
  prompt_aws_access_key_id            # AWS_ACCESS_KEY_ID
  prompt_aws_secret_access_key        # AWS_SECRET_ACCESS_KEY
  prompt_aws_cluster_configuration    # CLUSTER_NAME
  prompt_for_input "AWS Region" IPI_REGION "US East 2" && export IPI_REGION       # IPI_REGION
  prompt_for_input "AWS Base Domain" IPI_BASE_DOMAIN && export IPI_BASE_DOMAIN    # IPI_BASE_DOMAIN
  prompt_for_ocp_version              # OCP_VERSION
}
                                       


# The following function is a work in progress and is not ready for testing
function provision_aws_cluster() {
  # Take the first parameter off (it will be provision-aws-sno)
  shift
  if [[ $# -gt 0 ]]; then
    provision_aws_noninteractive "$@"
  else
    provision_aws_interactive
  fi

  # # Ensure all environment variables are available to ansible-playbook
  # #Following variables are set for provisioning an AWS Cluster
  # export AWS_ACCESS_KEY_ID
  # export AWS_SECRET_ACCESS_KEY
  # export CLUSTER_NAME
  # export IPI_REGION
  # export IPI_BASE_DOMAIN
  # export OCP_VERSION

  # echo ""
  # echo_h2 "Review Settings"
  # echo "${TEXT_DIM}"
  # echo_h2 "AWS Authentication" "    "
  # echo_reset_dim "AWS API Key .......... $AWS_APIKEY"
  # echo_reset_dim "AWS Resource Group ... $AWS_RESOURCEGROUP"
  # reset_colors
  # echo "${TEXT_DIM}"
  # echo_h2 "Cluster Configuration" "    "
  # echo_reset_dim "Cluster Name .............. $CLUSTER_NAME"
  # echo_reset_dim "OCP Version ............... $OCP_VERSION"
  # reset_colors
  # echo "${TEXT_DIM}"
  # # echo_h2 "IPI Configuration" "    "
  # echo_reset_dim "Worker Flavour ............ $IPI_REGION"
  # echo_reset_dim "Worker Pool Zone .......... $IPI_BASE_DOMAIN"

  # echo
  # reset_colors
  # if [[ "$NO_CONFIRM" != "true" ]]; then
  #   prompt_for_confirm "Proceed with these settings" || exit 0
  # fi

  # ansible-playbook ibm.mas_devops.ocp_aws_provision || exit 1

  # echo ""
  # echo "IBM AWS cluster is ready to use"
  # OCP_CONSOLE_ROUTE=$(oc -n openshift-console get route console -o=jsonpath='{.spec.host}')
  # echo "Connected to OCP cluster: https://$OCP_CONSOLE_ROUTE"
}

function provision_aws() {
  provision_aws_set_default_env_var
  provision_aws_cluster
}

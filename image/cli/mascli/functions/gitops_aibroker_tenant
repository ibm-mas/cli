#!/usr/bin/env bash

function gitops_aibroker_tenant_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops-aibroker-tenant [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Basic Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}                                                  Directory for GitOps repository
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}                                                   Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}                                                   Cluster ID
  -i, --Instace-id ${COLOR_YELLOW}INSTANCE_ID${TEXT_RESET}                                                  Instance ID

ibm_aibroker_tenant(required):
      --mas_instance_id ${COLOR_YELLOW}MAS_INSTACE_ID${TEXT_RESET}                                          The MAS instance ID used by AI Broker
      --tenant_namespace ${COLOR_YELLOW}TENANT_NAMESPACE${TEXT_RESET}                                       The tenant's Kubernetes namespace
      --cluster_domain ${COLOR_YELLOW}CLUSTER_DOMAIN${TEXT_RESET}                                           The domain name of the Kubernetes cluster (e.g., cluster.local)
      --drocfg_url ${COLOR_YELLOW}DROCFG_URL${TEXT_RESET}                                                   URL of the DRO configuration service
      --slscfg_url ${COLOR_YELLOW}SLSCFG_URL${TEXT_RESET}                                                   URL of the SLS configuration service
      --slscfg_client_id ${COLOR_YELLOW}SLSCFG_CLIENT_ID${TEXT_RESET}                                       Client ID for SLS (usually generated by GitOps Helm)
      --mas_aibroker_watsonxai_url ${COLOR_YELLOW}MAS_AIBROKER_WATSONXAI_URL${TEXT_RESET}                   Endpoint URL for Watsonx.ai
      --mas_aibroker_watsonxai_apikey ${COLOR_YELLOW}MAS_AIBROKER_WATSONXAI_APIKEY${TEXT_RESET}             API key for authenticating with Watsonx.ai
      --mas_aibroker_watsonxai_project_id ${COLOR_YELLOW}MAS_AIBROKER_WATSONXAI_PROJECT_ID${TEXT_RESET}     Watsonx.ai project ID used by AI Broker


AIBroker :
--aibroker_namespace ${COLOR_YELLOW}AIBROKER_NAMESPACE${TEXT_RESET}                                         The namespace where AI Broker is deployed
--mas_aibroker_provision_tenant ${COLOR_YELLOW}MAS_AIBROKER_PROVISION_TENANT${TEXT_RESET}                   Whether to provision the AI Broker tenant (true/false)
--mas_instance_id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}                                               The MAS instance ID used by AI Broker
--tenant_namespace ${COLOR_YELLOW}TENANT_NAMESPACE${TEXT_RESET}                                             The tenant's Kubernetes namespace
--cluster_domain ${COLOR_YELLOW}CLUSTER_DOMAIN${TEXT_RESET}                                                 The domain name of the Kubernetes cluster (e.g., cluster.local)
--in_saas_env ${COLOR_YELLOW}IN_SAAS_ENV${TEXT_RESET}                                                       Whether the environment is SaaS (true/false)
--ibm_entitlement_key ${COLOR_YELLOW}IBM_ENTITLEMENT_KEY${TEXT_RESET}                                       IBM Entitlement API key for accessing IBM container registries

--mas_icr_cp ${COLOR_YELLOW}MAS_ICR_CP${TEXT_RESET}                                                         IBM Cloud Pak container registry URL
--mas_icr_cpopen ${COLOR_YELLOW}MAS_ICR_CPOPEN${TEXT_RESET}                                                 IBM Cloud Pak Open container registry URL

DRO :
--artifactory_token ${COLOR_YELLOW}ARTIFACTORY_TOKEN${TEXT_RESET}                                           API token used to authenticate with Artifactory
--drocfg_url ${COLOR_YELLOW}DROCFG_URL${TEXT_RESET}                                                         URL of the DRO configuration service
--mas_aibroker_dro_token_secret ${COLOR_YELLOW}MAS_AIBROKER_DRO_TOKEN_SECRET${TEXT_RESET}                   Secret name containing the DRO token
--drocfg_ca ${COLOR_YELLOW}DROCFG_CA${TEXT_RESET}                                                           CA certificate for secure communication with DRO config
--drocfg_registration_key ${COLOR_YELLOW}DROCFG_REGISTRATION_KEY${TEXT_RESET}                               Registration key used for DRO setup

SLS :
--slscfg_url ${COLOR_YELLOW}SLSCFG_URL${TEXT_RESET}                                                          URL of the SLS configuration service
--slscfg_registration_key ${COLOR_YELLOW}SLSCFG_REGISTRATION_KEY${TEXT_RESET}                                Registration key used to register with SLS
--mas_aibroker_sls_subscription_id ${COLOR_YELLOW}MAS_AIBROKER_SLS_SUBSCRIPTION_ID${TEXT_RESET}              Subscription ID associated with SLS
--slscfg_client_id ${COLOR_YELLOW}SLSCFG_CLIENT_ID${TEXT_RESET}                                              Client ID for SLS (usually generated by GitOps Helm)
--slscfg_ca ${COLOR_YELLOW}SLSCFG_CA${TEXT_RESET}                                                            CA certificate for SLS TLS connection
--slscfg_tls ${COLOR_YELLOW}SLSCFG_TLS${TEXT_RESET}                                                          TLS certificate used by the SLS client
--slscfg_key ${COLOR_YELLOW}SLSCFG_KEY${TEXT_RESET}                                                          Private key used by the SLS client

Watsonx :
--mas_aibroker_watsonxai_url ${COLOR_YELLOW}MAS_AIBROKER_WATSONXAI_URL${TEXT_RESET}                          Endpoint URL for Watsonx.ai
--mas_aibroker_watsonxai_apikey ${COLOR_YELLOW}MAS_AIBROKER_WATSONXAI_APIKEY${TEXT_RESET}                    API key for authenticating with Watsonx.ai
--mas_aibroker_watsonxai_project_id ${COLOR_YELLOW}MAS_AIBROKER_WATSONXAI_PROJECT_ID${TEXT_RESET}            Watsonx.ai project ID used by AI Broker

MinIO :
--mas_aibroker_storage_host ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_HOST${TEXT_RESET}                            Hostname or service name of the MinIO backend
--mas_aibroker_storage_port ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_PORT${TEXT_RESET}                            Port number MinIO is exposed on
--mas_aibroker_storage_region ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_REGION${TEXT_RESET}                        Storage region used in MinIO (if applicable)
--mas_aibroker_storage_accesskey ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_ACCESSKEY${TEXT_RESET}                  Access key to authenticate with MinIO
--mas_aibroker_storage_secretkey ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_SECRETKEY${TEXT_RESET}                  Secret key for authenticating with MinIO
--mas_aibroker_storage_pipelines_bucket ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_PIPELINES_BUCKET${TEXT_RESET}    The MinIO bucket used to store pipeline assets
--mas_aibroker_storage_ssl ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_SSL${TEXT_RESET}                              Whether MinIO uses SSL (true/false)


Automatic GitHub Push (Optional):
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}                                                  Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}                                                  GitHub Hostname for your GitOps repository
  -O, --github-org ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}                                                    Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}                                                  Github repo for your GitOps repository
  -S, --github-ssh ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}                                                       Git ssh key path
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}                                                    Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}                                            Git commit message to use when committing to of your GitOps repository

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_aibroker_tenant_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-aibroker-tenant commit"

  # adding default values 
  # all generic values should to put here 
  # check with ansible playbook/gitops envs 
  # only export below in whiel loop
  export REGION_ID=${REGION_ID:-${SM_AWS_REGION}}

  #adding default values # -- AIBroker Defaults
  export AIBROKER_NAMESPACE=${AIBROKER_NAMESPACE:-"mas-${MAS_INSTANCE_ID}-aibroker"}
  export MAS_AIBROKER_PROVISION_TENANT=${MAS_AIBROKER_PROVISION_TENANT:-"provision-tenant"}
  export IN_SAAS_ENV=${IN_SAAS_ENV:-"true"}
  export MAS_ICR_CP=${MAS_ICR_CP:-"docker-na-public.artifactory.swg-devops.com/wiotp-docker-local"}
  export MAS_ICR_CPOPEN=${MAS_ICR_CPOPEN:-"docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen"}

  # -- DRO Defaults
  export MAS_AIBROKER_DRO_TOKEN_SECRET=${MAS_AIBROKER_DRO_TOKEN_SECRET:-"dro-token"}

  # -- SLS Defaults
  export MAS_AIBROKER_SLS_SUBSCRIPTION_ID=${MAS_AIBROKER_SLS_SUBSCRIPTION_ID:-"001"}

  # -- MinIO Defaults
  export MAS_AIBROKER_STORAGE_REGION=${MAS_AIBROKER_STORAGE_REGION:-""}
  export MAS_AIBROKER_STORAGE_SSL=${MAS_AIBROKER_STORAGE_SSL:-"true"}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -i|--instance-id)
        export INSTANCE_ID=$1 && shift 
        ;;
      # AWS Secrets Manager Configuration
      --sm-aws-secret-region)
        export SM_AWS_REGION=$1
        export REGION_ID=$1
        shift
        ;;
      --sm-aws-access-key)
        export SM_AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --sm-aws-secret-key)
        export SM_AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;

      # -- AIBroker
      --aibroker_namespace)
        export AIBROKER_NAMESPACE=$1 && shift
        ;;
      --mas_aibroker_provision_tenant)
        export MAS_AIBROKER_PROVISION_TENANT=$1 && shift
        ;;
      --mas_instance_id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      --tenant_namespace)
        export TENANT_NAMESPACE=$1 && shift
        ;;
      --cluster_domain)
        export CLUSTER_DOMAIN=$1 && shift
        ;;
      --in_saas_env)
        export IN_SAAS_ENV=$1 && shift
        ;;
      --ibm_entitlement_key)
        export IBM_ENTITLEMENT_KEY=$1 && shift
        ;;
      --mas_icr_cp)
        export MAS_ICR_CP=$1 && shift
        ;;
      --mas_icr_cpopen)
        export MAS_ICR_CPOPEN=$1 && shift
        ;;

      # -- DRO
      --artifactory_token)
        export ARTIFACTORY_TOKEN=$1 && shift
        ;;
      --drocfg_url)
        export DROCFG_URL=$1 && shift
        ;;
      --mas_aibroker_dro_token_secret)
        export MAS_AIBROKER_DRO_TOKEN_SECRET=$1 && shift
        ;;
      --drocfg_ca)
        export DROCFG_CA=$1 && shift
        ;;
      --drocfg_registration_key)
        export DROCFG_REGISTRATION_KEY=$1 && shift
        ;;

      # -- SLS
      --slscfg_url)
        export SLSCFG_URL=$1 && shift
        ;;
      --slscfg_registration_key)
        export SLSCFG_REGISTRATION_KEY=$1 && shift
        ;;
      --mas_aibroker_sls_subscription_id)
        export MAS_AIBROKER_SLS_SUBSCRIPTION_ID=$1 && shift
        ;;
      --slscfg_client_id)
        export SLSCFG_CLIENT_ID=$1 && shift
        ;;
      --slscfg_ca)
        export SLSCFG_CA=$1 && shift
        ;;
      --slscfg_tls)
        export SLSCFG_TLS=$1 && shift
        ;;
      --slscfg_key)
        export SLSCFG_KEY=$1 && shift
        ;;

      # -- Watsonx
      --mas_aibroker_watsonxai_url)
        export MAS_AIBROKER_WATSONXAI_URL=$1 && shift
        ;;
      --mas_aibroker_watsonxai_apikey)
        export MAS_AIBROKER_WATSONXAI_APIKEY=$1 && shift
        ;;
      --mas_aibroker_watsonxai_project_id)
        export MAS_AIBROKER_WATSONXAI_PROJECT_ID=$1 && shift
        ;;

      # -- MinIO
      --mas_aibroker_storage_host)
        export MAS_AIBROKER_STORAGE_HOST=$1 && shift
        ;;
      --mas_aibroker_storage_port)
        export MAS_AIBROKER_STORAGE_PORT=$1 && shift
        ;;
      --mas_aibroker_storage_region)
        export MAS_AIBROKER_STORAGE_REGION=$1 && shift
        ;;
      --mas_aibroker_storage_accesskey)
        export MAS_AIBROKER_STORAGE_ACCESSKEY=$1 && shift
        ;;
      --mas_aibroker_storage_secretkey)
        export MAS_AIBROKER_STORAGE_SECRETKEY=$1 && shift
        ;;
      --mas_aibroker_storage_pipelines_bucket)
        export MAS_AIBROKER_STORAGE_PIPELINES_BUCKET=$1 && shift
        ;;
      --mas_aibroker_storage_ssl)
        export MAS_AIBROKER_STORAGE_SSL=$1 && shift
        ;;

     
      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_aibroker_tenant_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_aibroker_tenant_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_aibroker_tenant_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_aibroker_tenant_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_aibroker_tenant_help "CLUSTER_ID is not set"
  [[ -z "$REGION_ID" && -z "$SM_AWS_REGION" ]] && gitops_aibroker_tenant_help "REGION_ID or SM_AWS_REGION is not set"

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_aibroker_tenant_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_aibroker_tenant_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_aibroker_tenant_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_aibroker_tenant_help "GIT_BRANCH is not set"
  fi

  # add validation below like above  for those variable which have the value needed for further execution
  # -- AIBroker
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_aibroker_tenant_help "MAS_INSTANCE_ID is not set. Please provide the MAS instance ID using --mas_instance_id."
  [[ -z "$TENANT_NAMESPACE" ]] && gitops_aibroker_tenant_help "TENANT_NAMESPACE is not set. Please specify the tenant namespace using --tenantNamespace."
  [[ -z "$CLUSTER_DOMAIN" ]] && gitops_aibroker_tenant_help "CLUSTER_DOMAIN is not set. Please provide the cluster domain using --cluster_domain."
  
  # -- DRO
  [[ -z "$DROCFG_URL" ]] && gitops_aibroker_tenant_help "DROCFG_URL is not set. Please specify the DRO configuration URL using --drocfg_url."
  
  # -- SLS
  [[ -z "$SLSCFG_URL" ]] && gitops_aibroker_tenant_help "SLSCFG_URL is not set. Please specify the SLS configuration URL using --slscfg_url."
  [[ -z "$SLSCFG_CLIENT_ID" ]] && gitops_aibroker_tenant_help "SLSCFG_CLIENT_ID is not set. Please provide the SLS client ID using --slscfg_client_Id."

  # -- Watsonx
  [[ -z "$MAS_AIBROKER_WATSONXAI_URL" ]] && gitops_aibroker_tenant_help "MAS_AIBROKER_WATSONXAI_URL is not set. Please specify the Watsonx.ai URL using --mas_aibroker_watsonxai_url."
  [[ -z "$MAS_AIBROKER_WATSONXAI_APIKEY" ]] && gitops_aibroker_tenant_help "MAS_AIBROKER_WATSONXAI_APIKEY is not set. Please provide the Watsonx.ai API key using --mas_aibroker_watsonxai_apikey."
  [[ -z "$MAS_AIBROKER_WATSONXAI_PROJECT_ID" ]] && gitops_aibroker_tenant_help "MAS_AIBROKER_WATSONXAI_PROJECT_ID is not set. Please specify the Watsonx.ai project ID using --mas_aibroker_watsonxai_project_id."

}

function gitops_aibroker_tenant() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_aibroker_tenant_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_aibroker_tenant_interactive
  fi

  # catch errors
  set -o pipefail
  trap 'echo "[ERROR] Error occurred at $BASH_SOURCE, line $LINENO, exited with $?"; exit 1' ERR

  rm -rf $GITOPS_WORKING_DIR
  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  TEMP_DIR=$GITOPS_CLUSTER_DIR/${MAS_INSTANCE_ID}
  mkdir -p ${TEMP_DIR}

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ..................... ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region ID ...................... ${COLOR_MAGENTA}${REGION_ID}"
  echo_reset_dim "Cluster ID ..................... ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Cluster Config Directory ....... ${COLOR_MAGENTA}${GITOPS_CLUSTER_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "AWS Secrets Manager" "    "
  echo_reset_dim "Region ......................... ${COLOR_MAGENTA}${SM_AWS_REGION}"
  echo_reset_dim "Secret Key ..................... ${COLOR_MAGENTA}${SM_AWS_ACCESS_KEY_ID:0:4}<snip>"
  echo_reset_dim "Access Key ..................... ${COLOR_MAGENTA}${SM_AWS_SECRET_ACCESS_KEY:0:4}<snip>"
  echo_reset_dim "Secrets Path ................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  # echo all the variables of gitops envs

  # -- AIBroker
  echo_reset_dim "aibroker namespace ........................... ${COLOR_MAGENTA}${AIBROKER_NAMESPACE}"
  echo_reset_dim "mas aibroker provision tenant ................ ${COLOR_MAGENTA}${MAS_AIBROKER_PROVISION_TENANT}"
  echo_reset_dim "mas instance ID .............................. ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "tenant namespace ............................. ${COLOR_MAGENTA}${TENANT_NAMESPACE}"
  echo_reset_dim "cluster domain ............................... ${COLOR_MAGENTA}${CLUSTER_DOMAIN}"
  echo_reset_dim "in SaaS environment .......................... ${COLOR_MAGENTA}${IN_SAAS_ENV}"

  echo_reset_dim "MAS ICR CP registry .......................... ${COLOR_MAGENTA}${MAS_ICR_CP}"
  echo_reset_dim "MAS ICR CPOPEN registry ...................... ${COLOR_MAGENTA}${MAS_ICR_CPOPEN}"

  # -- DRO
  echo_reset_dim "DRO token secret name ........................ ${COLOR_MAGENTA}${MAS_AIBROKER_DRO_TOKEN_SECRET}"

  # -- SLS
  echo_reset_dim "SLS subscription ID .......................... ${COLOR_MAGENTA}${MAS_AIBROKER_SLS_SUBSCRIPTION_ID}"
  echo_reset_dim "SLS client ID ................................ ${COLOR_MAGENTA}${SLSCFG_CLIENT_ID}"


  # -- Watsonx
  echo_reset_dim "Watsonx.ai URL ............................... ${COLOR_MAGENTA}${MAS_AIBROKER_WATSONXAI_URL}"
  echo_reset_dim "Watsonx.ai API key ........................... ${COLOR_MAGENTA}${MAS_AIBROKER_WATSONXAI_APIKEY}"
  echo_reset_dim "Watsonx.ai project ID ........................ ${COLOR_MAGENTA}${MAS_AIBROKER_WATSONXAI_PROJECT_ID}"

  # -- MinIO
  echo_reset_dim "MinIO SSL enabled ............................ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_SSL}"

  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login

  SECRETS_PREFIX="${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}"

  # aibroker
  export SECRET_KEY_IBM_ENTITLEMENT=${SECRETS_PREFIX}ibm_entitlement#entitlement_key
  # dro
  export SECRET_KEY_ARTIFACTORY_TOKEN=${SECRETS_PREFIX}ibm_entitlement#aibroker_image_pull_secret_b64
  export SECRET_KEY_DROCFG_CA=${SECRETS_PREFIX}dro#drocfg_ca
  export SECRET_KEY_DROCFG_REGISTRATION_KEY=${SECRETS_PREFIX}dro#drocfg_registration_key

  # sls
  export SECRET_KEY_SLSCFG_REGISTRATION_KEY=${SECRETS_PREFIX}sls#slscfg_registration_key
  export SECRET_KEY_SLSCFG_CA=${SECRETS_PREFIX}sls#slscfg_ca
  export SECRET_KEY_SLSCFG_TLS=${SECRETS_PREFIX}sls#slscfg_tls
  export SECRET_KEY_SLSCFG_KEY=${SECRETS_PREFIX}sls#slscfg_key

  # minio
  export SECRET_KEY_MINIO_HOST=${SECRETS_PREFIX}minio#sm_minio_host
  export SECRET_KEY_MINIO_PORT=${SECRETS_PREFIX}minio#sm_minio_port
  export SECRET_KEY_MINIO_ACCESSKEY=${SECRETS_PREFIX}minio#sm_minio_accesskey
  export SECRET_KEY_MINIO_SECRETKEY=${SECRETS_PREFIX}minio#sm_minio_secretkey
  export SECRET_KEY_MINIO_BUCKET=${SECRETS_PREFIX}minio#sm_minio_bucket_default

  # check for those variables present into the aws sm 

  sm_verify_secret_exists ${SECRETS_PREFIX}ibm_entitlement "image_pull_secret_b64,entitlement_key"
 
  sm_verify_secret_exists ${SECRETS_PREFIX}dro "drocfg_ca,drocfg_registration_key"

  sm_verify_secret_exists ${SECRETS_PREFIX}sls "slscfg_registration_key,slscfg_ca,slscfg_tls,slscfg_key"
 
  sm_verify_secret_exists ${SECRETS_PREFIX}minio "sm_minio_host,sm_minio_port,sm_minio_accesskey,sm_minio_secretkey,sm_minio_bucket_default"

  # finally push them into the git repo

    if [ -z $GIT_SSH ]; then
      export GIT_SSH=false
    fi

    # Clone github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
      clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
    fi
    mkdir -p ${GITOPS_CLUSTER_DIR}

    # Generate ArgoApps
    # ---------------------------------------------------------------------------
    echo
    echo_h2 "Generating aibroker operator Applications"
    echo "- minio operator"

    echo "Generating aibroker file ${GITOPS_CLUSTER_DIR}/ibm-aibroker-tenant.yaml"
    jinjanate_commmon $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-aibroker-tenant.yaml.j2 ${GITOPS_CLUSTER_DIR}/ibm-aibroker-tenant.yaml

    # Commit and push to github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo "Github push" "$GITHUB_HOST" "$GITHUB_ORG" "$GITHUB_REPO" "$GIT_BRANCH" "Working: " "${GITOPS_WORKING_DIR}/${GITHUB_REPO}" " Commit :" "$GIT_COMMIT_MSG"
      save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH "${GITOPS_WORKING_DIR}/${GITHUB_REPO}" "${GIT_COMMIT_MSG}"
      remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO
    fi

    rm -rf $TEMP_DIR
    rm -rf $GITOPS_WORKING_DIR

  exit 0
}

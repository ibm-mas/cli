#!/bin/bash

# Do we need to set up an IoT kafka?
# -------------------------------------------------------------------------
function kafka_for_iot() {
  if [ "$MAS_APP_CHANNEL_IOT" != "" ]; then
    # Set up system kafka - using providers or external source
    echo_h3 "Kafka configuration for Maximo IoT"
    echo "${TEXT_DIM}Maximo IoT requires a shared system-scope Kafka instance."
    echo " - Supported Kafka providers: Strimzi, Red Hat AMQ Streams, IBM Cloud Event Streams and AWS MSK."
    echo ""
    reset_colors

    if prompt_for_confirm_default_yes "Create system Kafka instance using one of the supported providers?"; then
      KAFKA_ACTION_SYSTEM=install
      echo
      echo "Kafka Provider:"
      echo "  1. Strimzi (opensource)"
      echo "  2. Red Hat AMQ Streams (requires a separate license)"
      echo "  3. IBM Cloud Event Streams (paid IBM Cloud service)"
      echo "  4. AWS MSK (paid AWS service)"
      reset_colors
      echo
      prompt_for_input "Select Kafka provider" KAFKA_SELECTION "1"
      echo

      case $KAFKA_SELECTION in
        1)
          KAFKA_PROVIDER="strimzi"

          # Clear settings for other providers - IBM
          EVENTSTREAMS_RESOURCEGROUP=""
          EVENTSTREAMS_NAME=""
          EVENTSTREAMS_LOCATION=""

          # Clear settings for other providers - AWS
          KAFKA_CLUSTER_NAME=""
          AWS_KAFKA_USER_NAME=""
          AWS_MSK_INSTANCE_TYPE=""
          AWS_MSK_VOLUME_SIZE=""
          AWS_MSK_INSTANCE_NUMBER=""
          AWS_REGION=""

          # Ask the user to choose the version of Kafka to use
          echo "Strimzi: Cluster Version"
          echo -e "${TEXT_DIM}The version of the Strimzi operator available on your cluster will determine the supported versions of Kafka that can be deployed."
          echo " - If you are using the latest available operator catalog then the default version below can be accepted"
          echo " - If you are using older operator catalogs (e.g. in a disconnected install) you should confirm the supported versions in your OperatorHub"
          echo ""
          reset_colors
          prompt_for_input "Kafka version" KAFKA_VERSION "3.5.1"
          ;;
        2)
          KAFKA_PROVIDER=redhat

          # Clear settings for other providers - IBM
          EVENTSTREAMS_RESOURCEGROUP=""
          EVENTSTREAMS_NAME=""
          EVENTSTREAMS_LOCATION=""

          # Clear settings for other providers - AWS
          KAFKA_CLUSTER_NAME=""  # We want to use the generated name
          AWS_KAFKA_USER_NAME=""
          AWS_MSK_INSTANCE_TYPE=""
          AWS_MSK_VOLUME_SIZE=""
          AWS_MSK_INSTANCE_NUMBER=""
          AWS_REGION=""

          # Ask the user to choose the version of Kafka to use
          echo "Red Hat AMQ Streams: Cluster Version"
          echo -e "${TEXT_DIM}The version of the Red Hat AMQ Streams operator available on your cluster will determine the supported versions of Kafka that can be deployed."
          echo " - If you are using the latest available operator catalog then the default version below can be accepted"
          echo " - If you are using older operator catalogs (e.g. in a disconnected install) you should confirm the supported versions in your OperatorHub"
          echo ""
          reset_colors
          prompt_for_input "Kafka version" KAFKA_VERSION "3.5.0"
          ;;
        3)
          KAFKA_PROVIDER="ibm"
          # kafka defaults - event streams
          [ ! -z $EVENTSTREAMS_RESOURCEGROUP ] && EVENTSTREAMS_RESOURCEGROUP=Default
          [ ! -z $EVENTSTREAMS_NAME ] && EVENTSTREAMS_NAME=event-streams-$MAS_INSTANCE_ID
          [ ! -z $EVENTSTREAMS_LOCATION ] && EVENTSTREAMS_LOCATION=us-east

          prompt_for_secret "IBM Cloud API Key" IBMCLOUD_APIKEY "Re-use saved IBM Cloud API Key?"
          prompt_for_input "IBM Event Streams resource group" EVENTSTREAMS_RESOURCEGROUP $EVENTSTREAMS_RESOURCEGROUP
          prompt_for_input "IBM Event Streams instance name" EVENTSTREAMS_NAME $EVENTSTREAMS_NAME
          prompt_for_input "IBM Event Streams location" EVENTSTREAMS_LOCATION $EVENTSTREAMS_LOCATION

          # Clear settings for other providers - AMQ Streams & Strimzi
          KAFKA_VERSION=""

          # Clear settings for other providers - AWS
          KAFKA_CLUSTER_NAME=""  # We want to use the generated name
          AWS_KAFKA_USER_NAME=""
          AWS_MSK_INSTANCE_TYPE=""
          AWS_MSK_VOLUME_SIZE=""
          AWS_MSK_INSTANCE_NUMBER=""
          AWS_REGION=""
          ;;
        4)
          KAFKA_PROVIDER="aws"
          # kafka defaults - aws msk
          [ ! -z $KAFKA_CLUSTER_NAME ] && KAFKA_CLUSTER_NAME=aws-msk-$MAS_INSTANCE_ID
          [ ! -z $AWS_KAFKA_USER_NAME ] && AWS_KAFKA_USER_NAME=masuser
          [ ! -z $AWS_MSK_INSTANCE_TYPE ] && AWS_MSK_INSTANCE_TYPE=kafka.m5.large
          [ ! -z $AWS_MSK_VOLUME_SIZE ] && AWS_MSK_VOLUME_SIZE=100
          [ ! -z $AWS_MSK_INSTANCE_NUMBER ] && AWS_MSK_INSTANCE_NUMBER=3
          [ ! -z $AWS_REGION ] && AWS_REGION=us-east-1

          echo "${TEXT_DIM}"
          echo "While provisioning the AWS MSK instance, you will be required to provide the AWS Virtual Private Cloud ID and subnet details"
          echo "where your instance will be deployed to properly configure inbound and outbound connectivity."
          echo "You should be able to find these information inside your VPC and subnet configurations in the target AWS account."
          echo "For more details about AWS subnet/CIDR configuration, refer: https://docs.aws.amazon.com/vpc/latest/userguide/subnet-sizing.html"
          echo ""
          reset_colors
          prompt_for_secret "AWS Access Key ID" AWS_ACCESS_KEY_ID "Re-use saved AWS Access Key ID?"
          prompt_for_secret "AWS Secret Access Key" AWS_SECRET_ACCESS_KEY "Re-use saved AWS Secret Access Key?"
          prompt_for_input "AWS Region" AWS_REGION $AWS_REGION
          prompt_for_input "Virtual Private Cloud (VPC) ID" VPC_ID $VPC_ID
          prompt_for_input "MSK Cluster Name" KAFKA_CLUSTER_NAME $KAFKA_CLUSTER_NAME
          prompt_for_input "MSK Instance Username" AWS_KAFKA_USER_NAME $AWS_KAFKA_USER_NAME
          prompt_for_secret "MSK Instance Password" AWS_KAFKA_USER_PASSWORD "Re-use saved MSK Instance Password?"
          prompt_for_input "MSK Instance Type" AWS_MSK_INSTANCE_TYPE $AWS_MSK_INSTANCE_TYPE
          prompt_for_input "MSK Total Number of Broker Nodes" AWS_MSK_INSTANCE_NUMBER $AWS_MSK_INSTANCE_NUMBER
          prompt_for_input "MSK Storage Size (in GB)" AWS_MSK_VOLUME_SIZE $AWS_MSK_VOLUME_SIZE
          prompt_for_input "Availability Zone 1 CIDR" AWS_MSK_CIDR_AZ1 $AWS_MSK_CIDR_AZ1
          prompt_for_input "Availability Zone 2 CIDR" AWS_MSK_CIDR_AZ2 $AWS_MSK_CIDR_AZ2
          prompt_for_input "Availability Zone 3 CIDR" AWS_MSK_CIDR_AZ3 $AWS_MSK_CIDR_AZ3
          prompt_for_input "Ingress CIDR" AWS_MSK_INGRESS_CIDR $AWS_MSK_INGRESS_CIDR
          prompt_for_input "Egress CIDR" AWS_MSK_EGRESS_CIDR $AWS_MSK_EGRESS_CIDR

          # Clear settings for other providers - AMQ Streams & Strimzi
          KAFKA_VERSION=""

          # Clear settings for other providers - IBM
          EVENTSTREAMS_RESOURCEGROUP=""
          EVENTSTREAMS_NAME=""
          EVENTSTREAMS_LOCATION=""
          ;;
        *)
          echo_warning "Invalid selection"
          exit 1
          ;;
      esac

    else
      KAFKA_ACTION_SYSTEM=byo

      select_local_config_dir

      # Check if a configuration already exists
      kafka_cfg_file=$LOCAL_MAS_CONFIG_DIR/kafka-$MAS_INSTANCE_ID-system.yaml
      echo "${TEXT_DIM}Searching for system Kafka configuration file in $kafka_cfg_file ..."
      reset_colors
      echo
      if [ ! -e "$kafka_cfg_file" ]; then
        echo_warning "Error: Kafka configuration file does not exist: '$kafka_cfg_file'"
        echo_warning "In order to continue, provide an existing Kafka configuration file ($kafka_cfg_file) or choose one of the supported Kafka providers to be installed."
        exit 1
      else
        echo "Provided Kafka configuration file '$kafka_cfg_file' will be applied."
      fi
    fi
  else
    # We don't need a system kafka, IoT is not being installed
    KAFKA_ACTION_SYSTEM=none
  fi
}

function install_config_kafka() {
  echo
  echo_h2 "Configure Kafka"
  echo "${TEXT_DIM}The installer can setup one Kafka provider instance (in your OpenShift cluster or in the chosen cloud provider account) for the use of applications that require a Kafka configuration (e.g IoT) or you may choose to configure MAS to use an existing Kafka instance."
  echo
  reset_colors

  # Unless we are installing IoT we have nothing to do
  if [[ "$MAS_APP_CHANNEL_IOT" != "" ]]; then
    kafka_for_iot
  else
    echo_highlight "No applications have been selected that require a Kafka installation"
    KAFKA_ACTION_SYSTEM=none
  fi
}

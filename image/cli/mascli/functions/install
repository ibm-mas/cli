#!/bin/bash

function install_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas install [options]

Catalog Selection (Required):
  -c, --mas-catalog-version ${COLOR_YELLOW}MAS_CATALOG_VERSION${TEXT_RESET}                    IBM Maximo Operator Catalog to install (e.g. v8-amd64)

Entitlement & Licensing (Required):
      --ibm-entitlement-key ${COLOR_YELLOW}IBM_ENTITLEMENT_KEY${TEXT_RESET}                    IBM entitlement key
      --license-id ${COLOR_YELLOW}SLS_LICENSE_ID${TEXT_RESET}                                  MAS license ID
      --license-file ${COLOR_YELLOW}SLS_LICENSE_FILE_LOCAL${TEXT_RESET}                        Path to MAS license file
      --uds-email ${COLOR_YELLOW}UDS_CONTACT_EMAIL${TEXT_RESET}                                Contact e-mail address
      --uds-firstname ${COLOR_YELLOW}UDS_CONTACT_FIRSTNAME${TEXT_RESET}                        Contact first name
      --uds-lastname ${COLOR_YELLOW}UDS_CONTACT_LASTNAME${TEXT_RESET}                          Contact last name

Storage Class Selection (Required):
      --storage-rwo ${COLOR_YELLOW}STORAGE_CLASS_RWO${TEXT_RESET}                              Read Write Once (RWO) storage class (e.g. ibmc-block-gold)
      --storage-rwx ${COLOR_YELLOW}STORAGE_CLASS_RWX${TEXT_RESET}                              Read Write Many (RWX) storage class (e.g. ibmc-file-gold-gid)
      --storage-pipeline ${COLOR_YELLOW}PIPELINE_STORAGE_CLASS${TEXT_RESET}                    Install pipeline storage class (e.g. ibmc-file-gold-gid)
      --storage-accessmode ${COLOR_YELLOW}PIPELINE_STORAGE_ACCESSMODE${TEXT_RESET}             Install pipeline storage class access mode (ReadWriteMany or ReadWriteOnce)

Maximo Application Suite Instance (Required):
  -i, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}                            MAS Instance ID
  -w, --mas-workspace-id ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}                          MAS Workspace ID
  -W, --mas-workspace-name ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}                        MAS Workspace Name

Advanced MAS Configuration (Optional):
      --additional-configs ${COLOR_YELLOW}LOCAL_MAS_CONFIG_DIR${TEXT_RESET}                    Path to a directory containing additional configuration files to be applied
      --non-prod                                                   Install MAS in Non-production mode

Maximo Application Suite Core Platform (Required):
      --mas-channel ${COLOR_YELLOW}MAS_CHANNEL${TEXT_RESET}                                    Subscription channel for the Core Platform

Maximo Application Suite Application Selection (Optional):
      --iot-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_IOT${TEXT_RESET}                            Subscription channel for Maximo IoT
      --monitor-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_MONITOR${TEXT_RESET}                    Subscription channel for Maximo Monitor
      --manage-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_MANAGE${TEXT_RESET}                      Subscription channel for Maximo Manage
      --manage-jdbc ${COLOR_YELLOW}MAS_APPWS_BINDINGS_JDBC_MANAGE${TEXT_RESET}                 Configure Maximo Manage JDBC binding (workspace-application or system)
      --predict-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_PREDICT${TEXT_RESET}                    Subscription channel for Maximo Predict
      --assist-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_ASSIST${TEXT_RESET}                      Subscription channel for Maximo Assist
      --visualinspection-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_VISUALINSPECTION${TEXT_RESET}  Subscription channel for Maximo Visual Inspection
      --optimizer-channel ${COLOR_YELLOW}MAS_APP_CHANNEL_OPTIMIZER${TEXT_RESET}                Subscription channel for Maximo optimizer
      --optimizer-plan ${COLOR_YELLOW}MAS_APP_PLAN_OPTIMIZER${TEXT_RESET}                      Installation plan for Maximo Optimizer (full or limited)

IBM Cloud Pak for Data (Required when installing Predict or Assist):
      --cp4d-version ${COLOR_YELLOW}CP4D_VERSION${TEXT_RESET}                                  Product version of CP4D to use

IBM Db2 (Optional, required to use IBM Db2 Universal Operator):
      --db2u-channel ${COLOR_YELLOW}DB2_CHANNEL${TEXT_RESET}                                   Subscription channel for Db2u (e.g. v110508.0)
      --db2u-system                                                Install a shared Db2u instance for MAS (required by IoT & Monitor, supported by Manage)
      --db2u-manage                                                Install a dedicated Db2u instance for Maximo Manage (supported by Manage)

Advanced Db2u Universal Operator Configuration (Optional):
      --db2u-namespace ${COLOR_YELLOW}DB2_NAMESPACE${TEXT_RESET}                               Change namespace where Db2u instances will be created

Advanced Db2u Universal Operator Configuration - Node Scheduling (Optional):
      --db2u-affinity-key ${COLOR_YELLOW}DB2_AFFINITY_KEY${TEXT_RESET}                         Set a node label to declare affinity to
      --db2u-affinity-value ${COLOR_YELLOW}DB2_AFFINITY_VALUE${TEXT_RESET}                     Set the value of the node label to affine with
      --db2u-tolerate-key ${COLOR_YELLOW}DB2_TOLERATE_KEY${TEXT_RESET}                         Set a node taint to tolerate
      --db2u-tolerate-value ${COLOR_YELLOW}DB2_TOLERATE_VALUE${TEXT_RESET}                     Set the value of the taint to tolerate
      --db2u-tolerate-effect ${COLOR_YELLOW}DB2_TOLERATE_EFFECT${TEXT_RESET}                   Set the effect that will be tolerated (NoSchedule, PreferNoSchedule, or NoExecute)

Advanced Db2u Universal Operator Configuration - Resource Requests (Optional):
      --db2u-cpu-request ${COLOR_YELLOW}DB2_CPU_REQUESTS${TEXT_RESET}                          Customise Db2 CPU request
      --db2u-cpu-limit ${COLOR_YELLOW}DB2_CPU_LIMITS${TEXT_RESET}                              Customise Db2 CPU limit
      --db2u-memory-request ${COLOR_YELLOW}DB2_MEMORY_REQUESTS${TEXT_RESET}                    Customise Db2 memory request
      --db2u-memory-limit ${COLOR_YELLOW}DB2_MEMORY_LIMITS${TEXT_RESET}                        Customise Db2 memory limit

Advanced Db2u Universal Operator Configuration - Storage (Optional):
      --db2u-backup-storage ${COLOR_YELLOW}DB2_BACKUP_STORAGE_SIZE${TEXT_RESET}                Customise Db2 storage capacity
      --db2u-data-storage ${COLOR_YELLOW}DB2_DATA_STORAGE_SIZE${TEXT_RESET}                    Customise Db2 storage capacity
      --db2u-logs-storage ${COLOR_YELLOW}DB2_LOGS_STORAGE_SIZE${TEXT_RESET}                    Customise Db2 storage capacity
      --db2u-meta-storage ${COLOR_YELLOW}DB2_META_STORAGE_SIZE${TEXT_RESET}                    Customise Db2 storage capacity
      --db2u-temp-storage ${COLOR_YELLOW}DB2_TEMP_STORAGE_SIZE${TEXT_RESET}                    Customise Db2 storage capacity

Advanced MongoDB Configuration (Optional):
      --mongodb-namespace ${COLOR_YELLOW}MONGODB_NAMESPACE${TEXT_RESET}                        Change namespace where MongoCE operator and instance will be created


Other Commands:
      --dev-mode                                                   Enable developer mode (e.g. for access to pre-release builds)
      --no-wait-for-pvcs                                           If you are using using storage classes that utilize 'WaitForFirstConsumer' binding mode use this flag
      --no-confirm                                                 Mirror images without prompting for confirmation
  -h, --help                                                       Show this help message


EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function install_noninteractive() {
  NON_INTERACTIVE=true
  DEV_MODE=false

  # Defaults
  DB2_ACTION_SYSTEM=none
  DB2_ACTION_MANAGE=none

  LOCAL_MAS_CONFIG_DIR=""
  LOCAL_MAS_CONFIG_DIR_ALREADY_CHOSEN=yes
  use_additional_configs=no

  WAIT_FOR_PVCS=true
  STORAGE_CLASS_PROVIDER=custom

  while [[ $# -gt 0 ]]
  do
  key="$1"
  shift
  case $key in
    # Catalog
    -c|--mas-catalog-version)
    export MAS_CATALOG_VERSION=$1 && shift
    ;;

    # Storage
    --storage-rwo)
    export STORAGE_CLASS_RWO=$1 && shift
    ;;
    --storage-rwx)
    export STORAGE_CLASS_RWX=$1 && shift
    ;;
    --storage-pipeline)
    export PIPELINE_STORAGE_CLASS=$1 && shift
    ;;
    --storage-accessmode)
    export PIPELINE_STORAGE_ACCESSMODE=$1 && shift
    ;;

    # MAS Instance
    -i|--mas-instance-id)
    export MAS_INSTANCE_ID=$1 && shift
    ;;
    -w|--mas-workspace-id)
    export MAS_WORKSPACE_ID=$1 && shift
    ;;
    -W|--mas-workspace-name)
    export MAS_WORKSPACE_NAME=$1 && shift
    ;;

    # Advanced Configuration
    --additional-configs)
    LOCAL_MAS_CONFIG_DIR_ALREADY_CHOSEN=yes
    use_additional_configs=yes
    export LOCAL_MAS_CONFIG_DIR=$1 && shift
    ;;
    --non-prod)
    export USE_NON_PROD_MODE=true
    export MAS_ANNOTATIONS="mas.ibm.com/operationalMode=nonproduction"
    ;;

    # Core
    --mas-channel)
    export MAS_CHANNEL=$1 && shift
    ;;

    # Applications
    --assist-channel)
    export MAS_APP_CHANNEL_ASSIST=$1 && shift
    ;;
    --iot-channel)
    export MAS_APP_CHANNEL_IOT=$1 && shift
    ;;
    --monitor-channel)
    export MAS_APP_CHANNEL_MONITOR=$1 && shift
    ;;
    --manage-channel)
    export MAS_APP_CHANNEL_MANAGE=$1 && shift
    ;;
    --predict-channel)
    export MAS_APP_CHANNEL_PREDICT=$1 && shift
    ;;
    --visualinspection-channel)
    export MAS_APP_CHANNEL_VISUALINSPECTION=$1 && shift
    ;;
    --optimizer-channel)
    export MAS_APP_CHANNEL_OPTIMIZER=$1 && shift
    ;;
    --optimizer-plan)
    export MAS_APP_PLAN_OPTIMIZER=$1 && shift
    ;;

    # Dependencies - CP4D
    --cp4d-version)
    export CP4D_VERSION=$1 && shift
    ;;

    # Dependencies - Db2
    --db2u-namespace)
    export DB2_NAMESPACE=$1 && shift
    ;;
    --db2u-channel)
    export DB2_CHANNEL=$1 && shift
    ;;
    --db2u-system)
    export DB2_ACTION_SYSTEM=install
    ;;
    --db2u-manage)
    export DB2_ACTION_MANAGE=install
    ;;

    # Dependencies - Db2 Advanced Options
    --db2u-affinity-key)
    export DB2_SET_AFFINITY=true
    export DB2_AFFINITY_KEY=$1 && shift
    ;;
    --db2u-affinity-value)
    export DB2_AFFINITY_VALUE=$1 && shift
    ;;
    --db2u-tolerate-key)
    export DB2_SET_TOLERATIONS=false
    export DB2_TOLERATE_KEY=$1 && shift
    ;;
    --db2u-tolerate-value)
    export DB2_TOLERATE_VALUE=$1 && shift
    ;;
    --db2u-tolerate-effect)
    export DB2_TOLERATE_EFFECT=$1 && shift
    ;;
    --db2u-cpu-request)
    export DB2_CPU_REQUESTS=$1 && shift
    ;;
    --db2u-cpu-limit)
    export DB2_CPU_LIMITS=$1 && shift
    ;;
    --db2u-memory-request)
    export DB2_MEMORY_REQUESTS=$1 && shift
    ;;
    --db2u-memory-limit)
    export DB2_MEMORY_LIMITS=$1 && shift
    ;;

    --db2u-backup-storage)
    export DB2_BACKUP_STORAGE_SIZE=$1 && shift
    ;;
    --db2u-data-storage)
    export DB2_DATA_STORAGE_SIZE=$1 && shift
    ;;
    --db2u-logs-storage)
    export DB2_LOGS_STORAGE_SIZE=$1 && shift
    ;;
    --db2u-meta-storage)
    export DB2_META_STORAGE_SIZE=$1 && shift
    ;;
    --db2u-temp-storage)
    export DB2_TEMP_STORAGE_SIZE=$1 && shift
    ;;

    # Licensing & Entitlement
    --ibm-entitlement-key)
    export IBM_ENTITLEMENT_KEY=$1 && shift
    ;;
    --license-id)
    export SLS_LICENSE_ID=$1 && shift
    ;;
    --license-file)
    export SLS_LICENSE_FILE_LOCAL=$1 && shift
    if [[ ! -e "$SLS_LICENSE_FILE_LOCAL" ]]; then
      echo_warning "Error: File does not exist: $SLS_LICENSE_FILE_LOCAL"
      exit 1
    fi
    export SLS_LICENSE_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"
    ;;
    --uds-email)
    export UDS_CONTACT_EMAIL=$1 && shift
    ;;
    --uds-firstname)
    export UDS_CONTACT_FIRSTNAME=$1 && shift
    ;;
    --uds-lastname)
    export UDS_CONTACT_LASTNAME=$1 && shift
    ;;

    # MongoDB
    --mongodb-namespace)
    export MONGODB_NAMESPACE=$1 && shift
    ;;

    # Other Commands
    --dev-mode)
      DEV_MODE=true
      ;;
    --no-wait-for-pvcs)
      WAIT_FOR_PVCS=false
      ;;
    --no-confirm)
      NO_CONFIRM=true
      ;;
    -h|--help)
      install_help
      ;;


    *)
    # unknown option
    echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
    install_help
    exit 1
    ;;
  esac
  done

  if [[ "$DEV_MODE" == "true"  ]]; then
    MAS_ICR_CP=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local
    MAS_ICR_CPOPEN=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen
    SLS_ICR_CP=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local
    SLS_ICR_CPOPEN=docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen
  else
    MAS_ICR_CP=cp.icr.io/cp
    MAS_ICR_CPOPEN=icr.io/cpopen
    SLS_ICR_CP=cp.icr.io/cp
    SLS_ICR_CPOPEN=icr.io/cpopen
  fi


}

function install_interactive() {
  pipeline_config
}


function ocp_version_check() {
  # Check for OCP 4.8
  export OCP_VERSION=$(oc get clusterversion version -o jsonpath="{.status.desired.version}")
  if [[ "$OCP_VERSION" =~ ^4\.7\.* ]]; then
    echo
    echo_warning "Warning: OpenShift Container Platform v${OCP_VERSION} detected!"
    echo_warning " - This version is now out of support by Red Hat and ${TEXT_UNDERLINE}not a supported platform for IBM Maximo Application Suite"
    echo_warning " - The installation of IBM Maximo Application Suite may not proceed, you must upgrade to OCP v4.10 before installing MAS"
    echo
    echo_warning "For more information refer to the Red Hat OpenShift Container Platform Life Cycle Policy:"
    echo "  ${COLOR_CYAN}${TEXT_UNDERLINE}https://access.redhat.com/support/policy/updates/openshift/${COLOR_RESET}${TEXT_RESET}"
    reset_colors
    exit 1
  elif [[ "$OCP_VERSION" =~ ^4\.8\.* ]]; then
    echo
    echo_warning "Warning: OpenShift Container Platform v${OCP_VERSION} detected!"
    echo_warning " - This version is ${TEXT_UNDERLINE}now out of support by Red Hat"
    echo_warning " - The installation of IBM Maximo Application Suite may proceed, but we strongly encourage you to upgrade to OCP v4.10 first"
    echo
    echo_warning "For more information refer to the Red Hat OpenShift Container Platform Life Cycle Policy:"
    echo "  ${COLOR_CYAN}${TEXT_UNDERLINE}https://access.redhat.com/support/policy/updates/openshift/${COLOR_RESET}${TEXT_RESET}"
    reset_colors
    echo
    prompt_for_confirm "Continue anyway?" || exit 0
  fi
}


function install() {
  # Take the first parameter off (it will be mirror-images)
  shift
  if [[ $# -gt 0 ]]; then
    detect_airgap
    detect_sno
    install_noninteractive "$@"

    pipeline_install_operator

    config_pipeline_additional_configs
  else
    connect
    detect_airgap
    detect_sno
    pipeline_install_operator
    install_interactive
  fi

  pipeline_prepare
  pipeline_show_config
  pipeline_run

}

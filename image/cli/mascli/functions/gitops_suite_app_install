#!/usr/bin/env bash

function gitops_suite_app_install_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_suite_app_install [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}    Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID
  -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}  IBM Suite Maximo Application Suite Instance ID
  --mas-app-id ${COLOR_YELLOW}MAS_APP_ID${TEXT_RESET}                IBM Suite Maximo Application Suite Application ID
  --mas-app-channel ${COLOR_YELLOW}MAS_APP_CHANNEL${TEXT_RESET}      IBM Suite Maximo Application Suite Application Channel
  --mas-app-catalog-source ${COLOR_YELLOW}MAS_APP_CATALOG_SOURCE${TEXT_RESET}      IBM Suite Maximo Application Suite Application Catalog Source
  --mas-app-api-version ${COLOR_YELLOW}MAS_APP_API_VERSION${TEXT_RESET}      IBM Suite Maximo Application Suite Application API Version
  --mas-app-kind ${COLOR_YELLOW}MAS_APP_KIND${TEXT_RESET}      IBM Suite Maximo Application Suite Application Kind
  --mas-app-spec ${COLOR_YELLOW}MAS_APP_SPEC${TEXT_RESET}      IBM Suite Maximo Application Suite Application Spec


Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                    Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}  Secrets Manager key seperator string

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_suite_app_install_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-suite-app-install commit"
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;

      # MAS
      --mas-app-id)
        export MAS_APP_ID=$1 && shift
        ;;
      --mas-app-channel)
        export MAS_APP_CHANNEL=$1 && shift
        ;;
      --mas-app-catalog-source)
        export MAS_APP_CATALOG_SOURCE=$1 && shift
        ;;
      --mas-app-api-version)
        export MAS_APP_API_VERSION=$1 && shift
        ;;
      --mas-app-kind)
        export MAS_APP_KIND=$1 && shift
        ;;
      --mas-app-spec)
        export MAS_APP_SPEC=$1 && shift
        ;;


      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
       -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_suite_app_install_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_suite_app_install_help "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$ACCOUNT_ID" ]] && gitops_suite_app_install_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_suite_app_install_help "CLUSTER_ID is not set"


  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_suite_app_install_help "MAS_INSTANCE_ID is not set"
  [[ -z "$MAS_APP_ID" ]] && gitops_suite_app_install_help "MAS_APP_ID is not set"
  [[ -z "$MAS_APP_CHANNEL" ]] && gitops_suite_app_install_help "MAS_APP_CHANNEL is not set"
  [[ -z "$MAS_APP_CATALOG_SOURCE" ]] && gitops_suite_app_install_help "MAS_APP_CATALOG_SOURCE is not set"
  [[ -z "$MAS_APP_API_VERSION" ]] && gitops_suite_app_install_help "MAS_APP_API_VERSION is not set"
  [[ -z "$MAS_APP_KIND" ]] && gitops_suite_app_install_help "MAS_APP_KIND is not set"
  #[[ -z "$MAS_APP_SPEC" ]] && gitops_suite_app_install_help "MAS_APP_SPEC is not set"
  


  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_suite_app_install_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_suite_app_install_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_suite_app_install_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_suite_app_install_help "GIT_BRANCH is not set"
  fi

}

fetchDefaultMASAppSpec() {
  MAS_APP_ID=$1
  if [[ -n ${MAS_APP_ID} ]]; then
    if [[ "${MAS_APP_ID}" == "assist" ]]; then
      export DEFAULT_MAS_APP_SPEC="{bindings: {objectstorage: system}}"
    elif [[ "${MAS_APP_ID}" == "health" || "${MAS_APP_ID}" == "manage" ]]; then
      export DEFAULT_MAS_APP_SPEC="{}"
    elif [[ "${MAS_APP_ID}" == "hputilities" ]]; then
      export DEFAULT_MAS_APP_SPEC="{bindings: {appconnect: system, health: workspace}, components: {}, settings: {}}"
    elif [[ "${MAS_APP_ID}" == "iot" ]]; then
      export DEFAULT_MAS_APP_SPEC="{}"
    elif [[ "${MAS_APP_ID}" == "monitor" ]]; then
      export DEFAULT_MAS_APP_SPEC="{bindings: {mongo: system}, settings: {deployment: {size: '${MAS_APP_SETTINGS_MONITOR_DEPLOYMENT_SIZE}'}}}"
    elif [[ "${MAS_APP_ID}" == "mso" ]]; then
      export DEFAULT_MAS_APP_SPEC="{bindings: {mongo: system}}"
    elif [[ "${MAS_APP_ID}" == "optimizer" ]]; then
      export DEFAULT_MAS_APP_SPEC="{bindings: {mongo: system}, plan: '${MAS_APP_PLAN}'}"
    elif [[ "${MAS_APP_ID}" == "predict" ]]; then
      export DEFAULT_MAS_APP_SPEC="{bindings: {jdbc: '${MAS_APP_BINDINGS_JDBC}'}, components: {}, settings: {deployment: {size: '${MAS_APP_SETTINGS_PREDICT_DEPLOYMENT_SIZE}'}}, displayName: Predict Workspace}"
    elif [[ "${MAS_APP_ID}" == "safety" ]]; then
      export DEFAULT_MAS_APP_SPEC="{bindings: {jdbc: '${MAS_APP_BINDINGS_JDBC}'}, components: {}}"
    elif [[ "${MAS_APP_ID}" == "visualinspection" ]]; then
      export DEFAULT_MAS_APP_SPEC="{settings: {storage: {size: '${MAS_APP_SETTINGS_VISUALINSPECTION_STORAGE_SIZE}', storageClassName: '${MAS_APP_SETTINGS_VISUALINSPECTION_STORAGE_CLASS}'}}}"
    fi  
  fi



}
function gitops_suite_app_install() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_suite_app_install_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_suite_app_install_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  GITOPS_APPS_DIR=${GITOPS_CLUSTER_DIR}/apps

  export MAS_APP_NAMESPACE="mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}"
  export MAS_APP_SETTINGS_MONITOR_DEPLOYMENT_SIZE=${MAS_APP_SETTINGS_MONITOR_DEPLOYMENT_SIZE:-dev}
  #default value MAS_APP_PLAN=full specific to optimizer
  export MAS_APP_PLAN=${MAS_APP_PLAN:-full}
  export MAS_APP_SETTINGS_PREDICT_DEPLOYMENT_SIZE=${MAS_APP_SETTINGS_PREDICT_DEPLOYMENT_SIZE:-small}
  export MAS_APP_BINDINGS_JDBC=${MAS_APP_BINDINGS_JDBC:-system}
  export MAS_APP_SETTINGS_VISUALINSPECTION_STORAGE_SIZE=${MAS_APP_SETTINGS_VISUALINSPECTION_STORAGE_SIZE:-100Gi}
  export MAS_APP_SETTINGS_VISUALINSPECTION_STORAGE_CLASS=${MAS_APP_SETTINGS_VISUALINSPECTION_STORAGE_CLASS:-$DEFAULT_STORAGE_CLASS}


  #Fetch Default MAS App Spec
  fetchDefaultMASAppSpec ${MAS_APP_ID}

  #if [[ -n ${MAS_APP_SPEC} ]]; then
   # echo "Before-"${MAS_APP_SPEC}
    #export MAS_APP_SPEC=$(echo ${MAS_APP_SPEC} | yq -r '.')
   # echo "After-"${MAS_APP_SPEC}
  #fi
  echo "MAS App Spec ID ....................... ${COLOR_MAGENTA}${MAS_APP_SPEC}"
  export MAS_APP_SPEC=${MAS_APP_SPEC:-$DEFAULT_MAS_APP_SPEC}


  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Application Directory ................. ${COLOR_MAGENTA}${GITOPS_APPS_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path .......................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Instance ID ........................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "MAS App Spec ID ....................... ${COLOR_MAGENTA}${MAS_APP_SPEC}"
  echo_reset_dim "Default MAS App Spec ID ............... ${COLOR_MAGENTA}${DEFAULT_MAS_APP_SPEC}"
  reset_colors


  # Set up Suite secrets
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Configuring Suite secrets"
  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login


  # Define cluster-level secrets used
  # ---------------------------------------------------------------------------
  # Note that this cluster-level secret is set up by gitops-cluster



  # Get the cluster-level secrets used
  # ---------------------------------------------------------------------------
  # Note that this cluster-level secret is set up by gitops-mongo
  export SECRET_KEY_IBM_ENTITLEMENT=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}ibm_entitlement#image_pull_secret_b64



  # Instance-level secrets to use
  # ---------------------------------------------------------------------------
  # Note that these instance-level secrets are set up by gitops-license



  # Instance-level secrets to create
  # ---------------------------------------------------------------------------
  if [ -z $GIT_SSH ]; then
    export GIT_SSH="false"
  fi


  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_APPS_DIR}


  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Generating Argo Project and Applications"
  echo "- Project"
  jinja -X .+ $CLI_DIR/templates/gitops/appproject.yaml.j2 -o ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.appproject.yaml

  echo "- IBM Maximo Application Suite Core Platform $CLI_DIR/templates/gitops/ibm-mas-core-suite-app-install.yaml.j2"
  jinja -X .+ $CLI_DIR/templates/gitops/ibm-mas-core-suite-app-install.yaml.j2 -o ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.ibm-mas-core-suite-${MAS_APP_ID}-app-install.yaml

  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Restart application-controller ..."
    oc rollout restart statefulset/openshift-gitops-application-controller -n openshift-gitops
    echo_h2 'Waiting for rollout of application-controller to complete'
    oc rollout status statefulset/openshift-gitops-application-controller -n openshift-gitops

    # Add anyuid permissions to visualinspection service account
    if [[ "${MAS_APP_ID}" == "visualinspection" ]]; then
      oc adm policy add-scc-to-user anyuid system:serviceaccount:${MAS_APP_NAMESPACE}:ibm-mas-visualinspection-operator
    fi

    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_APPS_DIR "${GIT_COMMIT_MSG}"
    remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO

    argocd_login
    argocd_sync ${CLUSTER_ID}-watcher
    argocd_hard_refresh mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-app-install
    add_role_to_user mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}

    check_argo_app_synced mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-app-install ${CLUSTER_ID}-watcher mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}
    check_argo_app_healthy mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-app-install ${CLUSTER_ID}-watcher

    # Remove anyuid permissions from visualinspection service account
    if [[ "${MAS_APP_ID}" == "visualinspection" ]]; then
      oc adm policy remove-scc-from-user anyuid system:serviceaccount:${MAS_APP_NAMESPACE}:ibm-mas-visualinspection-operator
    fi

  fi


}

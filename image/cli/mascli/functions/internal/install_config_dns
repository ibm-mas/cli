#!/bin/bash
function install_config_dns() {
  echo
  echo_h2 "Configure Domain & Certificate Management"
  if prompt_for_confirm "Configure Custom Domain?"; then
    prompt_for_input "MAS Top Level Domain" MAS_DOMAIN

    echo
    echo -e "${COLOR_YELLOW}DNS Integrations:"
    echo "  1. Cloudflare"
    echo "  2. IBM Cloud Internet Services"
    echo "  3. AWS Route 53"
    echo "  4. None (I will set up DNS myself)"
    prompt_for_input "Select DNS Provider" DNS_PROVIDER_SELECTION "1"

    case $DNS_PROVIDER_SELECTION in
      1|cloudflare)
        # User has chosen to set up DNS integration with Cloudflare
        prompt_for_input "Cloudflare e-mail" CLOUDFLARE_EMAIL
        prompt_for_input "Cloudflare API Token" CLOUDFLARE_APITOKEN
        prompt_for_input "Cloudflare Zone" CLOUDFLARE_ZONE
        prompt_for_input "Cloudflare Subdomain" CLOUDFLARE_SUBDOMAIN
        DNS_PROVIDER=cloudflare

        echo
        echo -e "${COLOR_YELLOW}Certificate Issuer:"
        echo "  1. LetsEncrypt (Production)"
        echo "  2. LetsEncrypt (Staging)"
        echo "  3. Self-Signed"
        prompt_for_input "Select Certificate Issuer" CLUSTER_ISSUER_SELECTION "1"
        case $CLUSTER_ISSUER_SELECTION in
          1|prod)
            MAS_CLUSTER_ISSUER="${MAS_INSTANCE_ID}-cloudflare-le-prod"
            ;;
          2|staging)
            MAS_CLUSTER_ISSUER="${MAS_INSTANCE_ID}-cloudflare-le-stg"
            ;;
          3|self)
            MAS_CLUSTER_ISSUER=''
            ;;
          *)
            MAS_CLUSTER_ISSUER=CLUSTER_ISSUER_SELECTION
            ;;
        esac
        ;;
      2|cis)
        # User has chosen to set up DNS integration with Cloudflare
        prompt_for_input "CIS e-mail" CIS_EMAIL
        prompt_for_input "CIS API Key" CIS_APIKEY
        prompt_for_input "CIS CRN" CIS_CRN
        prompt_for_input "CIS Subdomain" CIS_SUBDOMAIN
        DNS_PROVIDER=cis

        echo
        echo -e "${COLOR_YELLOW}Certificate Issuer:"
        echo "  1. LetsEncrypt (Production)"
        echo "  2. LetsEncrypt (Staging)"
        echo "  3. Self-Signed"
        prompt_for_input "Select Certificate Issuer" CLUSTER_ISSUER_SELECTION "1"
        case $CLUSTER_ISSUER_SELECTION in
          1|prod)
            MAS_CLUSTER_ISSUER="${MAS_INSTANCE_ID}-cis-le-prod"
            ;;
          2|staging)
            MAS_CLUSTER_ISSUER="${MAS_INSTANCE_ID}-cis-le-stg"
            ;;
          3|self)
            MAS_CLUSTER_ISSUER=''
            ;;
          *)
            MAS_CLUSTER_ISSUER=CLUSTER_ISSUER_SELECTION
            ;;
        esac
        ;;
      3|route53)
        # User has chosen to set up DNS integration with AWS Route 53
        echo ""
        echo "Provide your AWS account access key ID & secret access key."
        echo "This will be used to authenticate into the AWS account where your AWS Route 53 hosted zone instance is located."
        echo ""
        prompt_for_secret "AWS Access Key ID" AWS_ACCESS_KEY_ID "Re-use saved AWS Access Key ID?"
        prompt_for_secret "AWS Secret Access Key" AWS_SECRET_ACCESS_KEY "Re-use saved AWS Secret Access Key?"
        echo ""
        echo "Provide your AWS Route 53 hosted zone instance details."
        echo "This information will be used to create webhook resources between your cluster and your AWS Route 53 instance (cluster issuer and cname records)"
        echo "in order for it to be able to resolve DNS entries for all the subdomains created for your Maximo Application Suite instance."
        echo ""
        echo "Therefore, the AWS Route 53 subdomain + the AWS Route 53 hosted zone name defined, when combined, needs to match with the chosen MAS Top Level domain, otherwise the DNS records won't be able to get resolved."
        echo ""
        echo -e "${COLOR_YELLOW}Example:"
        echo "MAS Top Level Domain: masinst1.mycompany.com"
        echo "AWS Route 53 hosted zone name: mycompany.com"
        echo "AWS Route 53 subdomain: masinst1"
        echo ""
        echo -e "${COLOR_YELLOW}Your MAS Top Level Domain: $MAS_DOMAIN"
        echo ""
        prompt_for_input "AWS Route 53 hosted zone name" ROUTE53_HOSTED_ZONE_NAME && export ROUTE53_HOSTED_ZONE_NAME
        prompt_for_input "AWS Route 53 hosted zone region" ROUTE53_HOSTED_ZONE_REGION && export ROUTE53_HOSTED_ZONE_REGION
        prompt_for_input "AWS Route 53 subdomain" ROUTE53_SUBDOMAIN && export ROUTE53_SUBDOMAIN
        prompt_for_input "AWS Route 53 e-mail" ROUTE53_EMAIL && export ROUTE53_EMAIL

        DNS_PROVIDER=route53
        MAS_CLUSTER_ISSUER="${MAS_INSTANCE_ID}-route53-le-prod"
        ;;
      4|none)
        # User has chosen to set up DNS themselves
        DNS_PROVIDER=''
        echo
        echo -e "${COLOR_YELLOW}Certificate Issuer:"
        echo "  1. Self-Signed"
        prompt_for_input "Select Certificate Issuer" CLUSTER_ISSUER_SELECTION "1"
        case $CLUSTER_ISSUER_SELECTION in
          1|self)
            MAS_CLUSTER_ISSUER=''
            ;;
          *)
            MAS_CLUSTER_ISSUER=CLUSTER_ISSUER_SELECTION
            ;;
        esac
        MAS_CLUSTER_ISSUER=''
        ;;
      *)
        exit 1
        ;;
    esac
  else
    # User has chosen to use the default MAS domain, but can still choose a certificate issuer if they want (not supported yet)
    MAS_DOMAIN=""
    MAS_CLUSTER_ISSUER=""
    # echo
    # echo -e "${COLOR_YELLOW}Certificate Issuer:"
    # echo "  1. Self-Signed"
    # prompt_for_input "Select Certificate Issuer" CLUSTER_ISSUER_SELECTION "1"
    # case $CLUSTER_ISSUER_SELECTION in
    #   1|self)
    #     MAS_CLUSTER_ISSUER=''
    #     ;;
    #   *)
    #     MAS_CLUSTER_ISSUER=CLUSTER_ISSUER_SELECTION
    #     ;;
    # esac
  fi
}

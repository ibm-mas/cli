#!/bin/bash

COLOR_RED=`tput setaf 1`
COLOR_GREEN=`tput setaf 2`
COLOR_YELLOW=`tput setaf 3`
COLOR_BLUE=`tput setaf 4`
COLOR_MAGENTA=`tput setaf 5`
COLOR_CYAN=`tput setaf 6`
COLOR_RESET=`tput sgr0`

TEXT_BOLD=$(tput bold)
TEXT_DIM=$(tput dim)
TEXT_UNDERLINE=$(tput smul)
TEXT_RESET=$(tput sgr0)

H2_COUNT=1
H3_COUNT=1

function reset_colors() {
  echo -ne "${COLOR_RESET}\033[1K"
}

function echo_h1() {
  echo -e "${TEXT_BOLD}${TEXT_UNDERLINE}${1}${TEXT_RESET}"
}
function echo_h2() {
  msg=$1
  prefix=$2
  echo -e "${prefix}${TEXT_UNDERLINE}${H2_COUNT}. ${msg}${TEXT_RESET}"
  H2_COUNT=$(($H2_COUNT + 1))
  H3_COUNT=1
}

function echo_h3() {
  msg=$1
  prefix=$2
  echo -e "${prefix}${TEXT_UNDERLINE}${H2_COUNT}.${H3_COUNT}. ${msg}${TEXT_RESET}"
  H3_COUNT=$(($H3_COUNT + 1))
}

function echo_h4() {
  msg=$1
  prefix=$2
  echo -e "${prefix}${TEXT_UNDERLINE}${msg}${TEXT_RESET}"
}

function echo_warning() {
  echo -e "${COLOR_RED}$1${COLOR_RESET}"
}

function echo_highlight() {
  echo "${COLOR_CYAN}$1${COLOR_RESET}"
}

function echo_green() {
  echo "${COLOR_GREEN}$1${COLOR_RESET}"
}

function echo_blue() {
  echo "${COLOR_BLUE}$1${COLOR_RESET}"
}

function echo_hr1() {
  echo "==============================================================================="
}

function echo_hr2() {
  echo "-------------------------------------------------------------------------------"
}

function build_license_link_by_mas_version() {
  version=$1
  link="https://ibm.biz/MAS"$version"-License"
  echo $link
}

# Prompt for confirmation to continue
# -----------------------------------------------------------------------------
confirm() {
  read -r -p "${COLOR_YELLOW}${1:-Proceed? [y/N]} ${COLOR_MAGENTA}" response
  case "$response" in
    [yY][eE][sS]|[yY])
      export ALREADY_CONFIRMED="true"
      true
      ;;
    [nN][oO]|[nN])
      false
      ;;
    *)
      false
      ;;
  esac
}

confirm_default_yes() {
  read -r -p "${COLOR_YELLOW}${1:-Proceed? [Y/n]} ${COLOR_MAGENTA}" response
  case "$response" in
    [yY][eE][sS]|[yY])
      export ALREADY_CONFIRMED="true"
      true
      ;;
    [nN][oO]|[nN])
      export ALREADY_CONFIRMED="true"
      false
      ;;
    *)
      true
      ;;
  esac
}

function prompt_for_number(){
  msg=$1
  varname=$2
  # When override is set, the default provided in $3 will override the saved default
  override=$4

  if [[ -z "${!varname}" || "$override" == "override" ]]; then
    # Use the script default
    default=$3
  else
    # Use the saved default
    default=${!varname}
  fi

  while :; do

    if [[ "${default}" != "" ]]; then
      read -e -p "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}> " -i "${default}" input
    else
      read -p "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}> " input
    fi
    echo -ne "${COLOR_RESET}\033[1K"
    # https://stackoverflow.com/a/13717788
    re='^[1-9][0-9]*$'
    if [[ $input =~ $re ]] ; then
      break
    fi
  done
  printf -v "$varname" "%s" "$input"
}

function prompt_for_secret(){
  msg=$1
  varname=$2
  # When override is set, the default provided in $3 will override the saved default
  reuse_msg=$3

  # Use the saved default
  default=${!varname}

  if [[ "${default}" != "" && "${reuse_msg}" != "" ]]; then
    if ! confirm_default_yes "$reuse_msg [Y/n]"; then
      input=$(/bin/systemd-ask-password "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}> ")
      echo -ne "${COLOR_RESET}\033[1K"
      # https://stackoverflow.com/a/13717788
      printf -v "$varname" "%s" "$input"
    fi
  else
    input=$(/bin/systemd-ask-password "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}> ")
    echo -ne "${COLOR_RESET}\033[1K"
    # https://stackoverflow.com/a/13717788
    printf -v "$varname" "%s" "$input"
  fi
  echo -ne "${COLOR_RESET}\033[1K"
}


function prompt_for_input(){
  msg=$1
  varname=$2
  # When override is set, the default provided in $3 will override the saved default
  override=$4

  if [[ -z "${!varname}" || "$override" == "override" ]]; then
    # Use the script default
    default=$3
  else
    # Use the saved default
    default=${!varname}
  fi

  if [[ "${default}" != "" ]]; then
    read -e -p "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}> " -i "${default}" input
  else
    read -p "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}> " input
  fi
  echo -ne "${COLOR_RESET}\033[1K"
  # https://stackoverflow.com/a/13717788
  printf -v "$varname" "%s" "$input"
}

function check_project_exists(){
  varname=$1
  oc get "project/$varname" > /dev/null 2>&1

  if [ "$?" == "0" ]; then
    true
  else
    false
  fi
}

function prompt_for_confirm() {
  msg=$1
  varname=$2
  if confirm "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}[y/N]"; then
    echo -ne "${COLOR_RESET}\033[1K"
    if [[ "$varname" != "" ]]; then
      printf -v "$varname" "%s" "true"
    fi
    true
  else
    echo -ne "${COLOR_RESET}\033[1K"
    if [[ "$varname" != "" ]]; then
      printf -v "$varname" "%s" "false"
    fi
    false
  fi
}

function prompt_for_confirm_default_yes() {
  msg=$1
  varname=$2
  if confirm_default_yes "${COLOR_YELLOW}$msg ${COLOR_MAGENTA}[Y/n]"; then
    echo -ne "${COLOR_RESET}\033[1K"
    if [[ "$varname" != "" ]]; then
      printf -v "$varname" "%s" "true"
    fi
    true
  else
    echo -ne "${COLOR_RESET}\033[1K"
    if [[ "$varname" != "" ]]; then
      printf -v "$varname" "%s" "false"
    fi
    false
  fi
}

function update_ansible_collections() {
  if [[ "$UPDATE_ANSIBLE" == "true" || "$ANSIBLE_UPDATE" == "true" ]]; then
    if [[ "$DEV_MODE" == "true" ]]; then
      echo
      echo_h2 "Updating ansible collection from local build"
      ansible-galaxy collection build ~/ibm-mas/ansible-devops/ibm/mas_devops --force || exit 1
      ansible-galaxy collection install ibm-mas_devops-14.0.0.tar.gz --force --no-deps || exit 1
    else
      echo
      echo_h2 "Updating ansible collections from Galaxy"
      ansible-galaxy collection install ibm.mas_devops --force || exit 1
    fi
  fi
}

function install_dependencies_ubuntu() {
  # APT package installations
  # python3-pip is required to install additional python packages
  # ansible is required for ansible-galaxy command to be available
  sudo apt install python3-pip ansible

  # Python package installations
  python3 -m pip install ansible junit_xml pymongo xmljson kubernetes==12.0.1 openshift==0.12.1

  # Confirm versions
  python3 --version
  ansible-playbook --version
}

function detect_airgap() {
  oc get ImageContentSourcePolicy ibm-mas-and-dependencies &> /dev/null
  if [[ "$?" == "0" ]]; then
    export AIRGAP_MODE=true
  else
    unset AIRGAP_MODE
  fi
}

# detect_sno function checks the number of nodes in the cluster. If there is only one node, then the cluster is an SNO
# For SNO, we have only one master node and zero worker nodes
# We check for the number of lines the command oc get nodes returns. If it is equal to 2, then the cluster is SNO
# The reason we check for 2 is that the first line is the heading. Following is an example of the output
#                        NAME                           STATUS   ROLES           AGE   VERSION
#                        ip-10-0-141-250.ec2.internal   Ready    master,worker   22h   v1.21.11+5cc9227
# when we run wc -l shell script command, wc gets the word count and -l gets the number of lines.
function detect_sno() {
  sno_num_nodes=$(oc get nodes | wc -l | xargs)
  if [[ "$sno_num_nodes" == "2" ]]; then
    export SNO_MODE=true
  else
    unset SNO_MODE
  fi
}

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
{% if wait_for_install == true %}
  name: mas-uninstall-after-install
{% else %}
  name: mas-uninstall
{% endif %}
spec:
{% if wait_for_install == true %}
  workspaces:
    # Shared storage to hold mustgather output for tasks
    - name: shared-mustgather
{% endif %}

  params:
    - name: image_pull_policy
      type: string
      default: IfNotPresent
      description: Tekton Pipeline image pull policy (for ibmmas/cli images)

    # MAS Config
    # -------------------------------------------------------------------------
    - name: mas_instance_id
      type: string
      default: ""
      description: Instance ID of the MAS installation to remove from the cluster, if not provided the uninstall can still be used to remove shared dependencies from the cluster

    # Optional parameters to uninstall dependencies
    # -------------------------------------------------------------------------
    - name: cluster_monitoring_action
      type: string
      description: Optional. Used to uninstall Cluster Monitoring
      default: "none"
    - name: cert_manager_provider
      type: string
      description: Optional. Cert Manager provider
      default: ""
    - name: cert_manager_action
      type: string
      description: Optional. Used to uninstall Cert Manager
      default: "none"
    - name: common_services_action
      type: string
      description: Optional. Used to uninstall IBM Common Services
      default: "none"
    - name: ibm_catalogs_action
      type: string
      description: Optional. Used to uninstall IBM Catalogs
      default: "none"
    - name: mongodb_action
      type: string
      description: Optional. Used to uninstall MongoDB
      default: "none"
    - name: mas_wipe_mongo_data
      type: string
      description: Optional. Used to wipe content from the MAS Core MongoDB database during MAS uninstall
      default: ""
    - name: sls_action
      type: string
      description: Optional. Used to uninstall SLS
      default: "none"
    - name: uds_action
      type: string
      description: Optional. Used to uninstall UDS or DRO
      default: "none"

  tasks:
    # Content
    # -------
    # 1. Uninstall IBM Maximo Application Suite Applications
    # 2. Uninstall IBM Maximo Application Suite
    # 3. Uninstall IBM Suite Licensing Service
    # 4. Uninstall MongoDB
    # 5. Uninstall IBM User Data Services
    # 6. Uninstall IBM Cert Manager
    # 7. Uninstall IBM Common Services
    # 8. Uninstall IBM Catalogs
    # 9. Uninstall Cluster Monitoring


{% if wait_for_install == true %}
    # 0. Wait for the install pipeline to complete
    # -------------------------------------------------------------------------
    - name: wait-for-install
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
      taskRef:
        kind: Task
        name: mas-fvt-wait-for-install
{% endif %}

    # 1. Uninstall IBM Maximo Application Suite Applications
    # -------------------------------------------------------------------------
    # 1.0 Start uninstall

    # 1.1 Uninstall Visual Inspection
    - name: app-uninstall-visualinspection
{% if wait_for_install == true %}
      runAfter:
        - wait-for-install
{% endif %}
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: visualinspection
        - name: devops_suite_name
          value: app-visualinspection-uninstall

    # 1.2 Uninstall Assist
    - name: app-uninstall-assist
{% if wait_for_install == true %}
      runAfter:
        - wait-for-install
{% endif %}
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: assist
        - name: devops_suite_name
          value: app-assist-uninstall

    # 1.3 Uninstall Health & Predict Utilities
    - name: app-uninstall-hputilities
{% if wait_for_install == true %}
      runAfter:
        - wait-for-install
{% endif %}
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: hputilities
        - name: devops_suite_name
          value: app-hputilities-uninstall

    # 1.4 Uninstall Optimizer
    - name: app-uninstall-optimizer
{% if wait_for_install == true %}
      runAfter:
        - wait-for-install
{% endif %}
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: optimizer
        - name: devops_suite_name
          value: app-optimizer-uninstall

    # 1.5 Uninstall Predict
    - name: app-uninstall-predict
{% if wait_for_install == true %}
      runAfter:
        - wait-for-install
{% endif %}
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: predict
        - name: devops_suite_name
          value: app-predict-uninstall

    # 1.6 Uninstall Manage
    - name: app-uninstall-manage
      runAfter:
        - app-uninstall-predict
        - app-uninstall-hputilities
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: manage
        - name: devops_suite_name
          value: app-manage-uninstall

    # 1.7 Uninstall Monitor
    - name: app-uninstall-monitor
      runAfter:
        - app-uninstall-predict
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: monitor
        - name: devops_suite_name
          value: app-monitor-uninstall

    # 1.8 Uninstall IoT
    - name: app-uninstall-iot
      runAfter:
        - app-uninstall-monitor
      taskRef:
        kind: Task
        name: mas-devops-suite-app-uninstall
      params:
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_app_id
          value: iot
        - name: devops_suite_name
          value: app-iot-uninstall

    # 2. Uninstall IBM Maximo Application Suite
    # -------------------------------------------------------------------------
    - name: uninstall-suite
      runAfter:
        - app-uninstall-iot
        - app-uninstall-visualinspection
        - app-uninstall-assist
        - app-uninstall-optimizer
        - app-uninstall-manage
      taskRef:
        kind: Task
        name: mas-devops-suite-uninstall
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: mas_instance_id
          value: $(params.mas_instance_id)
        - name: mas_wipe_mongo_data
          value: $(params.mas_wipe_mongo_data)
        - name: devops_suite_name
          value: suite-uninstall


    # 3. Uninstall IBM Suite Licensing Service
    # -------------------------------------------------------------------------
    - name: uninstall-sls
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: sls_action
          value: $(params.sls_action)
        - name: devops_suite_name
          value: dependencies-sls
      taskRef:
        kind: Task
        name: mas-devops-sls
      when:
        - input: "$(params.sls_action)"
          operator: in
          values: ["uninstall"]
      runAfter:
        - uninstall-suite


    # 4. Uninstall MongoDB
    # -------------------------------------------------------------------------
    - name: uninstall-mongodb
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: mongodb_action
          value: $(params.mongodb_action)
        - name: devops_suite_name
          value: dependencies-mongodb
      taskRef:
        kind: Task
        name: mas-devops-mongodb
      when:
        - input: "$(params.mongodb_action)"
          operator: in
          values: ["uninstall"]
      runAfter:
        - uninstall-sls


    # 5. Uninstall IBM User Data Services (or DRO)
    # -------------------------------------------------------------------------
    - name: uninstall-uds
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: uds_action
          value: $(params.uds_action)
      taskRef:
        kind: Task
        name: mas-devops-uds
      when:
        - input: "$(params.uds_action)"
          operator: in
          values: ["uninstall"]
      runAfter:
        - uninstall-mongodb

    # 6. Uninstall IBM Cert Manager
    # -------------------------------------------------------------------------
    - name: uninstall-cert-manager
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: cert_manager_action
          value: $(params.cert_manager_action)
        - name: cert_manager_provider
          value: $(params.cert_manager_provider)
        - name: devops_suite_name
          value: setup-cert-manager
      taskRef:
        kind: Task
        name: mas-devops-cert-manager
      when:
        - input: "$(params.cert_manager_action)"
          operator: in
          values: ["uninstall"]
      runAfter:
        - uninstall-uds


    # 7. Uninstall IBM Common Services
    # -------------------------------------------------------------------------
    - name: uninstall-common-services
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: common_services_action
          value: $(params.common_services_action)
        - name: devops_suite_name
          value: setup-common-services
      taskRef:
        kind: Task
        name: mas-devops-common-services
      when:
        - input: "$(params.common_services_action)"
          operator: in
          values: ["uninstall"]
      runAfter:
        - uninstall-cert-manager


    # 8. Uninstall IBM Catalogs
    # -------------------------------------------------------------------------
    - name: uninstall-ibm-catalogs
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: ibm_catalogs_action
          value: $(params.ibm_catalogs_action)
        - name: devops_suite_name
          value: setup-ibm-catalogs
      taskRef:
        kind: Task
        name: mas-devops-ibm-catalogs
      when:
        - input: "$(params.ibm_catalogs_action)"
          operator: in
          values: ["uninstall"]
      runAfter:
        - uninstall-common-services


    # 9. Uninstall Cluster Monitoring
    # -------------------------------------------------------------------------
    - name: uninstall-cluster-monitoring
      params:
        - name: image_pull_policy
          value: $(params.image_pull_policy)
        - name: cluster_monitoring_action
          value: $(params.cluster_monitoring_action)
        - name: devops_suite_name
          value: setup-cluster-monitoring
      taskRef:
        kind: Task
        name: mas-devops-cluster-monitoring
      when:
        - input: "$(params.cluster_monitoring_action)"
          operator: in
          values: ["uninstall"]
      runAfter:
        - uninstall-ibm-catalogs


{% if wait_for_install == true %}
  # In FVT only this is the time to take a must-gather and finalize the result
  # ---------------------------------------------------------------------------
  finally:
    # Collect must-gather
    # -------------------------------------------------------------------------
    - name: must-gather
      taskRef:
        kind: Task
        name: mas-devops-must-gather
      params:
        - name: base_output_dir
          value: "/workspace/mustgather/$(context.pipelineRun.name)"
      workspaces:
        - name: mustgather
          workspace: shared-mustgather

    # Finalize the record in the FVT database
    # -------------------------------------------------------------------------
    - name: finalize
      taskRef:
        kind: Task
        name: mas-fvt-finalize
{% endif %}

#!/bin/bash

. $CLI_DIR/functions/pipeline_config_additional_configs
. $CLI_DIR/functions/pipeline_config_applications
. $CLI_DIR/functions/pipeline_config_db2
. $CLI_DIR/functions/pipeline_config_kafka
. $CLI_DIR/functions/pipeline_config_dns
. $CLI_DIR/functions/pipeline_config_sno
. $CLI_DIR/functions/pipeline_config_storage_classes
. $CLI_DIR/functions/pipeline_config_storage_classes_sno
. $CLI_DIR/functions/pipeline_config_turbonomic
. $CLI_DIR/functions/pipeline_config_manage_storage_classes
. $CLI_DIR/functions/pipeline_config_iot_storage_classes
. $CLI_DIR/functions/pipeline_config_advanced
. $CLI_DIR/functions/pipeline_config_workload_scale

function pipeline_config() {
  echo_h2 "IBM Maximo Operator Catalog Selection"
  echo "${TEXT_DIM}Select how you want to manage updates in this cluster:"
  echo "- For automatic updates select to use the online dynamic catalog.  Updates will be delivered as soon as they are published by IBM"
  echo "- To take direct control over when updates are applied to the cluster select to use a static catalog instead.  Updates will be delivered only when you update the catalog source in your cluster"
  echo
  reset_colors

  if [[ -n "$DEV_MODE" ]]; then
    # Development mode
    prompt_for_input "Select Catalog Source" MAS_CATALOG_VERSION "v8-master-amd64"
    prompt_for_input "Select Subscription Channel" MAS_CHANNEL "8.11.x-dev"
  elif [[ -z "$AIRGAP_MODE" ]]; then
    prompt_for_confirm "Enable automatic updates with the online dynamic catalog?" USE_ONLINE_CATALOG
    if [[ "$USE_ONLINE_CATALOG" == "true" ]]; then
      # Dynamic Catalog Source (Connected Install)
      MAS_CATALOG_VERSION=v8-amd64

      echo -e "${COLOR_YELLOW}MAS Version:"
      echo "  1. 8.11"
      echo "  2. 8.10"
      prompt_for_input "Select Subscription Channel" MAS_CHANNEL_SELECTION "1"

      case $MAS_CHANNEL_SELECTION in
        1|8.11|8.11.x)
          MAS_CHANNEL=8.11.x
          ;;


        2|8.10|8.10.x)
          MAS_CHANNEL=8.10.x
          ;;

        *)
          MAS_CHANNEL=$MAS_CHANNEL_SELECTION
          ;;
      esac
    else
      # Static Catalog Source (Connected Install)
      choose_mas_version
    fi
  else
    # Static Catalog Source (Disconnected Install)
    choose_mas_version
  fi

  # Determine SLS version specific prompts
  sls_prompt_selection

  # Present a the MAS license information
  # ---------------------------------------------------------------------------
  case $MAS_CHANNEL in
    8.11.x)
      MAS_LICENSE_LINK=$( build_license_link_by_mas_version "811" )
      ;;
    8.10.x)
      MAS_LICENSE_LINK=$( build_license_link_by_mas_version "810" )
      ;;
  esac

  echo
  echo_h2 "License Terms"
  echo -e "To continue with the installation, you must accept the license terms: ${COLOR_CYAN}${TEXT_UNDERLINE}${MAS_LICENSE_LINK}"
  echo
  reset_colors
  prompt_for_confirm_default_yes "Do you accept the license terms?" LICENSE_RESPONSE

  if [[ "$LICENSE_RESPONSE" == "false" ]]; then
    exit 1
  fi

  echo
  echo_h2 "Configure MAS Instance"

  # Instance ID regex: ^[a-z][a-z0-9-]{1,10}[a-z0-9]$
  if [[ ! -z "$1" ]]; then
    MAS_INSTANCE_ID=$1
  fi
  echo "${TEXT_DIM}Instance ID restrictions:"
  echo " - Must be 3-12 characters long"
  echo " - Must only use lowercase letters, numbers, and hypen (-) symbol"
  echo " - Must start with a lowercase letter"
  echo " - Must end with a lowercase letter or a number"
  reset_colors
  prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID
  if [[ ! "${MAS_INSTANCE_ID}" =~ ^[a-z][a-z0-9-]{1,10}[a-z0-9]$ ]]; then
    echo_warning "Instance ID (${MAS_INSTANCE_ID}) does not meet requirements"
    exit 1
  fi
  echo

  # Workspace ID regex: ^[a-z][a-z0-9]{2,11}$
  echo "${TEXT_DIM}Workspace ID restrictions:"
  echo " - Must be 3-12 characters long"
  echo " - Must only use lowercase letters and numbers"
  echo " - Must start with a lowercase letter"
  reset_colors
  prompt_for_input "MAS Workspace ID" MAS_WORKSPACE_ID
  if [[ ! "${MAS_WORKSPACE_ID}" =~ ^[a-z][a-z0-9]{2,11}$ ]]; then
    echo_warning "Workspace ID (${MAS_WORKSPACE_ID}) does not meet requirements"
    exit 1
  fi
  echo

  # Workspace display name regex: ^.{3,300}$
  echo "${TEXT_DIM}Workspace display name restrictions:"
  echo " - Must be 3-300 characters long"
  reset_colors
  prompt_for_input "MAS Workspace Display Name" MAS_WORKSPACE_NAME
  if [[ ! "${MAS_WORKSPACE_NAME}" =~ ^.{3,300}$ ]]; then
    echo_warning "Workspace name (${MAS_WORKSPACE_NAME}) does not meet requirements"
    exit 1
  fi

  echo
  echo_h2 "Configure Operation Mode"
  echo "${TEXT_DIM}Maximo Application Suite can be installed in a non-production mode for internal development and testing, this setting cannot be changed after installation:"
  echo " - All applications, add-ons, and solutions have 0 (zero) installation AppPoints in non-production installations."
  echo " - These specifications are also visible in the metrics that are shared with IBM and in the product UI."
  echo
  reset_colors
  echo -e "Operational Mode:"
  echo "  1. Production Mode (default)"
  echo "  2. Non-Production Mode"
  echo
  prompt_for_input "Select Operational Mode" PROD_MODE_SELECTION "1"

  case $MAS_CHANNEL_SELECTION in
    1)
      USE_NON_PROD_MODE=false
      ;;
    2)
      USE_NON_PROD_MODE=true
      MAS_ANNOTATIONS="mas.ibm.com/operationalMode=nonproduction"
      ;;
    *)
      echo_warning "Invalid Selection"
      exit 1
      ;;
  esac

  config_pipeline_sno
  config_pipeline_dns
  config_pipeline_applications
  config_pipeline_db2
  config_pipeline_kafka
  config_pipeline_turbonomic
  config_pipeline_additional_configs

  if [[ "$SNO_MODE" == "true" ]]; then
    config_pipeline_storage_classes_sno
  else
    config_pipeline_storage_classes
  fi
  config_pipeline_iot_storage_classes #10
  config_pipeline_manage_storage_classes #11
  config_pipeline_advanced #12

  echo ""
  if [[ "$DEV_MODE" == "true" && -z "$AIRGAP_MODE" ]]; then
    # Development Mode -- offer the ability to set MAS and SLS source independently
    echo_h2 "Configure Artifactory"
    prompt_for_input "Artifactory Username" ARTIFACTORY_USERNAME
    prompt_for_secret "Artifactory Token" ARTIFACTORY_TOKEN "Re-use saved Artifactory Token?"

    echo
    echo_h2 "Configure IBM Container Registry"
    prompt_for_secret "IBM Entitlement Key" IBM_ENTITLEMENT_KEY "Re-use saved IBM Entitlement Key?"

    echo
    echo_h2 "Configure IBM Container Registry (MAS)"
    prompt_for_input "IBM Container Registry (cp)" MAS_ICR_CP docker-na-public.artifactory.swg-devops.com/wiotp-docker-local override
    prompt_for_input "IBM Container Registry (cpopen)" MAS_ICR_CPOPEN docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen override

    echo
    echo_h2 "Configure IBM Container Registry (SLS)"
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      prompt_for_input "IBM Container Registry (cp)" SLS_ICR_CP docker-na-public.artifactory.swg-devops.com/wiotp-docker-local override
    fi
    prompt_for_input "IBM Container Registry (cpopen)" SLS_ICR_CPOPEN docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen override
  else
    # Production Mode -- everything comes from the same registry (IBM container registry)
    echo_h2 "Configure IBM Container Registry"
    prompt_for_secret "IBM Entitlement Key" IBM_ENTITLEMENT_KEY "Re-use saved IBM Entitlement Key?"

    # Use defaults
    MAS_ICR_CP=cp.icr.io/cp
    MAS_ICR_CPOPEN=icr.io/cpopen

    SLS_ICR_CPOPEN=icr.io/cpopen
    if [[ "$SLS_PROMPT_ICR_CP" == "true" ]]; then
      SLS_ICR_CP=cp.icr.io/cp
    fi
  fi

  echo
  echo_h2 "Configure Product License"

  if [[ "$SLS_PROMPT_LICENSE_ID" == "true" ]]; then
    prompt_for_input "License ID" SLS_LICENSE_ID
  fi

  prompt_for_input "License File" SLS_LICENSE_FILE_LOCAL
  if [[ ! -e "$SLS_LICENSE_FILE_LOCAL" ]]; then
    echo_warning "Error: File does not exist: $SLS_LICENSE_FILE_LOCAL"
    exit 1
  fi

  if [[ "$SLS_PROMPT_LICENSE_ID" == "true" ]]; then
    SLS_LICENSE_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"
  else
    SLS_ENTITLEMENT_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"
  fi

  echo
  echo_h2 "Configure UDS"
  prompt_for_input "UDS Contact Email" UDS_CONTACT_EMAIL
  prompt_for_input "UDS Contact First Name" UDS_CONTACT_FIRSTNAME
  prompt_for_input "UDS Contact Last Name" UDS_CONTACT_LASTNAME
}

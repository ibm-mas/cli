#!/usr/bin/env bash

function gitops_db2u_jdbc_config_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_db2u_jdbc_config [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}    Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID

IBM Maximo Application Suite:
      -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}   IBM Suite Maximo Application Suite Instance ID      
      --mas-app-id ${COLOR_YELLOW}MAS_APP_ID${TEXT_RESET}                 IBM Suite Maximo Application Suite App that will use this db2u instance      
      --mas-workspace-id ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}     MAS WORKSPACE ID

IBM DB2U:                       
      --tls-version ${COLOR_YELLOW}TLS_VERSION${TEXT_RESET}                                       TLS Version
      --db2-ldap-username ${COLOR_YELLOW}DB2_LDAP_USERNAME${TEXT_RESET}                           DB2 LDAP Username to create
      --db2-ldap-password ${COLOR_YELLOW}DB2_LDAP_PASSWORD${TEXT_RESET}                           DB2 LDAP Password to create

IBM DB2U JDBC Configuration:
      --mas-config-scope ${COLOR_YELLOW}MAS_CONFIG_SCOPE${TEXT_RESET}             Supported values are 'system', 'ws', 'app', or 'wsapp'

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                     Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}   Secrets Manager key seperator string      

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_db2u_jdbc_config_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-db2u-jdbc-config commit"
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # MAS
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -W|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      --mas-app-id)
        export MAS_APP_ID=$1 && shift
        ;;
      --mas-config-scope)
        export MAS_CONFIG_SCOPE=$1 && shift
        ;;      

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;

      # DB2
      --tls-version )
        export TLS_VERSION=$1 && shift
        ;;
      --db2-ldap-username )
        export DB2_LDAP_USERNAME=$1 && shift
        ;;
      --db2-ldap-password )
        export DB2_LDAP_PASSWORD=$1 && shift
        ;;
      --db2-internal )
        export DB2_INTERNAL=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_db2u_jdbc_config_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_db2u_jdbc_config_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$SM_AWS_ACCESS_KEY_ID" ]] &&  gitops_db2u_jdbc_config_help "SM_AWS_ACCESS_KEY_ID is not set"
  [[ -z "$SM_AWS_SECRET_ACCESS_KEY" ]] && gitops_db2u_jdbc_config_help "SM_AWS_SECRET_ACCESS_KEY is not set"
  [[ -z "$SM_AWS_REGION" ]] && gitops_db2u_jdbc_config_help "SM_AWS_REGION is not set"

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_db2u_jdbc_config_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_db2u_jdbc_config_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_db2u_jdbc_config_help "CLUSTER_ID is not set"
  
  #MAS
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_db2u_jdbc_config_help "MAS_INSTANCE_ID is not set"
  [[ -z "$MAS_CONFIG_SCOPE" ]] && gitops_db2u_jdbc_config_help "MAS_CONFIG_SCOPE is not set"
  if [[ "$MAS_CONFIG_SCOPE" == "wsapp" || "$MAS_CONFIG_SCOPE" == "ws" ]]; then
    [[ -z "$MAS_WORKSPACE_ID" ]] && gitops_db2u_jdbc_config_help "MAS_WORKSPACE_ID is not set"
  fi
  [[ -z "$MAS_APP_ID" ]] && gitops_db2u_jdbc_config_help "MAS_APP_ID is not set"
  
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_db2u_jdbc_config_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_db2u_jdbc_config_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_db2u_jdbc_config_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_db2u_jdbc_config_help "GIT_BRANCH is not set"
  fi

}

function wait_for_db2ucluster_crd(){
  # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True STARTS  
  wait_period=0
  while true
  do
    wait_period=$(($wait_period+10))
    if [ $wait_period -gt 300 ];then
      echo_reset_dim "${COLOR_RED}CRD db2uclusters.db2u.databases.ibm.com is not ready with in 300 sec, exiting"
      exit 1
    else
      sleep 10
    fi
    export DB2_CRD_NAMES_ACCEPTED_STATUS=`oc get crd  db2uclusters.db2u.databases.ibm.com -o=jsonpath="{.status.conditions[?(@.type=='NamesAccepted')].status}"`
    echo_reset_dim "DB2_CRD_NAMES_ACCEPTED_STATUS .... ${COLOR_MAGENTA}${DB2_CRD_NAMES_ACCEPTED_STATUS}"

    if [[ "$DB2_CRD_NAMES_ACCEPTED_STATUS" == "True" ]]; then
      break
    fi
  done  
  # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True DONE
}

function delete_db2u_0_pod(){
  oc delete pod c-${DB2_INSTANCE_NAME}-db2u-0 -n ${DB2_NAMESPACE}
  while [[ true ]]
  do
    # Get pod c-${DB2_INSTANCE_NAME}-db2u-0 ContainersReady status
    export DB2_POD_STATUS=`oc get pod c-${DB2_INSTANCE_NAME}-db2u-0 -n ${DB2_NAMESPACE} -o=jsonpath="{.status.conditions[?(@.type=='ContainersReady')].status}"`
    echo_reset_dim "DB2_POD_STATUS....................... ${COLOR_MAGENTA}${DB2_POD_STATUS}"
    if [[ $DB2_POD_STATUS == 'True' ]]; then
      break
    fi
  done  
}

# Invoke suite_db2_setup_for_manage
function invoke_suite_db2_setup_for_manage(){
  export MAS_INSTANCE_ID=$1
  export DB2_NAMESPACE=mas-${MAS_INSTANCE_ID}-db2u-manage
  export DB2_INSTANCE_NAME=db2wh-${MAS_INSTANCE_ID}
  export ROLE_NAME=suite_db2_setup_for_manage && ansible-playbook ibm.mas_devops.run_role
  rc=$?
  [ $rc -ne 0 ] && exit $rc
}

function gitops_db2u_jdbc_config() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_db2u_jdbc_config_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_db2u_jdbc_config_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  rm -rf $GITOPS_WORKING_DIR/$GITHUB_REPO
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  GITOPS_APPS_DIR=${GITOPS_CLUSTER_DIR}/apps

  #Defaults
  if [[ -z $DB2_DBNAME ]]; then
    export DB2_DBNAME=BLUDB
  fi
  export DB2_INSTANCE_NAME=db2wh-${MAS_INSTANCE_ID}-${MAS_APP_ID}
  export DB2_NAMESPACE=db2u
  export TLS_VERSION=${TLS_VERSION:-"TLSv1.2"}
  # by default db2 internal is true, set it to false if db2 is external
  export DB2_INTERNAL=${DB2_INTERNAL:-"true"}
  export CLUSTER_DOMAIN=`oc get ingress.config.openshift.io  cluster -o=jsonpath='{.spec.domain}'`

  echo
  reset_colors
  echo_h2 "Review Settings "

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Application Directory ................. ${COLOR_MAGENTA}${GITOPS_APPS_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path ............................ ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "MAS Instance ID ......................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "MAS_CONFIG_SCOPE ........................ ${COLOR_MAGENTA}${MAS_CONFIG_SCOPE}"
  echo_reset_dim "MAS_WORKSPACE_ID ........................ ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
  echo_reset_dim "MAS_APP_ID .............................. ${COLOR_MAGENTA}${MAS_APP_ID}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "DB2 Cluster Configuration" "    "
  echo_reset_dim "db2-instance-name ....................... ${COLOR_MAGENTA}${DB2_INSTANCE_NAME}"
  echo_reset_dim "db2-dbname  ............................. ${COLOR_MAGENTA}${DB2_DBNAME}"
  echo_reset_dim "TLS_VERSION ............................. ${COLOR_MAGENTA}${TLS_VERSION}"
  echo_reset_dim "DB2_LDAP_USERNAME ....................... ${COLOR_MAGENTA}${DB2_LDAP_USERNAME}"
  echo_reset_dim "DB2_LDAP_PASSWORD ....................... ${COLOR_MAGENTA}${DB2_LDAP_PASSWORD:0:4}<snip>"
  echo_reset_dim "CLUSTER_DOMAIN .......................... ${COLOR_MAGENTA}${CLUSTER_DOMAIN}"
  reset_colors

  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-db2u-jdbc-config
  mkdir -p $TEMP_DIR


  if [ -z $GIT_SSH ]; then
    export GIT_SSH=false
  fi
  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_APPS_DIR}


  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Generating DB2U JDBC Configuraton"

  export WHOAMI=`oc whoami`
  if [[ -z ${WHOAMI} ]]; then
    echo_reset_dim "${COLOR_RED} Please do 'oc login' to the cluster ArgoCD is to be installed on"
    exit 1
  fi
  
  echo
  if [[ "$MAS_CONFIG_SCOPE" == "app" ]]; then
    export SUITE_JDBCCFG_NAME="$MAS_INSTANCE_ID-jdbc-app-$MAS_APP_ID"
  elif [[ "$MAS_CONFIG_SCOPE" == "system" ]]; then
    export SUITE_JDBCCFG_NAME="$MAS_INSTANCE_ID-jdbc-system"
  elif [[ "$MAS_CONFIG_SCOPE" == "ws" ]]; then
    export SUITE_JDBCCFG_NAME="$MAS_INSTANCE_ID-jdbc-ws-$MAS_WORKSPACE_ID"
  elif [[ "$MAS_CONFIG_SCOPE" == "wsapp" ]]; then
    export SUITE_JDBCCFG_NAME="$MAS_INSTANCE_ID-jdbc-wsapp-$MAS_WORKSPACE_ID-$MAS_APP_ID"
  fi
  
  # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True 
  wait_for_db2ucluster_crd
  # delete pod
  # delete_db2u_0_pod
  
  if [[ -z ${DB2_LDAP_USERNAME} && -z ${DB2_LDAP_PASSWORD} ]]; then
    export DB2_LDAP_USERNAME=db2inst1
    export DB2_LDAP_PASSWORD=`oc get secret  c-${DB2_INSTANCE_NAME}-instancepassword  -n ${DB2_NAMESPACE} -o "jsonpath={.data['password']}" | base64 -d`
    echo_reset_dim "DB2_LDAP_USERNAME ....................... ${COLOR_MAGENTA}${DB2_LDAP_USERNAME}"
    echo_reset_dim "DB2_LDAP_PASSWORD ....................... ${COLOR_MAGENTA}${DB2_LDAP_PASSWORD:0:6}<snip>"
  fi  

  export DB2_LDAP_POD_NAME=`oc get pods -o custom-columns=POD:.metadata.name -l app=${DB2_INSTANCE_NAME},role=ldap -n ${DB2_NAMESPACE}  --no-headers`
  export DB2_CA_PEM=`oc get secret db2u-certificate -n ${DB2_NAMESPACE} -o "jsonpath={.data['ca\.crt']}"`
  # Get Db2u TLS port
  export DB2_TLS_SERVICEPORT=`oc get svc c-${DB2_INSTANCE_NAME}-db2u-engn-svc -n ${DB2_NAMESPACE} -o=jsonpath="{.spec.ports[?(@.name=='ssl-server')].targetPort}"`
  export JDBC_URL="jdbc:db2://c-${DB2_INSTANCE_NAME}-db2u-engn-svc.${DB2_NAMESPACE}.svc:${DB2_TLS_SERVICEPORT}/${DB2_DBNAME}:sslConnection=true;sslVersion=${TLS_VERSION};"

  
  # Create db2 user in local LDAP registry : Starts
  if [[ -n ${DB2_LDAP_USERNAME} && -n ${DB2_LDAP_PASSWORD} ]]; then
    # Check if user exist
    echo_reset_dim "Add USERNAME to LDAP .................. ${COLOR_MAGENTA}"
    echo_reset_dim "oc exec ............................... ${COLOR_MAGENTA}exec -it c-${DB2_INSTANCE_NAME}-db2u-0 -n ${DB2_NAMESPACE} -c db2u "
    oc exec -it c-${DB2_INSTANCE_NAME}-db2u-0 -n ${DB2_NAMESPACE} -c db2u -- su -lc "id ${DB2_LDAP_USERNAME}"
    if [ $? -ne 0 ]; then
      # If user not found, create db2 user in local LDAP registry
      echo_reset_dim "DB2_LDAP_USERNAME ................... ${COLOR_MAGENTA}${DB2_LDAP_USERNAME} not found, creating in local LDAP registry with given password ${DB2_LDAP_PASSWORD}"
      oc exec -it -n ${DB2_NAMESPACE} ${DB2_LDAP_POD_NAME} -- /opt/ibm/ldap_scripts/addLdapUser.py -u ${DB2_LDAP_USERNAME} -r admin -p ${DB2_LDAP_PASSWORD}
    fi

    while [[ true ]]
    do
      # Test that the newly created user can connect to db2
      echo_reset_dim "Test DB Connection ............... ${COLOR_MAGENTA} for ${DB2_DBNAME} with ${DB2_LDAP_USERNAME} "
      oc exec -it c-${DB2_INSTANCE_NAME}-db2u-0 -n ${DB2_NAMESPACE} -c db2u -- su -lc "db2 connect to ${DB2_DBNAME} user ${DB2_LDAP_USERNAME} using ${DB2_LDAP_PASSWORD}" db2inst1
      if [[ $? -eq 0 ]]; then
        echo_reset_dim "DB Connection Successful............... ${COLOR_MAGENTA}"
        break
      else
        echo_reset_dim "${COLOR_RED} DB Connection Failed"
        exit 1
      fi
    done
    # set db2 ldap password into jdbc usenname / password variables.
    export DB2_JDBC_USERNAME=$DB2_LDAP_USERNAME
    export JDBC_INSTANCE_PASSWORD=$DB2_LDAP_PASSWORD
    # Create db2 user in local LDAP registry : Ends

    echo_reset_dim "......................................... ${COLOR_MAGENTA}"    
    export AWS_DB2_SECRET_ID=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}db2
    echo_reset_dim "AWS_DB2_SECRET_ID ......................... ${COLOR_MAGENTA}$AWS_DB2_SECRET_ID"
    
    ### Wait for the statefulset to be ready : Starts ###
    while [[ true ]]
    do
      #Wait for the statefulset to be ready
      echo_reset_dim "Wait for the statefulset to be ready"
      export READY_REPLICASE=`oc get statefulset c-${DB2_INSTANCE_NAME}-db2u -n ${DB2_NAMESPACE} -o=jsonpath="{.status.readyReplicas}"`
      export REPLICASE=`oc get statefulset c-${DB2_INSTANCE_NAME}-db2u -n ${DB2_NAMESPACE} -o=jsonpath="{.status.replicas}"`
      echo_reset_dim "READY_REPLICASE ....................... ${COLOR_MAGENTA}${READY_REPLICASE}"
      echo_reset_dim "REPLICASE ............................. ${COLOR_MAGENTA}${REPLICASE}"
      if [[ ${READY_REPLICASE} -ge 1 && ${REPLICASE} -ge 1 && ${READY_REPLICASE} -eq ${REPLICASE} ]]; then
        echo_reset_dim "Statefulset ......................... ${COLOR_MAGENTA}c-${DB2_INSTANCE_NAME}-db2u is ready"
        break
      fi
    done
    ### Wait for the statefulset to be ready : Ends ###

    echo_reset_dim "......................................... ${COLOR_MAGENTA}"
    echo_reset_dim ""
    echo_reset_dim "DB2_LDAP_POD_NAME ....................... ${COLOR_MAGENTA}${DB2_LDAP_POD_NAME}"
    echo_reset_dim "DB2_INSTANCE_NAME ....................... ${COLOR_MAGENTA}${DB2_INSTANCE_NAME}"
    echo_reset_dim "DB2_NAMESPACE ........................... ${COLOR_MAGENTA}$DB2_NAMESPACE"
    echo_reset_dim "DB2_CA_PEM .............................. ${COLOR_MAGENTA}$DB2_CA_PEM"    
    echo_reset_dim "DB2_JDBC_USERNAME ....................... ${COLOR_MAGENTA}$DB2_JDBC_USERNAME"
    echo_reset_dim "JDBC_INSTANCE_PASSWORD .................. ${COLOR_MAGENTA}$JDBC_INSTANCE_PASSWORD"
    echo_reset_dim "DB2_DBNAME .............................. ${COLOR_MAGENTA}$DB2_DBNAME"
    echo_reset_dim "TLS_VERSION ............................. ${COLOR_MAGENTA}$TLS_VERSION"
    echo_reset_dim "DB2_TLS_SERVICEPORT ..................... ${COLOR_MAGENTA}$DB2_TLS_SERVICEPORT"
    echo_reset_dim "JDBC_URL ................................ ${COLOR_MAGENTA}$JDBC_URL"
    echo_reset_dim "SUITE_JDBCCFG_NAME ...................... ${COLOR_MAGENTA}$SUITE_JDBCCFG_NAME"  
    echo_reset_dim "......................................... ${COLOR_MAGENTA}"
    echo_reset_dim ""
    reset_colors

    ### Update Ldap Username / Password in AWS secret manager Starts
    if [[ -n ${DB2_JDBC_USERNAME} && -n ${JDBC_INSTANCE_PASSWORD} ]]; then
      AVP_TYPE=aws  # Support for IBM will be added later
      sm_login
      sm_update_secret $AWS_DB2_SECRET_ID "{ \"username\": \"$DB2_JDBC_USERNAME\", \"password\": \"$JDBC_INSTANCE_PASSWORD\"}"
      export SECRET_KEY_DB2_USERNAME=${AWS_DB2_SECRET_ID}#username
      export SECRET_KEY_DB2_PASSWORD=${AWS_DB2_SECRET_ID}#password
    fi
    ### Update Ldap Username / Password in AWS secret manager Ends

    echo
    echo_reset_dim "Generating DB2U JDBC Config file ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.ibm-db2u-jdbc-config.yaml"
    jinja -X .+ $CLI_DIR/templates/gitops/ibm-db2u-jdbc-config.yaml.j2 -o ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.ibm-db2u-jdbc-config.yaml
  fi

  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_APPS_DIR "${GIT_COMMIT_MSG}"

    argocd_login
    argocd_sync ${CLUSTER_ID}-watcher
    argocd_hard_refresh mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-db2-jdbc-config
    check_argo_app_synced mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-db2-jdbc-config ${CLUSTER_ID}-watcher ${DB2_NAMESPACE}
    check_argo_app_healthy mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-db2-jdbc-config ${CLUSTER_ID}-watcher
  fi
  if [ "$GITHUB_PUSH" == "true" ]; then  
	  remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO
  fi
  exit 0
}

#!/bin/bash

function channel_select_iot() {
  case $MAS_CHANNEL in
    9.0.x)
      MAS_APP_CHANNEL_IOT=9.0.x
      ;;
    8.11.x)
      MAS_APP_CHANNEL_IOT=8.8.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_IOT=8.7.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_IOT=8.6.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_IOT
      ;;
  esac
  true
}

function channel_select_monitor() {
  case $MAS_CHANNEL in
    9.0.x)
      MAS_APP_CHANNEL_MONITOR=9.0.x
      ;;
    8.11.x)
      MAS_APP_CHANNEL_MONITOR=8.11.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_MONITOR=8.10.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_MONITOR=8.9.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MONITOR
      ;;
  esac
  true
}

function channel_select_manage() {
  case $MAS_CHANNEL in
    9.0.x)
      MAS_APP_CHANNEL_MANAGE=9.0.x
      ;;
    8.11.x)
      MAS_APP_CHANNEL_MANAGE=8.7.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_MANAGE=8.6.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_MANAGE=8.5.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MANAGE
      ;;
  esac
  true
}

function channel_select_predict() {
  case $MAS_CHANNEL in
    9.0.x)
      MAS_APP_CHANNEL_PREDICT=9.0.x
      ;;
    8.11.x)
      MAS_APP_CHANNEL_PREDICT=8.9.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_PREDICT=8.8.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_PREDICT=8.7.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_PREDICT
      ;;
  esac
  true
}


function channel_select_optimizer() {
  case $MAS_CHANNEL in
    9.0.x)
      MAS_APP_CHANNEL_OPTIMIZER=9.0.x
      ;;
    8.11.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.5.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.4.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.3.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_OPTIMIZER
      ;;
  esac
  true
}

function channel_select_assist() {
  case $MAS_CHANNEL in
    9.0.x)
      MAS_APP_CHANNEL_ASSIST=9.0.x
      ;;
    8.11.x)
      MAS_APP_CHANNEL_ASSIST=8.8.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_ASSIST=8.7.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_ASSIST=8.6.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_ASSIST
      ;;
  esac
  true
}

function channel_select_visualinspection() {
  case $MAS_CHANNEL in
    9.0.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=9.0.x
      ;;
    8.11.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.9.x
      ;;
    8.10.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.8.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.7.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_VISUALINSPECTION
      ;;
  esac
  true
}


function install_config_applications() {
  echo
  echo_h2 "Application Selection"
  if prompt_for_confirm "Install IoT?" MAS_APP_INSTALL_IOT; then
    channel_select_iot || exit 1

    if prompt_for_confirm "Install Monitor?" MAS_APP_INSTALL_MONITOR; then
      channel_select_monitor || exit 1
    else
      MAS_APP_CHANNEL_MONITOR=""
    fi
  else
    MAS_APP_CHANNEL_IOT=""
    MAS_APP_CHANNEL_MONITOR=""
  fi

  if prompt_for_confirm "Install Manage?" MAS_APP_INSTALL_MANAGE; then
    channel_select_manage || exit 1
    # Ask for Predict only for 9.0.x and 8.11.x
    # Predict 8.10.x doesn't support cpd4.8
    if [ "$MAS_CHANNEL" == "9.0.x" ] || [ "$MAS_CHANNEL" == "8.11.x" ]; then
      if prompt_for_confirm "Install Predict?" MAS_APP_INSTALL_PREDICT; then
        channel_select_predict || exit 1
      else
        MAS_APP_CHANNEL_PREDICT=""
      fi
    else
      MAS_APP_CHANNEL_PREDICT=""
    fi
  else
    # Wipe *all* Manage-related variables
    MAS_APP_CHANNEL_MANAGE=""
    MAS_APPWS_BINDINGS_JDBC_MANAGE=""

    MAS_APP_CHANNEL_PREDICT=""
  fi
  # Ask for Assist only for 9.0.x channel
  # Assist 8.10.x and 8.11.x doesn't support No-watson-discovery mode
  if [[ "$MAS_CHANNEL" == "9.0.x" ]]; then
    if prompt_for_confirm "Install Assist?" MAS_APP_INSTALL_ASSIST; then
      channel_select_assist || exit 1
    else
      MAS_APP_CHANNEL_ASSIST=""
    fi
  else
    # Do not install Assist for 8.10.x and 8.11.x channels
    MAS_APP_CHANNEL_ASSIST=""
  fi

  if prompt_for_confirm "Install Optimizer?" MAS_APP_INSTALL_OPTIMIZER; then
    channel_select_optimizer || exit 1
  else
    MAS_APP_CHANNEL_OPTIMIZER=""
  fi

  if prompt_for_confirm "Install Visual Inspection?" MAS_APP_INSTALL_VISUALINSPECTION; then
    channel_select_visualinspection || exit 1
  else
    MAS_APP_CHANNEL_VISUALINSPECTION=""
  fi

  manage_validate_internal_registry

  if [[ "$MAS_APP_CHANNEL_ASSIST" != '' ]]; then assist_settings; fi
  if [[ "$MAS_APP_CHANNEL_MANAGE" != '' ]]; then manage_settings; fi
  if [[ "$MAS_APP_CHANNEL_OPTIMIZER" != '' ]]; then optimizer_settings; fi
  if [[ "$MAS_APP_CHANNEL_PREDICT" != '' ]]; then predict_settings; fi

  if [[ "$MAS_APP_CHANNEL_PREDICT" != "" || "$MAS_APP_CHANNEL_ASSIST" != "" ]]; then
    cp4d_channel_selection
  fi

}


# Assist Settings Function
# -----------------------------------------------------------------------------
function assist_settings() {
  echo
  echo_h3 "Configure Maximo Assist"
  echo "${TEXT_DIM}Assist requires access to Cloud Object Storage (COS), this install supports automatic setup using either IBMCloud COS or in-cluster COS via OpenShift Container Storage/OpenShift Data Foundation (OCS/ODF)."
  reset_colors
  echo
  while : ; do
    prompt_for_input 'COS Provider [ibm/ocs]' COS_TYPE "ibm"
    [[ "$COS_TYPE" != "ibm" && "$COS_TYPE" != "ocs" ]] || break
  done
  if [[ "$COS_TYPE" == "ibm" ]]; then
    prompt_for_secret "IBM Cloud API Key" IBMCLOUD_APIKEY "Re-use saved IBM Cloud API Key?"
    prompt_for_input "IBM Cloud Resource Group" IBMCOS_RESOURCEGROUP $IBMCOS_RESOURCEGROUP "Default"
  fi
}


# Manage builds containers at install-time
# -----------------------------------------------------------------------------
# We can save customers wasted time by detecting if the image-registry service
# is available in the cluster.  If it's not, and they've selected to install
# Manage then their install is going to fail, so let's just prevent the install
# starting in the first place.
function manage_validate_internal_registry() {
  if [[ "$MAS_APP_CHANNEL_MANAGE" != "" ]]; then
    oc -n openshift-image-registry get service image-registry &> /dev/null
    if [[ "$?" != "0" ]]; then
      echo
      echo_warning "Unable to proceed with installation of Maximo Manage.  Could not detect the required \"image-registry\" service in the openshift-image-registry namespace."
      echo_warning "  For more information refer to ${COLOR_CYAN}${TEXT_UNDERLINE}https://www.ibm.com/docs/en/masv-and-l/continuous-delivery?topic=installing-enabling-openshift-internal-image-registry"
      reset_colors
      echo
      exit 1
    fi
  fi
}

# Manage Settings Function
# -----------------------------------------------------------------------------

# Manage Component Selection
function manage_settings_components() {
  echo
  echo_h4 "Maximo Manage Components"
  echo "${TEXT_DIM}The default configuration will install Manage with Health enabled, alternatively choose exactly what industry solutions and add-ons will be configured."
  reset_colors
  echo

  # Default to base+health only
  if [[ "$MAS_APPWS_COMPONENTS" == "" ]]; then
    MAS_APPWS_COMPONENTS="base=latest,health=latest"
  fi

  if prompt_for_confirm "Select components to enable?"; then
    MAS_APPWS_COMPONENTS="base=latest"
    prompt_for_confirm " - Asset Configuration Manager" MANAGE_COMPONENT_ACM
    [[ "$MANAGE_COMPONENT_ACM" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,acm=latest"

    prompt_for_confirm " - Aviation" MANAGE_COMPONENT_AVIATION
    [[ "$MANAGE_COMPONENT_AVIATION" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,aviation=latest"

    prompt_for_confirm " - Civil Infrastructure" MANAGE_COMPONENT_CIVIL
    [[ "$MANAGE_COMPONENT_CIVIL" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,civil=latest"

    prompt_for_confirm " - Envizi" MANAGE_COMPONENT_ENVIZI
    [[ "$MANAGE_COMPONENT_ENVIZI" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,envizi=latest"

    prompt_for_confirm " - Health" MANAGE_COMPONENT_HEALTH
    [[ "$MANAGE_COMPONENT_HEALTH" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,health=latest"

    prompt_for_confirm " - Health, Safety and Environment" MANAGE_COMPONENT_HSE
    [[ "$MANAGE_COMPONENT_HSE" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,hse=latest"

    prompt_for_confirm " - Maximo IT" MANAGE_COMPONENT_ICD
    [[ "$MANAGE_COMPONENT_ICD" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,icd=latest"

    prompt_for_confirm " - Nuclear" MANAGE_COMPONENT_NUCLEAR
    [[ "$MANAGE_COMPONENT_NUCLEAR" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,nuclear=latest"

    prompt_for_confirm " - Oil & Gas" MANAGE_COMPONENT_OILANDGAS
    [[ "$MANAGE_COMPONENT_OILANDGAS" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,oilandgas=latest"

    prompt_for_confirm " - Connector for Oracle Applications" MANAGE_COMPONENT_ORACLEADAPTER
    [[ "$MANAGE_COMPONENT_ORACLEADAPTER" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,oracleadapter=latest"

    prompt_for_confirm " - Connector for SAP Applications" MANAGE_COMPONENT_SAPADAPTER
    [[ "$MANAGE_COMPONENT_SAPADAPTER" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,sapadapter=latest"

    prompt_for_confirm " - Service Provider" MANAGE_COMPONENT_SERVICEPROVIDER
    [[ "$MANAGE_COMPONENT_SERVICEPROVIDER" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,serviceprovider=latest"

    prompt_for_confirm " - Spatial" MANAGE_COMPONENT_SPATIAL
    [[ "$MANAGE_COMPONENT_SPATIAL" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,spatial=latest"

    prompt_for_confirm " - Strategize" MANAGE_COMPONENT_STRATEGIZE
    [[ "$MANAGE_COMPONENT_STRATEGIZE" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,strategize=latest"

    prompt_for_confirm " - Transportation" MANAGE_COMPONENT_TRANSPORTATION
    [[ "$MANAGE_COMPONENT_TRANSPORTATION" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,transportation=latest"

    prompt_for_confirm " - Tririga" MANAGE_COMPONENT_TRIRIGA
    [[ "$MANAGE_COMPONENT_TRIRIGA" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,tririga=latest"

    prompt_for_confirm " - Utilities" MANAGE_COMPONENT_UTILITIES
    [[ "$MANAGE_COMPONENT_UTILITIES" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,utilities=latest"

    prompt_for_confirm " - Workday Applications" MANAGE_COMPONENT_WORKDAY
    [[ "$MANAGE_COMPONENT_WORKDAY" == "true" ]] && MAS_APPWS_COMPONENTS="$MAS_APPWS_COMPONENTS,workday=latest"

    reset_colors

    # If Spatial is selected, then prompt to choose to add IBM Maximo Location Services for Esri, and prompt license
    if [[ "${MAS_APPWS_COMPONENTS,,}" == *"spatial="* ]]; then
      echo
      echo "${TEXT_DIM}Maximo Spatial requires a map server provider in order to enable geospatial capabilities."
      echo "${TEXT_DIM}You may choose your preferred map provider later or you can enable IBM Maximo Location Services for Esri now."
      echo "${TEXT_DIM}This includes ArcGIS Enterprise as part of the Manage and Maximo Spatial bundle (Additional AppPoints required)."
      echo

      reset_colors
      echo
      if prompt_for_confirm " - Include IBM Maximo Location Services for Esri" INSTALL_ARCGIS; then

          case $MAS_CHANNEL in
            9.0.x)
              MAS_ARCGIS_CHANNEL=9.0.x
              ;;
            *)
              prompt_for_input 'Custom Subscription Channel' MAS_ARCGIS_CHANNEL
              ;;
          esac
          true

          echo
          echo_h4 "IBM Maximo Location Services for Esri License Terms"
          echo -e "${COLOR_YELLOW}For information about your IBM Maximo Location Services for Esri License,"
          echo -e "${COLOR_YELLOW}see ${COLOR_CYAN}${TEXT_UNDERLINE}https://ibm.biz/MAXArcGIS90-License${TEXT_RESET}${COLOR_YELLOW}."
          echo -e "${COLOR_YELLOW}To continue with the installation, you must accept these additional license terms.${TEXT_RESET}"
          prompt_for_confirm_default_yes "Do you accept the license terms?" MLS_LICENSE_RESPONSE
          if [[ "$MLS_LICENSE_RESPONSE" == "false" ]]; then
            exit 1
          fi
          echo
      fi
    fi

    # if Maximo IT is selected, prompt specific Maximo IT license terms
    if [[ "${MAS_APPWS_COMPONENTS,,}" == *"icd="* ]]; then
      echo
      echo_h4 "Maximo IT License Terms"
      echo -e "${COLOR_YELLOW}For information about your Maximo IT License, see ${COLOR_CYAN}${TEXT_UNDERLINE}https://ibm.biz/MAXIT81-License${TEXT_RESET}${COLOR_YELLOW}. To continue with the installation, you must accept these additional license terms.${TEXT_RESET}"
      prompt_for_confirm_default_yes "Do you accept the license terms?" LICENSE_RESPONSE
      if [[ "$LICENSE_RESPONSE" == "false" ]]; then
        exit 1
      fi
      echo
    fi

  fi
}

# Manage Settings - Database
function manage_settings_database() {
  echo
  echo_h4 "Maximo Manage Settings - Database"
  echo "${TEXT_DIM}Customise the schema, tablespace, indexspace, and encryption settings used by Manage"
  reset_colors
  echo
  if prompt_for_confirm "Customize database settings?"; then
    MAS_APP_SETTINGS_DB2_SCHEMA='maximo'
    MAS_APP_SETTINGS_TABLESPACE='MAXDATA'
    MAS_APP_SETTINGS_INDEXSPACE='MAXINDEX'
    prompt_for_input "Schema" MAS_APP_SETTINGS_DB2_SCHEMA
    prompt_for_input "Tablespace" MAS_APP_SETTINGS_TABLESPACE
    prompt_for_input "Indexspace" MAS_APP_SETTINGS_INDEXSPACE
    echo
    if prompt_for_confirm "Customize database encryption settings?"; then
      # TODO: Someone needs to explain what these actually do (with a link to documentation) and change the env vars to meaningful labels
      prompt_for_input "MXE_SECURITY_CRYPTO_KEY" MAS_APP_SETTINGS_CRYPTO_KEY
      prompt_for_input "MXE_SECURITY_CRYPTOX_KEY" MAS_APP_SETTINGS_CRYPTOX_KEY
      prompt_for_input "MXE_SECURITY_OLD_CRYPTO_KEY" MAS_APP_SETTINGS_OLD_CRYPTO_KEY
      prompt_for_input "MXE_SECURITY_OLD_CRYPTOX_KEY" MAS_APP_SETTINGS_OLD_CRYPTOX_KEY
      if prompt_for_confirm "Override database encryption secrets with provided keys"; then
        MAS_APP_SETTINGS_OVERRIDE_ENCRYPTION_SECRETS_FLAG=true
      fi
    fi
  fi

}

# Manage Settings - Server Bundle configuration
function manage_settings_server_bundle_config() {
  echo
  echo_h4 "Maximo Manage Settings - Server Bundles"
  echo "${TEXT_DIM}Define how you want to configure Manage servers:"
  echo " - You can have one or multiple Manage servers distributing workload"
  echo " - Additionally, you can choose to include JMS server for messaging queues"
  echo
  reset_colors
  echo -e "Configurations:"
  echo "  1. Deploy the 'all' server pod only (workload is concentrated in just one server pod but consumes less resource)"
  echo "  2. Deploy the 'all' and 'jms' bundle pods (workload is concentrated in just one server pod and includes jms server)"
  if [[ "$SNO_MODE" != "true" ]]; then
    echo "  3. Deploy the 'mea', 'report', 'ui' and 'cron' bundle pods (workload is distributed across multiple server pods)"
    echo "  4. Deploy the 'mea', 'report', 'ui', 'cron' and 'jms' bundle pods (workload is distributed across multiple server pods and includes jms server)"
  fi

  echo
  prompt_for_input "Select a server bundle configuration" MANAGE_SERVER_BUNDLE_SELECTION "1"

  case $MANAGE_SERVER_BUNDLE_SELECTION in
    1)
      MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='dev'
      ;;
    2)
      MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='snojms'
      MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
      ;;
    3)
      MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='small'
    ;;
    4)
      MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='jms'
      MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
    ;;
    *)
      echo_warning "Invalid selection"
      exit 1
      ;;
  esac

}


function manage_settings_jms () {
  if [[ "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "jms" || "$MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE" == "snojms" ]]; then
    echo
    echo "${TEXT_DIM}Only Manage JMS sequential queues (sqin and sqout) are enabled by default."
    echo "However, you can enable both sequential (sqin and sqout) and continuous queues (cqin and cqout)."
    echo
    reset_colors
    if prompt_for_confirm "Enable both Manage JMS sequential and continuous queues?"; then
      MAS_APP_SETTINGS_DEFAULT_JMS=true
    else
      MAS_APP_SETTINGS_DEFAULT_JMS=false
    fi
  fi
}

# Manage Settings - Customization
function manage_settings_customization_archive() {
  echo
  echo_h4 "Maximo Manage Settings - Customization"
  # TODO: Improve the guidance here.  e.g. Should the url include the filename, or is archive name appended to the URL?
  echo "${TEXT_DIM}Provide a customization archive to be used in the Manage build process"
  reset_colors
  echo
  if prompt_for_confirm "Include customization archive?"; then
    MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME='manage-custom-archive'
    prompt_for_input "Customization archive name" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME
    prompt_for_input "Customization archive file path/url" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_URL
    if prompt_for_confirm "Provide authentication to access customization archive URL?"; then
      prompt_for_input "Username" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_USERNAME
      prompt_for_secret "Password" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_PASSWORD
    fi
  fi
}


# Defines if demo data will be enabled
function manage_settings_demodata() {
  prompt_for_confirm "+ Create Demo Data?" MAS_APP_SETTINGS_DEMODATA
}


# Defines manage server timezone
function manage_settings_timezone() {
  prompt_for_input "+ Manage Server Timezone" MAS_APP_SETTINGS_SERVER_TIMEZONE "GMT"
  DB2_TIMEZONE=$MAS_APP_SETTINGS_SERVER_TIMEZONE # set Manage dedicated Db2 timezone to be same as Manage server timezone
}


# Defines manage base and secondary languages
function manage_settings_languages() {
  echo
  echo "${TEXT_DIM}Define the base language for Maximo Manage."
  echo
  reset_colors
  prompt_for_input "Base Language" MAS_APP_SETTINGS_BASE_LANG "EN"
  echo
  echo "${TEXT_DIM}Define the additional languages to be configured in Maximo Manage. provide a comma-separated list of supported languages codes, for example: 'JA,DE,AR'"
  echo "A complete list of available language codes is available online:"
  echo "    ${COLOR_CYAN}${TEXT_UNDERLINE}https://www.ibm.com/docs/en/mas-cd/mhmpmh-and-p-u/continuous-delivery?topic=deploy-language-support${TEXT_RESET}"
  echo
  reset_colors
  prompt_for_input "Secondary Languages" MAS_APP_SETTINGS_SECONDARY_LANGS
}


# Manage Settings - Cloud Pak for Data Integration
function manage_settings_cp4d() {
  if [[ "$MAS_APP_CHANNEL_MANAGE" == "8.7.x" ]]; then
    echo "${TEXT_DIM}Integration with Cognos Analytics provides additional support for reporting features in Maximo Manage, for more information refer to the documentation online: "
    echo "    ${COLOR_CYAN}${TEXT_UNDERLINE}https://ibm.biz/BdMuxs${TEXT_RESET}"
    reset_colors
    echo
    if prompt_for_confirm "Enabled integration with Cognos Analytics?"; then
      CPD_INSTALL_COGNOS=true
    fi

    if prompt_for_confirm "Enable integration with Watson Studio Local?"; then
      MAS_APPWS_BINDINGS_HEALTH_WSL_FLAG=true
    fi

    if [[ "$MAS_APPWS_BINDINGS_HEALTH_WSL_FLAG" == "true" || "$CPD_INSTALL_COGNOS" == "true" ]]; then
      cp4d_channel_selection
      CPD_PRODUCT_VERSION=$CP4D_VERSION
      DEPLOY_CP4D=run
    fi
  fi
}


function manage_settings_other() {
  echo
  echo_h4 "Maximo Manage Settings - Other"
  echo "${TEXT_DIM}Configure additional settings:"
  echo
  echo "- Demo data"
  echo "- Base and additional languages"
  echo "- Server timezone"
  echo "- Cognos integration (install Cloud Pak for Data)"
  echo "- Watson Studio Local integration (install Cloud Pak for Data)"
  reset_colors
  echo
  if prompt_for_confirm "Configure Additional Settings?"; then
    manage_settings_demodata
    manage_settings_timezone
    manage_settings_languages
    manage_settings_cp4d
  fi
}


function manage_settings() {
  echo
  echo_h3 "Configure Maximo Manage"
  echo "${TEXT_DIM}Customize your Manage installation, refer to the product documentation for more information."
  reset_colors

  # Manage Component and Settings
  manage_settings_components
  manage_settings_server_bundle_config
  manage_settings_jms
  manage_settings_database
  manage_settings_customization_archive
  manage_settings_other
}


# Predict Settings Function
# -----------------------------------------------------------------------------
function predict_settings() {
  echo
  echo_h3 "Configure Maximo Predict"
  echo "${TEXT_DIM}Predict application supports the integration with IBM SPSS and Watson Openscale which are optional services installed on top of IBM Cloud Pak for Data. Unless requested these will not be installed."
  reset_colors
  echo
  if prompt_for_confirm "Install IBM SPSS Statistics"; then
    CPD_INSTALL_SPSS=true
  fi
  if prompt_for_confirm "Install Watson OpenScale"; then
    CPD_INSTALL_OPENSCALE=true
  fi
}


# Optimizer Settings Function
# -----------------------------------------------------------------------------
function optimizer_settings() {
  echo
  echo_h3 "Configure Maximo Optimizer"
  # TODO: Provide info + link to documentation about limited versus full
  echo "${TEXT_DIM}Optimizer supports two install plans - limited and full."
  reset_colors
  echo

  while : ; do
    prompt_for_input 'Plan [full/limited]' MAS_APP_PLAN_OPTIMIZER "full"
    [[ "$MAS_APP_PLAN_OPTIMIZER" != "full" && "$MAS_APP_PLAN_OPTIMIZER" != "limited" ]] || break
  done
}

#!/bin/bash

. $DIR/functions/pipeline_config_additional_configs
. $DIR/functions/pipeline_config_applications
. $DIR/functions/pipeline_config_db2
. $DIR/functions/pipeline_config_dns
. $DIR/functions/pipeline_config_sno
. $DIR/functions/pipeline_config_storage_classes
. $DIR/functions/pipeline_config_storage_classes_sno
. $DIR/functions/pipeline_config_advanced

function pipeline_config() {
  echo_h2 "Configure Installation"

  # MAS instance ID
  if [[ ! -z "$1" ]]; then
    MAS_INSTANCE_ID=$1
  fi
  prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID
  prompt_for_input "MAS Workspace ID" MAS_WORKSPACE_ID
  prompt_for_input "MAS Workspace Display Name" MAS_WORKSPACE_NAME

  if [[ -n "$DEV_MODE" ]]; then
    # Development mode
    prompt_for_input "Select Catalog Source" MAS_CATALOG_VERSION "v8-master-amd64"
    prompt_for_input "Select Subscription Channel" MAS_CHANNEL "dev"
  elif [[ -z "$AIRGAP_MODE" ]]; then
    # Online (GA) mode
    prompt_for_confirm "Use online catalog?" USE_ONLINE_CATALOG
    if [[ "$USE_ONLINE_CATALOG" == "true" ]]; then
      MAS_CATALOG_VERSION=v8-amd64
    else
      echo -e "${COLOR_YELLOW}Catalog Version:"
      echo "  1. v8 (2023-05-26)"
      echo "  2. v8 (2023-04-14)"
      echo "  3. v8 (2023-03-14)"
      echo "  4. v8 (2023-02-17)"
      prompt_for_input "Select Catalog Source" MAS_CATALOG_SELECTION "1"

      case $MAS_CATALOG_SELECTION in
        1|230526)
          MAS_CATALOG_VERSION=v8-230526-amd64
          ;;
        2|230414)
          MAS_CATALOG_VERSION=v8-230414-amd64
          ;;
        3|230314)
          MAS_CATALOG_VERSION=v8-230314-amd64
          ;;
        4|230217)
          MAS_CATALOG_VERSION=v8-230217-amd64
          ;;
        *)
          exit 1
          ;;
      esac
    fi

    echo -e "${COLOR_YELLOW}MAS Version:"
    echo "  1. 8.10"
    echo "  2. 8.9"
    prompt_for_input "Select Subscription Channel" MAS_CHANNEL_SELECTION "1"

    case $MAS_CHANNEL_SELECTION in
      1|8.10|8.10.x)
        MAS_CHANNEL=8.10.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "810" )
        ;;

      2|8.9|8.9.x)
        MAS_CHANNEL=8.9.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "89" )
        ;;

      *)
        MAS_CHANNEL=$MAS_CHANNEL_SELECTION
        ;;
    esac
  else
    # Airgap (GA) mode
    echo -e "${COLOR_YELLOW}MAS Version:"
    echo "May 26 2023 Update"
    echo "  1. 8.10.1"
    echo "  2. 8.9.5"
    echo "April 14 2023 Update"
    echo "  3. 8.10.0"
    echo "  4. 8.9.4"
    echo "March 14 2023 Update"
    echo "  5. 8.9.3"
    echo "February 17 2023 Update"
    echo "  6. 8.9.2"
    prompt_for_input "Select Catalog Source" MAS_CHANNEL_SELECTION "1"

    case $MAS_CHANNEL_SELECTION in
      # May 26 2023 Catalog
      # -----------------------------------------------------------------------
      1)
        MAS_CHANNEL=8.10.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "810" )
        MAS_CATALOG_VERSION=v8-230526-amd64
        ;;
      2)
        MAS_CHANNEL=8.9.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "89" )
        MAS_CATALOG_VERSION=v8-230526-amd64
        ;;
      # April 14 2023 Catalog
      # -----------------------------------------------------------------------
      3)
        MAS_CHANNEL=8.10.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "810" )
        MAS_CATALOG_VERSION=v8-230414-amd64
        ;;
      4)
        MAS_CHANNEL=8.9.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "89" )
        MAS_CATALOG_VERSION=v8-230414-amd64
        ;;
      # March 14 2023 Catalog
      # -----------------------------------------------------------------------
      5)
        MAS_CHANNEL=8.9.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "89" )
        MAS_CATALOG_VERSION=v8-230314-amd64
        ;;
      # Feb 2023 Catalog
      # -----------------------------------------------------------------------
      6)
        MAS_CHANNEL=8.9.x
        MAS_LICENSE_LINK=$( build_license_link_by_mas_version "89" )
        MAS_CATALOG_VERSION=v8-230217-amd64
        ;;
      # Oops!
      # -----------------------------------------------------------------------
      *)
        echo_warning "Invalid selection"
        exit 1
        ;;
    esac
  fi
  true

  echo
  echo_h2 "License Terms"
  echo -e "${COLOR_YELLOW} For information about your license, see "$MAS_LICENSE_LINK " To continue with the installation, you must accept the license terms."
  prompt_for_confirm "Do you accept the license terms?" LICENSE_RESPONSE

  if [[ "$LICENSE_RESPONSE" == "false" ]]; then
    exit 1
  fi

  echo
  echo_h2 "Configure Operation Mode"
  echo "${TEXT_DIM}Maximo Application Suite can be installed in a non-production mode for internal development and testing, this setting cannot be changed after installation:"
  echo " - All applications, add-ons, and solutions have 0 (zero) installation AppPoints in non-production installations."
  echo " - These specifications are also visible in the metrics that are shared with IBMÂ® and on the product UI."
  echo
  reset_colors
  prompt_for_confirm "Use non-production mode?" USE_NON_PROD_MODE

  if [[ "$USE_NON_PROD_MODE" == "true" ]]; then
    MAS_ANNOTATIONS="mas.ibm.com/operationalMode=nonproduction"
  fi

  config_pipeline_sno
  config_pipeline_dns #5
  config_pipeline_applications #6
  config_pipeline_db2 #7
  config_pipeline_additional_configs #8

  if [[ "$SNO_MODE" == "true" ]]; then
    config_pipeline_storage_classes_sno #9
  else
    config_pipeline_storage_classes #9
  fi
  config_pipeline_advanced #  10

  echo ""
  if [[ "$DEV_MODE" == "true" && -z "$AIRGAP_MODE" ]]; then
    # Development Mode -- offer the ability to set MAS and SLS source independently
    echo_h2 "Configure Artifactory"
    prompt_for_input "Artifactory Username" ARTIFACTORY_USERNAME
    prompt_for_input "Artifactory Token" ARTIFACTORY_TOKEN

    echo
    echo_h2 "Configure IBM Container Registry"
    prompt_for_input "IBM Entitlement Key" IBM_ENTITLEMENT_KEY $IBM_ENTITLEMENT_KEY

    echo
    echo_h2 "Configure IBM Container Registry (MAS)"
    prompt_for_input "IBM Container Registry (cp)" MAS_ICR_CP docker-na-public.artifactory.swg-devops.com/wiotp-docker-local override
    prompt_for_input "IBM Container Registry (cpopen)" MAS_ICR_CPOPEN docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen override

    echo
    echo_h2 "Configure IBM Container Registry (SLS)"
    prompt_for_input "IBM Container Registry (cp)" SLS_ICR_CP docker-na-public.artifactory.swg-devops.com/wiotp-docker-local override
    prompt_for_input "IBM Container Registry (cpopen)" SLS_ICR_CPOPEN docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen override
  else
    # Production Mode -- everything comes from the same registry (IBM container registry)
    echo_h2 "Configure IBM Container Registry"
    prompt_for_secret "IBM Entitlement Key" IBM_ENTITLEMENT_KEY "Re-use saved IBM Entitlement Key?"

    # Use defaults
    MAS_ICR_CP=cp.icr.io/cp
    MAS_ICR_CPOPEN=icr.io/cpopen

    SLS_ICR_CP=cp.icr.io/cp
    SLS_ICR_CPOPEN=icr.io/cpopen
  fi

  echo
  echo_h2 "Configure Product License"
  prompt_for_input "License ID" SLS_LICENSE_ID
  prompt_for_input "License File" SLS_LICENSE_FILE_LOCAL
  if [[ ! -e "$SLS_LICENSE_FILE_LOCAL" ]]; then
    echo_warning "Error: File does not exist: $SLS_LICENSE_FILE_LOCAL"
    exit 1
  fi
  SLS_LICENSE_FILE="/workspace/entitlement/$(basename $SLS_LICENSE_FILE_LOCAL)"

  echo
  echo_h2 "Configure UDS"
  if [[ -n "$DEV_MODE" ]]; then
    echo "${TEXT_DIM}Installing Maximo Application Suite with built-in UDS replacement (SUDS)"
    echo
    reset_colors
    UDS_CONTACT_EMAIL=""
    UDS_CONTACT_FIRSTNAME=""
    UDS_CONTACT_LASTNAME=""
    UDS_ACTION="install_suds"
  else
    prompt_for_input "UDS Contact Email" UDS_CONTACT_EMAIL
    prompt_for_input "UDS Contact First Name" UDS_CONTACT_FIRSTNAME
    prompt_for_input "UDS Contact Last Name" UDS_CONTACT_LASTNAME
  fi
}


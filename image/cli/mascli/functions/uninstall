#!/bin/bash

function uninstall_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat <<EOM
Usage:
  mas uninstall [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

MAS Instance Selection (Required):
  -i, --id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}                                         MAS Instance ID to uninstall

MAS Dependencies Uninstall Options 

Note: Be really careful while using any of these options as they may uninstall dependencies that are used by other MAS instances or services in the target cluster.

  --uninstall-cert-manager                                         Uninstalls Certificate Manager from the target cluster.
  --uninstall-common-services                                      Uninstalls IBM Common Services from the target cluster. 
  --uninstall-cluster-monitoring                                   Uninstalls Cluster Monitoring from the target cluster, including OpenTelemetry, Graphana and User Workload Monitoring.
  --uninstall-ibm-catalog                                          Uninstalls IBM Maximo Operator Catalog Source (e.g ibm-operator-catalog) from the target cluster.
  --uninstall-mongodb                                              Uninstalls MongoDB from the target cluster.
  --uninstall-sls                                                  Uninstalls Suite License Service from the target cluster.
  --uninstall-all-deps                                             Uninstalls all MAS related dependencies including: Certificate Manager, IBM Common Services, Cluster Monitoring, IBM Maximo Operator Catalog, MongoDB and Suite License Service.

Other Commands:
      --no-confirm                                                 Launch the uninstall without prompting for confirmation
  -h, --help                                                       Show this help message



EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function check_mas_project_exists() {
  # If --no-confirm, then don't prompt for MAS_INSTANCE_ID but fail if MAS_INSTANCE_ID is undefined
  if [ -z "${MAS_INSTANCE_ID}" ]; then
    if [ "$NO_CONFIRM" != true  ]; then
      prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID
    else
      echo "MAS Instance ID property has not been set! Please provide a valid value for '--mas-instance-id' argument."
    fi
  fi
  
  # At this point, expect MAS_INSTANCE_ID to be set, so we set MAS namespace
  MAS_NS=mas-$MAS_INSTANCE_ID-core
  
  if check_project_exists $MAS_NS; then
    export MAS_NS
  else
    echo -e "${COLOR_RED}Error: The project \"${MAS_NS}\"${TEXT_RESET} does not exist.\n"
    exit 1
  fi
}

# Check which Certificate Manager is currently installed to determine
# which CERT_MANAGER_PROVIDER is supposed to be uninstalled
function define_cert_manager_to_uninstall() {

  if [ "$CERT_MANAGER_ACTION" == "uninstall" ]; then
    # Lookup existing Certificate Manager instance
      if [ -z "$CERT_MANAGER_NAMESPACE" ]; then
        CERT_MANAGER_NAMESPACE=`oc get pods -A | grep cert-manager-cainjector | awk '{print $1}'`
      fi
    # Check that Certificate Manager instance is running in the cluster
    # if there's no Certificate Manager running, then skip uninstall
      count=`echo $CERT_MANAGER_NAMESPACE | wc -w`
      if [ $count -eq 0 ]
      then
        CERT_MANAGER_ACTION=none
    # Check that there's only one Certificate Manager instance running in the cluster
      elif [ $count -eq 1 ]
      then
      # set $CERT_MANAGER_PROVIDER acordingly to the $CERT_MANAGER_NAMESPACE it's running
        if [ "$CERT_MANAGER_NAMESPACE" == "ibm-common-services" ]; then
          CERT_MANAGER_PROVIDER=ibm
        else
          CERT_MANAGER_PROVIDER=redhat
        fi
      fi
  fi
}

function uninstall_noninteractive() {
  while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case $key in
    -i | --mas-instance-id)
      MAS_INSTANCE_ID=$1 && shift
      ;;
    --uninstall-cluster-monitoring)
      CLUSTER_MONITORING_ACTION=uninstall
      ;;
    --uninstall-ibm-catalog)
      IBM_CATALOGS_ACTION=uninstall
      ;;
    --uninstall-common-services)
      COMMON_SERVICES_ACTION=uninstall
      ;;
    --uninstall-cert-manager)
      CERT_MANAGER_ACTION=uninstall
      ;;
    --uninstall-uds)
      UDS_ACTION=uninstall
      ;;
    --uninstall-mongodb)
      MONGODB_ACTION=uninstall
      ;;
    --uninstall-sls)
      SLS_ACTION=uninstall
      ;;
    --uninstall-all-deps)
      CLUSTER_MONITORING_ACTION=uninstall
      IBM_CATALOGS_ACTION=uninstall
      COMMON_SERVICES_ACTION=uninstall
      CERT_MANAGER_ACTION=uninstall
      UDS_ACTION=uninstall
      MONGODB_ACTION=uninstall
      SLS_ACTION=uninstall
      ;;
    --no-confirm)
      NO_CONFIRM=true
      ;;
    -h | --help)
      uninstall_help
      ;;
    *)
      # unknown option
      echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${TEXT_RESET}\n"
      uninstall_help
      exit 1
      ;;
    esac
  done

  # Check all args have been set
  [[ -z "$MAS_INSTANCE_ID" ]] && uninstall_help "MAS_INSTANCE_ID is not set"
}

# This function checks if dependencies are set to "uninstall"
function deps_prompt_conditions() {
  key="$1"
  case $key in
  SLS_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]] || [[ ${CERT_MANAGER_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  MONGODB_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]] || [[ ${CERT_MANAGER_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  UDS_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  CERT_MANAGER_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  COMMON_SERVICES_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  *)
    # unknown key
    false
    ;;
  esac
}

function validate_action_param() {
  msg=$1
  action=$2

  if [[ -z ${!action} ]] || [[ ${!action} != "none" ]] && [[ ${!action} != "uninstall" ]]; then
    if deps_prompt_conditions $action; then
      export $action="uninstall"
      return
    fi
    if prompt_for_confirm "$msg"; then
      export $action="uninstall"
    else
      export $action="none"
    fi
  fi
}

function prompt_for_deps_to_uninstall() {
  echo
  echo_h2 "Uninstall MAS Dependencies"

  if [ "${NO_CONFIRM}" != true ]; then

    if [ -z "${CLUSTER_MONITORING_ACTION}" ]; then
      validate_action_param "Uninstall Cluster Monitoring?" CLUSTER_MONITORING_ACTION
    fi
    if [ -z "${IBM_CATALOGS_ACTION}" ]; then
      validate_action_param "Uninstall IBM Catalogs?" IBM_CATALOGS_ACTION
    fi
    if [ -z "${COMMON_SERVICES_ACTION}" ]; then
      validate_action_param "Uninstall IBM Common Services?" COMMON_SERVICES_ACTION
    fi
    if [ -z "${CERT_MANAGER_ACTION}" ]; then
      validate_action_param "Uninstall Certificate Manager?" CERT_MANAGER_ACTION
    fi
    if [ -z "${UDS_ACTION}" ]; then
      validate_action_param "Uninstall IBM User Data Services?" UDS_ACTION
    fi
    if [ -z "${MONGODB_ACTION}" ]; then
      validate_action_param "Uninstall MongoDB?" MONGODB_ACTION
    fi
    if [ -z "${SLS_ACTION}" ]; then
      validate_action_param "Uninstall IBM Suite Licensing Service?" SLS_ACTION
    fi

  fi
}

function review_uninstall_settings() {
  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h4 "IBM Maximo Application Suite"

  echo_reset_dim "Instance ID ..................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "Namespace   ..................... ${COLOR_MAGENTA}${MAS_NS}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "MAS Dependencies"

  echo_reset_dim "Cluster Monitoring .............. Action: ${COLOR_MAGENTA}${CLUSTER_MONITORING_ACTION:-<none>}"
  echo_reset_dim "IBM Catalogs .................... Action: ${COLOR_MAGENTA}${IBM_CATALOGS_ACTION:-<none>}"
  echo_reset_dim "IBM Common Services ............. Action: ${COLOR_MAGENTA}${COMMON_SERVICES_ACTION:-<none>}"
  echo_reset_dim "Certificate Manager ............. Action: ${COLOR_MAGENTA}${CERT_MANAGER_ACTION:-<none>} (${CERT_MANAGER_PROVIDER:-<default>})"
  echo_reset_dim "IBM User Data Services .......... Action: ${COLOR_MAGENTA}${UDS_ACTION:-<none>}"
  echo_reset_dim "MongoDB ......................... Action: ${COLOR_MAGENTA}${MONGODB_ACTION:-<none>}"
  echo_reset_dim "IBM Suite Licensing Service ..... Action: ${COLOR_MAGENTA}${SLS_ACTION:-<none>}"

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi
}

function launch_uninstall() {
  echo
  echo_h2 "Launch Uninstall"

  # Create namespace, install MAS Tekton definitions, configure RBAC
  pipelines_install_tasks || exit 1

  # Replace ALL environment variables in templates
  eval "echo \"$(cat $CLI_DIR/templates/pipelinerun-uninstall.yaml)\"" >$CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-uninstall.yaml

  # Start pipeline execution
  oc -n mas-$MAS_INSTANCE_ID-pipelines create -f $CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-uninstall.yaml &>>$LOGFILE || exit 1
  echo -e "${COLOR_GREEN}Uninstall started successfully${TEXT_RESET}"
  echo -e "\nView progress:\n  ${COLOR_CYAN}${TEXT_UNDERLINE}https://${OCP_CONSOLE_ROUTE}/pipelines/ns/mas-$MAS_INSTANCE_ID-pipelines${TEXT_RESET}${TEXT_RESET}"
  echo
}

function save_config(){
  
  export MAS_INSTANCE_ID
  export MAS_NS
  export CLUSTER_MONITORING_ACTION
  export IBM_CATALOGS_ACTION
  export COMMON_SERVICES_ACTION
  export CERT_MANAGER_ACTION
  export UDS_ACTION
  export MONGODB_ACTION
  export SLS_ACTION

}

function uninstall() {
  # Take the first parameter off (it will be uninstall)
  shift
  if [[ $# -gt 0 ]]; then
    uninstall_noninteractive "$@"
  fi

  connect
  check_mas_project_exists
  prompt_for_deps_to_uninstall
  define_cert_manager_to_uninstall
  save_config
  review_uninstall_settings
  launch_uninstall
}

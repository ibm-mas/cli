#! /usr/bin/env python3

import click
import os
import base64
import yaml
import glob

import logging
import logging.handlers

from pprint import pprint

# Example (with and without debug)
# cfgmgr add ~/.ibm-mas/config/additional-configs-db2test.yaml ~/addcfg
# cfgmgr --debug add ~/.ibm-mas/config/additional-configs-db2test.yaml ~/addcfg

logger = logging.getLogger(__name__)


@click.group()
@click.option('--debug', is_flag=True, default=False, expose_value=True)
def cli(debug):
    if debug:
        # Set up a log formatter
        chFormatter = logging.Formatter('%(asctime)-25s' + ' %(levelname)-8s %(message)s')

        # Set up a log handler
        ch = logging.StreamHandler()
        ch.setLevel(logging.DEBUG)
        ch.setFormatter(chFormatter)

        # Configure the root logger
        rootLogger = logging.getLogger()
        rootLogger.addHandler(ch)
        rootLogger.setLevel(logging.DEBUG)


@cli.command()
@click.argument('template-path', required=True, type=click.Path(exists=True))
@click.argument('config-path', required=True, type=click.Path(exists=True))
def add(template_path, config_path):
    """
    Add file (or files) to pipeline-additional-configs
    """
    with open(template_path, 'r') as fin:
        template = yaml.safe_load(fin)

    filesToProcess = []
    if os.path.isdir(config_path):
        logger.debug(f"Adding all config files in directory {config_path}")
        filesToProcess = glob.glob(f"{config_path}/*.yaml")
    else:
        logger.debug(f"Adding config file {config_path}")
        filesToProcess = [config_path]

    for fileToProcess in filesToProcess:
        logger.debug(f" * Processing config file {fileToProcess}")
        # Get the filename
        fileName = os.path.basename(fileToProcess)

        # Load the file
        with open(fileToProcess, 'r') as file:
            data = file.read()

        # Add/update an entry to the secret data
        if "data" not in template:
            template["data"] = {}
        template["data"][fileName] = base64.b64encode(data.encode('ascii')).decode("ascii")

    # When we're finished, update the file with the new content
    with open(template_path, 'w') as fout:
        documents = yaml.dump(template, fout)


# TODO: Add a generate function for the various cfg resources (JDBCCfg, MongoCfg, BASCfg, etc etc)
# The function should take the necessary input, and write the config file to LOCAL_MAS_CONFIG_DIR
# The user can then use the add function to load the config like any other configuration.

if __name__ == '__main__':
    cli()
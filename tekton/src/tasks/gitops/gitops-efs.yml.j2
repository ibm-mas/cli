---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gitops-efs
spec:
  params:
    - name: cluster_name
      type: string
    - name: avp_aws_secret_region
      type: string
    - name: mas_instance_id
      type: string
    - name: cloud_provider
      type: string
      default: aws
    - name: cluster_url
      type: string
      default: ""
  stepTemplate:
    name: gitops-efs
    env:
      - name: CLUSTER_NAME
        value: $(params.cluster_name)
      - name: OCP_SERVER
        value: $(params.cluster_url)
      - name: SM_AWS_REGION
        value: $(params.avp_aws_secret_region)
      - name: MAS_INSTANCE_ID
        value: $(params.mas_instance_id)
      - name: CLOUD_PROVIDER
        value: $(params.cloud_provider)
    envFrom:
      - configMapRef:
          name: environment-properties
          optional: true
      - secretRef:
          name: secure-properties
  steps:
    - args:
      - |-
        aws configure set aws_access_key_id $SM_AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $SM_AWS_SECRET_ACCESS_KEY
        aws configure set default.region $(params.avp_aws_secret_region)

        export ROSA_CONFIG=/workspace/configs/tmp-rosa/rosa-$(params.cluster_name)-details.yaml
        if [ -f $ROSA_CONFIG ]; then
          echo "oc login : via ROSA_CONFIG"
          export OCP_SERVER=$(cat $ROSA_CONFIG | yq -r '.data.api_url')
          export OCP_USERNAME=$(cat $ROSA_CONFIG | yq -r '.data.username')
          export ROSA_CLUSTER_ADMIN_PASSWORD=$(cat $ROSA_CONFIG | yq -r '.data.admin_password')
          oc login -u $OCP_USERNAME -p $ROSA_CLUSTER_ADMIN_PASSWORD $OCP_SERVER --insecure-skip-tls-verify
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed, exiting with error.."
            exit 1
          fi
        elif [ -n $OCP_SERVER ]; then
          echo "oc login : OCP_USERNAME=$OCP_USERNAME OCP_SERVER=$OCP_SERVER OCP_PASSWORD=${OCP_PASSWORD:0:4}<snip> ..."
          oc login -u $OCP_USERNAME -p $OCP_PASSWORD $OCP_SERVER --insecure-skip-tls-verify
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed"
            exit 1
          fi
        else
          echo "oc login : via ocp_login"
          aws configure set aws_access_key_id $SM_AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $SM_AWS_SECRET_ACCESS_KEY
          aws configure set default.region $SM_AWS_REGION
          export CLUSTER_TYPE=rosa
          ROLE_NAME=ocp_login ansible-playbook ibm.mas_devops.run_role 
          OC_RC=$?
          if [ $OC_RC -ne 0 ]; then
            echo "oc login failed"
            exit 1
          fi
        fi

        echo "Set k8s context"
        export K8S_AUTH_CONTEXT=$(oc whoami -c)

        mas gitops-efs -c $CLUSTER_NAME -m $MAS_INSTANCE_ID \
        --cloud-provider $CLOUD_PROVIDER \
        --aws-region $SM_AWS_REGION \
        --aws-secret-key $SM_AWS_SECRET_ACCESS_KEY \
        --aws-access-key $SM_AWS_ACCESS_KEY_ID
      command:
        - /bin/sh
        - -c
      name: gitops-efs
      imagePullPolicy: IfNotPresent
      image: quay.io/ibmmas/cli:7.10.0-pre.mascore1425
  workspaces:
    - name: configs




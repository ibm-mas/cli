#!/bin/bash

function uninstall_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat <<EOM
Usage:
  mas uninstall [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

MAS Instance Selection (Required):
  -i, --id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}     MAS Instance ID to uninstall

Other Commands:
      --no-confirm                      Uninstall without prompting for confirmation
  
  -h, --help                            Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function check_mas_project_exists() {
  MAS_NS="mas-$MAS_INSTANCE_ID-core"

  check_project_exists $MAS_NS

  if [ "$?" == "0" ]; then
    export MAS_NS
  else
    echo -e "${COLOR_RED}Error: The project \"${MAS_NS}\"${COLOR_RESET} does not exist.\n"
    exit 1
  fi
}

function uninstall_noninteractive() {
  while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case $key in
    -i | --id)
      MAS_INSTANCE_ID=$1 && shift
      ;;
    --no-confirm)
      NO_CONFIRM=true
      ;;
    -h | --help)
      uninstall_help
      ;;
    *)
      # unknown option
      echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
      uninstall_help
      exit 1
      ;;
    esac
  done

  # Check all args have been set
  [[ -z "$MAS_INSTANCE_ID" ]] && uninstall_help "MAS_INSTANCE_ID is not set"
}

function prompt_for_deps_to_uninstall() {
  echo
  echo_h2 "2. Set Dependencies for Uninstall"

  if [[ -z "${SLS_ACTION}" || "${SLS_ACTION}" != "none" || "${SLS_ACTION}" != "uninstall" ]]; then
    if prompt_for_confirm "Uninstall IBM Suite Licensing Service?"; then
      export SLS_ACTION="uninstall"
    else
      export SLS_ACTION="none"
    fi
  fi

  if [[ -z "${MONGODB_ACTION}" || "${MONGODB_ACTION}" != "none" || "${MONGODB_ACTION}" != "uninstall" ]]; then
    if prompt_for_confirm "Uninstall MongoDB?"; then
      export MONGODB_ACTION="uninstall"
    else
      export MONGODB_ACTION="none"
    fi
  fi

  if [[ -z "${UDS_ACTION}" || "${UDS_ACTION}" != "none" || "${UDS_ACTION}" != "uninstall" ]]; then
    if prompt_for_confirm "Uninstall IBM User Data Services?"; then
      export UDS_ACTION="uninstall"
    else
      export UDS_ACTION="none"
    fi
  fi

  if [[ -z "${CERT_MANAGER_ACTION}" || "${CERT_MANAGER_ACTION}" != "none" || "${CERT_MANAGER_ACTION}" != "uninstall" ]]; then
    if prompt_for_confirm "Uninstall IBM Cert Manager?"; then
      export CERT_MANAGER_ACTION="uninstall"
    else
      export CERT_MANAGER_ACTION="none"
    fi
  fi

  if [[ -z "${COMMON_SERVICES_ACTION}" || "${COMMON_SERVICES_ACTION}" != "none" || "${COMMON_SERVICES_ACTION}" != "uninstall" ]]; then
    if prompt_for_confirm "Uninstall IBM Common Services?"; then
      export COMMON_SERVICES_ACTION="uninstall"
    else
      export COMMON_SERVICES_ACTION="none"
    fi
  fi

  if [[ -z "${IBM_CATALOGS_ACTION}" || "${IBM_CATALOGS_ACTION}" != "none" || "${IBM_CATALOGS_ACTION}" != "uninstall" ]]; then
    if prompt_for_confirm "Uninstall IBM Catalogs?"; then
      export IBM_CATALOGS_ACTION="uninstall"
    else
      export IBM_CATALOGS_ACTION="none"
    fi
  fi

  if [[ -z "${CLUSTER_MONITORING_ACTION}" || "${CLUSTER_MONITORING_ACTION}" != "none" || "${CLUSTER_MONITORING_ACTION}" != "uninstall" ]]; then
    if prompt_for_confirm "Uninstall Cluster Monitoring?"; then
      export CLUSTER_MONITORING_ACTION="uninstall"
    else
      export CLUSTER_MONITORING_ACTION="none"
    fi
  fi
}

function review_uninstall_settings() {
  echo
  reset_colors
  echo_h2 "3. Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Instance ID ..................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "Namespace   ..................... ${COLOR_MAGENTA}${MAS_NS}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite Dependencies" "    "

  if [[ "${SLS_ACTION}" == "uninstall" ]]; then
    echo_reset_dim "IBM Suite Licensing Service ..... ${COLOR_MAGENTA}${SLS_ACTION}"
  fi
  if [[ "${UDS_ACTION}" == "uninstall" ]]; then
    echo_reset_dim "IBM User Data Services .......... ${COLOR_MAGENTA}${UDS_ACTION}"
  fi
  if [[ "${CERT_MANAGER_ACTION}" == "uninstall" ]]; then
    echo_reset_dim "IBM Cert Manager ................ ${COLOR_MAGENTA}${CERT_MANAGER_ACTION}"
  fi
  if [[ "${COMMON_SERVICES_ACTION}" == "uninstall" ]]; then
    echo_reset_dim "IBM Common Services ............. ${COLOR_MAGENTA}${COMMON_SERVICES_ACTION}"
  fi
  if [[ "${IBM_CATALOGS_ACTION}" == "uninstall" ]]; then
    echo_reset_dim "IBM Catalogs .................... ${COLOR_MAGENTA}${IBM_CATALOGS_ACTION}"
  fi
  if [[ "${MONGODB_ACTION}" == "uninstall" ]]; then
    echo_reset_dim "MongoDB ......................... ${COLOR_MAGENTA}${MONGODB_ACTION}"
  fi
  if [[ "${CLUSTER_MONITORING_ACTION}" == "uninstall" ]]; then
    echo_reset_dim "Cluster Monitoring .............. ${COLOR_MAGENTA}${CLUSTER_MONITORING_ACTION}"
  fi

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi
}

function launch_uninstall() {
  echo
  echo_h2 "Launch Uninstall"

  # Create namespace, install MAS Tekton definitions, configure RBAC
  pipeline_install_tasks || exit 1

  # Replace ALL environment variables in templates
  eval "echo \"$(cat $DIR/templates/pipelinerun-uninstall.yaml)\"" >$CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-uninstall.yaml

  # Start pipeline execution
  oc -n mas-$MAS_INSTANCE_ID-pipelines create -f $CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-uninstall.yaml &>>$LOGFILE || exit 1
  echo -e "${COLOR_GREEN}Uninstall started successfully${COLOR_RESET}"
  echo -e "\nView progress:\n  ${COLOR_CYAN}${TEXT_UNDERLINE}https://${OCP_CONSOLE_ROUTE}/pipelines/ns/mas-$MAS_INSTANCE_ID-pipelines${TEXT_RESET}${COLOR_RESET}"
  echo
}

function uninstall() {
  connect

  # Take the first parameter off (it will be uninstall)
  shift
  if [[ $# -gt 0 ]]; then
    uninstall_noninteractive "$@"
  else
    prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID
  fi

  check_mas_project_exists
  prompt_for_deps_to_uninstall
  review_uninstall_settings
  launch_uninstall
}

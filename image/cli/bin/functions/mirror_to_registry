#!/bin/bash

function mirror_to_registry() {
  echo
  echo_h2 "1. Configure Target Mirror"

  if [[ $LOG_DIR == "" ]]; then
    export LOG_DIR=$DIR
  fi

  if [[ $IMAGE_DESTINATION == "registry" ]]; then
  prompt_for_input "Mirror Registry Host" REGISTRY_PUBLIC_HOST && export REGISTRY_PUBLIC_HOST
  prompt_for_input "Mirror Registry Port" REGISTRY_PUBLIC_PORT && export REGISTRY_PUBLIC_PORT

  echo
  echo_h2 "2. Configure Authentication"
  prompt_for_input "Mirror Registry Username" REGISTRY_AUTH_USERNAME && export REGISTRY_AUTH_USERNAME
  prompt_for_input "Mirror Registry Password" REGISTRY_AUTH_PASSWORD && export REGISTRY_AUTH_PASSWORD
  elif [[ $IMAGE_DESTINATION == "directory" ]]; then
    export PROMPT_FOR_OUTPUT_DIR=true
  fi

  echo
  echo_h2 "2. Configure Images to Mirror"
  echo "${TEXT_DIM}"
  echo "Timing are an estimate only, and will vary based on the quality of the host network connection"
  reset_colors
  prompt_for_confirm "Mirror OpenShift Release Images" MIRROR_OPENSHIFT_RELEASE
  if [[ $MIRROR_OPENSHIFT_RELEASE == "true" ]]; then
    export PROMPT_FOR_QUAY=true
    prompt_for_input "Red Hat OpenShift Release" OPENSHIFT_RELEASE_VERSION
    export OPENSHIFT_RELEASE_VERSION
  fi
  prompt_for_confirm "Mirror the OpenShift standard operator catalogs" MIRROR_OPENSHIFT_OPERATORS
  if [[ $MIRROR_OPENSHIFT_OPERATORS == "true" ]]; then
    export PROMPT_FOR_QUAY=true
    export PROMPT_FOR_OUTPUT_DIR=true
    prompt_for_input "Red Hat OpenShift standard Operator Catalogs version" OPENSHIFT_OPERATORS_VERSION
    if [[ ${OPENSHIFT_OPERATORS_VERSION:0:1} != 'v' ]]; then
      OPENSHIFT_OPERATORS_VERSION="v${OPENSHIFT_OPERATORS_VERSION}"
      echo "Red Hat OpenShift Operator Catalogs version "$OPENSHIFT_OPERATORS_VERSION
    fi
    export OPENSHIFT_OPERATORS_VERSION
  fi

  prompt_for_confirm "IBM Foundational Services (10 minutes)" MIRROR_COMMONSERVICES
  if [[ $MIRROR_COMMONSERVICES == "true" ]]; then
    export PROMPT_FOR_ENTITLEMENT_KEY=true
  fi

  prompt_for_confirm "IBM User Data Services (5 minutes)" MIRROR_UDS
  if [[ $MIRROR_UDS == "true" ]]; then
    export PROMPT_FOR_ENTITLEMENT_KEY=true
    export PROMPT_FOR_REDHAT_CONNECT=true
  fi

  prompt_for_confirm "IBM Suite License Service (2 minutes)" MIRROR_SLS
  if [[ $MIRROR_SLS == "true" ]]; then
    export PROMPT_FOR_ENTITLEMENT_KEY=true
  fi

  prompt_for_confirm "IBM Truststore Manager (1 minute)" MIRROR_TRUSTSTOREMGR
  if [[ $MIRROR_TRUSTSTOREMGR == "true" ]]; then
    export PROMPT_FOR_ENTITLEMENT_KEY=true
  fi

  prompt_for_confirm "IBM Maximo Application Suite - Core (5 minutes)" MIRROR_MAS_CORE
  if [[ $MIRROR_MAS_CORE == "true" ]]; then
    export PROMPT_FOR_ENTITLEMENT_KEY=true
  fi
  # prompt_for_confirm "IBM Maximo Application Suite - Assist (x minutes)" MIRROR_MAS_ASSIST
  # prompt_for_confirm "IBM Maximo Application Suite - Health & Predict Utilities (x minutes)" MIRROR_MAS_HPU
  prompt_for_confirm "IBM Maximo Application Suite - IoT (10 minutes)" MIRROR_MAS_IOT
  prompt_for_confirm "IBM Maximo Application Suite - Manage (5 minutes)" MIRROR_MAS_MANAGE
  if [[ $MIRROR_MAS_MANAGE == "true" ]]; then
    export PROMPT_FOR_ENTITLEMENT_KEY=true
  fi
  prompt_for_confirm "IBM Maximo Application Suite - Monitor (5 minutes)" MIRROR_MAS_MONITOR
  # prompt_for_confirm "IBM Maximo Application Suite - Predict (x minutes)" MIRROR_MAS_PREDICT
  prompt_for_confirm "IBM Maximo Application Suite - Visual Inspection (10 minutes)" MIRROR_MAS_VI
  prompt_for_confirm "Third Party Content (x minutes)" MIRROR_THIRDPARTY

  echo
  echo_h2 "3. Configure Authentication for Mirroring"
  if [[ $PROMPT_FOR_ENTITLEMENT_KEY == "true" ]]; then
    prompt_for_input "IBM Entitlement Key" IBM_ENTITLEMENT_KEY
    export IBM_ENTITLEMENT_KEY
  fi

  if [[ $PROMPT_FOR_REDHAT_CONNECT == "true" ]]; then
    prompt_for_input "Red Hat Connect Username" REDHAT_CONNECT_USERNAME
    prompt_for_input "Red Hat Connect Password" REDHAT_CONNECT_PASSWORD
    export REDHAT_CONNECT_USERNAME
    export REDHAT_CONNECT_PASSWORD
  fi

  if [[ $PROMPT_FOR_QUAY == "true" ]]; then
    prompt_for_input "Quay Username" QUAY_USERNAME
    prompt_for_input "Quay Password" QUAY_PASSWORD
    export QUAY_USERNAME
    export QUAY_PASSWORD
  fi

  if [[ $PROMPT_FOR_OUTPUT_DIR == "true" ]]; then
    if [[ $OUTPUT_DIR == "" ]]; then
      export OUTPUT_DIR="$HOME/mirror_to_registry"
    fi
    prompt_for_input "Output directory" OUTPUT_DIR
    export OUTPUT_DIR
    export LOG_DIR=${OUTPUT_DIR}/log
    mkdir -p $LOG_DIR
  fi

  echo
  echo_h2 "3. Confirm Options"
  prompt_for_confirm "Proceed with these settings" || exit 0

  echo
  echo_h2 "4. Run Mirror Process"
  [ "$MIRROR_OPENSHIFT_RELEASE" == "true" ]   && ansible-playbook ibm.mas_airgap.mirror_openshift_release
  [ "$MIRROR_OPENSHIFT_OPERATORS" == "true" ] && ansible-playbook ibm.mas_airgap.mirror_openshift_operators
  [ "$MIRROR_COMMONSERVICES" == "true" ]      && ansible-playbook ibm.mas_airgap.mirror_common_services
  [ "$MIRROR_UDS" == "true" ]                 && ansible-playbook ibm.mas_airgap.mirror_uds
  [ "$MIRROR_SLS" == "true" ]                 && ansible-playbook ibm.mas_airgap.mirror_sls
  [ "$MIRROR_TRUSTSTOREMGR" == "true" ]       && ansible-playbook ibm.mas_airgap.mirror_truststore_mgr
  [ "$MIRROR_MASCORE" == "true" ]             && ansible-playbook ibm.mas_airgap.mirror_mas_core
  [ "$MIRROR_MAS_ASSIST" == "true" ]          && ansible-playbook ibm.mas_airgap.mirror_mas_assist
  [ "$MIRROR_MAS_HPU" == "true" ]             && ansible-playbook ibm.mas_airgap.mirror_mas_hputilities
  [ "$MIRROR_MAS_IOT" == "true" ]             && ansible-playbook ibm.mas_airgap.mirror_mas_iot
  [ "$MIRROR_MASMANAGE" == "true" ]           && ansible-playbook ibm.mas_airgap.mirror_mas_manage
  [ "$MIRROR_MAS_MONITOR" == "true" ]         && ansible-playbook ibm.mas_airgap.mirror_mas_monitor
  [ "$MIRROR_MAS_PREDICT" == "true" ]         && ansible-playbook ibm.mas_airgap.mirror_mas_predict
  [ "$MIRROR_MAS_VI" == "true" ]              && ansible-playbook ibm.mas_airgap.mirror_mas_visualinspection
  [ "$MIRROR_THIRDPARTY" == "true" ]          && ROLE_NAME=thirdparty_mirror ansible-playbook ibm.mas_airgap.run_role

  true
}


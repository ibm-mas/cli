#!/bin/bash

function channel_select_iot() {
  case $MAS_CHANNEL in
    8.10.x)
      MAS_APP_CHANNEL_IOT=8.7.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_IOT=8.6.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_IOT
      ;;
  esac
  true
}

function channel_select_monitor() {
  case $MAS_CHANNEL in
    8.10.x)
      MAS_APP_CHANNEL_MONITOR=8.10.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_MONITOR=8.9.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MONITOR
      ;;
  esac
  true
}

function channel_select_manage() {
  case $MAS_CHANNEL in
    8.10.x)
      MAS_APP_CHANNEL_MANAGE=8.6.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_MANAGE=8.5.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MANAGE
      ;;
  esac
  true
}

function channel_select_predict() {
  case $MAS_CHANNEL in
    8.10.x)
      MAS_APP_CHANNEL_PREDICT=8.8.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_PREDICT=8.7.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_PREDICT
      ;;
  esac
  true
}


function channel_select_optimizer() {
  case $MAS_CHANNEL in
    8.10.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.4.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.3.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_OPTIMIZER
      ;;
  esac
  true
}

function channel_select_assist() {
  case $MAS_CHANNEL in
    8.10.x)
      MAS_APP_CHANNEL_ASSIST=8.7.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_ASSIST=8.6.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_ASSIST
      ;;
  esac
  true
}

function channel_select_visualinspection() {
  case $MAS_CHANNEL in
    8.10.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.8.x
      ;;
    8.9.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.7.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_VISUALINSPECTION
      ;;
  esac
  true
}


function config_pipeline_applications() {
  echo
  echo_h2 "Application Selection"
  # Default all applications to "do not deploy"
  MAS_APP_CHANNEL_IOT=''
  MAS_APP_CHANNEL_MONITOR=''
  MAS_APP_CHANNEL_MANAGE=''
  MAS_APP_CHANNEL_PREDICT=''
  MAS_APP_CHANNEL_ASSIST=''
  MAS_APP_CHANNEL_VISUALINSPECTION=''
  MAS_APP_CHANNEL_OPTIMIZER='';
  MAS_APP_PLAN_OPTIMIZER=''

  # IoT and Monitor haven't been tested on Single Node OpenShift
  if [[ "$SNO_MODE" != "true" ]]; then
    # IoT
    if prompt_for_confirm "Install IoT"; then
      channel_select_iot || exit 1
    fi

    if [[ "$MAS_APP_CHANNEL_IOT" != '' ]]; then
      # Monitor
      if prompt_for_confirm "Install Monitor"; then
        channel_select_monitor || exit 1
      fi
    fi
  fi

  # Manage
  if prompt_for_confirm "Install Manage"; then
    channel_select_manage || exit 1
    prompt_for_confirm "+ Create demo data" MAS_APP_SETTINGS_DEMODATA
    if prompt_for_confirm "+ Configure JMS"; then
      MAS_APP_SETTINGS_DEFAULT_JMS=true
      MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
      if [[ "$SNO_MODE" == "true" ]]; then
        MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='snojms' # will just deploy manage with 'all' + 'jms' bundle pods
      else
        MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE='jms' # will deploy manage with 'mea','rpt','ui','cron' and 'jms' bundle pods
      fi
    fi
    if prompt_for_confirm "+ Customize database settings"; then
      MAS_APP_SETTINGS_DB2_SCHEMA='maximo'
      MAS_APP_SETTINGS_TABLESPACE='MAXDATA'
      MAS_APP_SETTINGS_INDEXSPACE='MAXINDEX'
      prompt_for_input "Schema" MAS_APP_SETTINGS_DB2_SCHEMA
      prompt_for_input "Tablespace" MAS_APP_SETTINGS_TABLESPACE
      prompt_for_input "Indexspace" MAS_APP_SETTINGS_INDEXSPACE
      if prompt_for_confirm "+ Customize database encryption settings"; then
        prompt_for_input "MXE_SECURITY_CRYPTO_KEY" MAS_APP_SETTINGS_CRYPTO_KEY
        prompt_for_input "MXE_SECURITY_CRYPTOX_KEY" MAS_APP_SETTINGS_CRYPTOX_KEY
        prompt_for_input "MXE_SECURITY_OLD_CRYPTO_KEY" MAS_APP_SETTINGS_OLD_CRYPTO_KEY
        prompt_for_input "MXE_SECURITY_OLD_CRYPTOX_KEY" MAS_APP_SETTINGS_OLD_CRYPTOX_KEY
        if prompt_for_confirm "Override database encryption secrets with provided keys"; then
          MAS_APP_SETTINGS_OVERRIDE_ENCRYPTION_SECRETS_FLAG=true
        fi
      fi
    fi
    if prompt_for_confirm "+ Include customization archive"; then
      MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME='manage-custom-archive'
      prompt_for_input "Customization archive name" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_NAME
      prompt_for_input "Customization archive url" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_URL
      if prompt_for_confirm "+ Provide authentication to access customization archive url"; then
        prompt_for_input "Username" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_USERNAME
        prompt_for_secret "Password" MAS_APP_SETTINGS_CUSTOMIZATION_ARCHIVE_PASSWORD
      fi
    fi
    if prompt_for_confirm "+ Install and bind Watson Studio"; then
      MAS_APPWS_BINDINGS_HEALTH_WSL_FLAG=true
    if prompt_for_confirm "+ Include industry solutions and add-ons"; then
      echo
      echo "${TEXT_DIM}Define which Manage Industry Solutions and Add-ons to be installed as part of the Manage base install."
      echo "Include the Manage components and corresponding target version to be installed using comma-separated values."
      echo
      echo "Example: By default, Manage and Health will be installed, however to include Civil as additional component, type 'base=latest,health=latest,civil=latest'"
      echo
      reset_colors
      MAS_APPWS_COMPONENTS="base=latest,health=latest"
      prompt_for_input "Manage components to be installed" MAS_APPWS_COMPONENTS
      if [[ -z "$MAS_APPWS_COMPONENTS" ]]; then
        MAS_APPWS_COMPONENTS="base=latest,health=latest"
      fi
    fi
  fi

  # Optimizer, Predict, Visual Inspection, & Assist haven't been tested on Single Node OpenShift
  if [[ "$SNO_MODE" != "true" ]]; then
    if prompt_for_confirm "Install Optimizer"; then
      channel_select_optimizer || exit 1
      # Optimizer install Plan + Validation
      while : ; do
        prompt_for_input '+ Plan [full/limited]' MAS_APP_PLAN_OPTIMIZER "full"
        [[ "$MAS_APP_PLAN_OPTIMIZER" != "full" && "$MAS_APP_PLAN_OPTIMIZER" != "limited" ]] || break
      done
    fi

    # Maximo Visual Inspection
    if prompt_for_confirm "Install Visual Inspection"; then
     channel_select_visualinspection || exit 1
    fi

    # Applications that require Manage
    # TODO: these applications require Health component specifically,
    # need to review this code when add-ons selection are in place
    if [[ "$MAS_APP_CHANNEL_MANAGE" != '' ]]; then
      # Predict
      if prompt_for_confirm "Install Predict"; then
        channel_select_predict || exit 1
        if prompt_for_confirm "+ Install IBM SPSS Statistics"; then
          CPD_INSTALL_SPSS=true
        fi
        if prompt_for_confirm "+ Install Watson OpenScale"; then
          CPD_INSTALL_OPENSCALE=true
        fi
      fi
    fi

    # Assist
    if prompt_for_confirm "Install Assist"; then
      channel_select_assist || exit 1
    fi

    # Assist Dependencies
    if [[ "$MAS_APP_CHANNEL_ASSIST" != '' ]]; then
      while : ; do
        prompt_for_input 'COS Provider [ibm/ocs]' COS_TYPE "ibm"
        [[ "$COS_TYPE" != "ibm" && "$COS_TYPE" != "ocs" ]] || break
      done
      if [[ "$COS_TYPE" == "ibm" ]]; then
        prompt_for_input "IBM Cloud API Key" IBMCLOUD_APIKEY $IBMCLOUD_APIKEY
        prompt_for_input "IBM Cloud Resource Group" IBMCLOUD_RESOURCEGROUP $IBMCLOUD_RESOURCEGROUP "Default"
      fi
    fi

    if [[ "$MAS_APP_CHANNEL_PREDICT" != "" || "$MAS_APP_CHANNEL_ASSIST" != "" ]]; then
      cp4d_channel_selection
    fi
  fi
}

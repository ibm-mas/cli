#!/usr/bin/env bash

function gitops_mas_config_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_mas_config [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Options:

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Working directory for GitOps repository
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID
  -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}  IBM Suite Maximo Application Suite Instance ID
  -A, --argocd-check ${COLOR_YELLOW}ARGOCD_CHECK${TEXT_RESET}        ArgoCD check flag, when set to true will make ArgoCD calls

AWS Secrets Manager Configuration (Required):
      --sm-aws-secret-region ${COLOR_YELLOW}SM_AWS_REGION${TEXT_RESET}          Region of the AWS Secrets Manager to use
      --sm-aws-access-key ${COLOR_YELLOW}SM_AWS_ACCESS_KEY_ID${TEXT_RESET}      Your AWS Access Key ID
      --sm-aws-secret-key ${COLOR_YELLOW}SM_AWS_SECRET_ACCESS_KEY${TEXT_RESET}  Your AWS Secret Key
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                   Secrets Manager path

MongoDb Provider Selection:
      --mongo-provider ${COLOR_YELLOW}MONGODB_PROVIDER${TEXT_RESET}  The mongodb provider to install. Only "aws" is supported

DRO Configuration:
      --dro-contact-email ${COLOR_YELLOW}DRO_CONTACT_EMAIL${TEXT_RESET}             The email address to register with DRO
      --dro-contact-firstname ${COLOR_YELLOW}DRO_CONTACT_FIRSTNAME${TEXT_RESET}     The first name to register with DRO
      --dro-contact-lastname ${COLOR_YELLOW}DRO_CONTACT_LASTNAME${TEXT_RESET}       The last name to register with DRO
      --dro-ca-certificate-file ${COLOR_YELLOW}DRO_CA_CERTIFICATE_FILE${TEXT_RESET} The location of a file containing the DRO CA certificate

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}          Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -S, --github-ssh ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}             Git ssh key path
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_mas_config_noninteractive() {
  # Set defaults
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"

  GIT_COMMIT_MSG="gitops-mas-config commit"

  export MONGODB_PROVIDER=${MONGODB_PROVIDER:-"yaml"}
  export ARGOCD_CHECK=${ARGOCD_CHECK:-"true"}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -W|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      --mas-app-id)
        export MAS_APP_ID=$1 && shift
        ;;

      -A|--argocd-check)
        export ARGOCD_CHECK=$1 && shift
        ;;

      --mas-config-type)
        export MAS_CONFIG_TYPE=$1 && shift
        ;;
      --mas-config-scope)
        export MAS_CONFIG_SCOPE=$1 && shift
        ;;

      --config-action)
        export CONFIG_ACTION=$1 && shift
        ;;

      # MongoDb Provider Selection
      --mongo-provider)
        export MONGODB_PROVIDER=$1 && shift
        ;;

      # DRO
      --dro-contact-email)
        export DRO_CONTACT_EMAIL=$1 && shift
        ;;
      --dro-contact-firstname)
        export DRO_CONTACT_FIRSTNAME=$1 && shift
        ;;
      --dro-contact-lastname)
        export DRO_CONTACT_LASTNAME=$1 && shift
        ;;
      --dro-ca-certificate-file)
        export DRO_CA_CERTIFICATE_FILE=$1 && shift
        ;;

      # AWS Secrets Manager Configuration
      --sm-aws-secret-region)
        export SM_AWS_REGION=$1
        export REGION_ID=$1
        shift
        ;;
      --sm-aws-access-key)
        export SM_AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --sm-aws-secret-key)
        export SM_AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;

      -h|--help)
        gitops_mas_config_help
        ;;
      *)
        # unknown option
        gitops_mas_config_help "Usage Error: Unsupported option \"${key}\" "
        ;;
      esac
  done


  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_mas_config_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_mas_config_help "ACCOUNT_ID is not set"
  [[ -z "$REGION_ID" ]] && gitops_mas_config_help "REGION_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_mas_config_help "CLUSTER_ID is not set"
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_mas_config_help "MAS_INSTANCE_ID is not set"
  
  [[ -z "$CONFIG_ACTION" ]] && gitops_mas_config_help "CONFIG_ACTION is not set"
  if ! [[ "$CONFIG_ACTION" =~ ^(upsert|remove)$ ]]; then
    gitops_mas_config_help "Invalid CONFIG_ACTION \"${CONFIG_ACTION}\"; must be one of 'upsert' or 'remove'"
  fi

  [[ -z "$MAS_CONFIG_TYPE" ]] && gitops_mas_config_help "MAS_INSTANCE_ID is not set"
  if ! [[ "$MAS_CONFIG_TYPE" =~ ^(bas|jdbc|kafka|ldap-default|mongo|objectstorage|sls|smtp)$ ]]; then
    gitops_mas_config_help "Invalid MAS_CONFIG_TYPE \"${MAS_CONFIG_TYPE}\"; must be one of bas|jdbc|kafka|ldap-default|mongo|objectstorage|sls|smtp"
  fi

  [[ -z "$MAS_CONFIG_SCOPE" ]] && gitops_mas_config_help "MAS_CONFIG_SCOPE is not set"
  if ! [[ "$MAS_CONFIG_SCOPE" =~ ^(system|ws|app|wsapp)$ ]]; then
    gitops_mas_config_help "Invalid MAS_CONFIG_SCOPE \"${CONFIG_ACTION}\"; must be one of system|ws|app|wsapp"
  fi

  if [[ "$MAS_CONFIG_SCOPE" =~ ^(ws|wsapp)$ ]]; then
    [[ -z "$MAS_WORKSPACE_ID" ]] && gitops_mas_config_help "MAS_WORKSPACE_ID must be set when MAS_CONFIG_SCOPE is one of ws|wsapp"
  fi

  if [[ "$MAS_CONFIG_SCOPE" =~ ^(app|wsapp)$ ]]; then
    [[ -z "$MAS_APP_ID" ]] && gitops_mas_config_help "MAS_APP_ID must be set when MAS_CONFIG_SCOPE is one of app|wsapp"
  fi


  # TODO: per config-type parameter validation




  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_mas_config_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_mas_config_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_mas_config_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_mas_config_help "GIT_BRANCH is not set"
  fi
}

function gitops_mas_config() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_mas_config_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_mas_config_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_INSTANCE_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${REGION_ID}/${CLUSTER_ID}/${MAS_INSTANCE_ID}
  CONFIGS_FILE="${GITOPS_INSTANCE_DIR}/ibm-mas-suite-configsx.yaml"

  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-mas-config
  mkdir -p $TEMP_DIR

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h4 "Target" "    "
  echo_reset_dim "Account ID...................... ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region ID....................... ${COLOR_MAGENTA}${REGION_ID}"
  echo_reset_dim "Cluster ID ..................... ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "MAS Instance ID ................ ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "System Config Directory ........ ${COLOR_MAGENTA}${GITOPS_INSTANCE_DIR}"
  echo_reset_dim "ArgoCD Check ................... ${COLOR_MAGENTA}${ARGOCD_CHECK}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h4 "AWS Secrets Manager" "    "
  echo_reset_dim "Region ......................... ${COLOR_MAGENTA}${SM_AWS_REGION}"
  echo_reset_dim "Secret Key ..................... ${COLOR_MAGENTA}${SM_AWS_ACCESS_KEY_ID:0:4}<snip>"
  echo_reset_dim "Access Key ..................... ${COLOR_MAGENTA}${SM_AWS_SECRET_ACCESS_KEY:0:4}<snip>"
  echo_reset_dim "Secrets Path ................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h4 "Mongo" "    "
  echo_reset_dim "Mongo Provider  ................ ${COLOR_MAGENTA}${MONGODB_PROVIDER}"
  reset_colors


  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h4 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ................. ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory .............. ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host ........................... ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization ................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ..................... ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ......................... ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h4 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ................. ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory .............. ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors
  echo



  if [ -z $GIT_SSH ]; then
    export GIT_SSH="false"
  fi


  # Generate the correct name for the config
  export MAS_CONFIG_NAME="${MAS_INSTANCE_ID}-${MAS_CONFIG_TYPE}-${MAS_CONFIG_SCOPE}"
  if [[ "$MAS_CONFIG_SCOPE" =~ ^(ws|wsapp)$ ]]; then
    MAS_CONFIG_NAME="${MAS_CONFIG_NAME}-${MAS_WORKSPACE_ID}"
  fi
  if [[ "$MAS_CONFIG_SCOPE" =~ ^(app|wsapp)$ ]]; then
    MAS_CONFIG_NAME="${MAS_CONFIG_NAME}-${MAS_APP_ID}"
  fi

  echo "${TEXT_DIM}"
  echo_reset_dim "CONFIG_ACTION  ......................... ${COLOR_MAGENTA}${CONFIG_ACTION}"
  echo_reset_dim "MAS_CONFIG_TYPE  ....................... ${COLOR_MAGENTA}${MAS_CONFIG_TYPE}"
  echo_reset_dim "MAS_CONFIG_NAME  ....................... ${COLOR_MAGENTA}${MAS_CONFIG_NAME}"
  reset_colors

  if [ "${CONFIG_ACTION}" == "upsert" ]; then
    if [ "${MAS_CONFIG_TYPE}" == "bas" ]; then
      echo "${TEXT_DIM}"
      echo_reset_dim "DRO Contact Email  ............. ${COLOR_MAGENTA}${DRO_CONTACT_EMAIL}"
      echo_reset_dim "DRO Contact First Name  ........ ${COLOR_MAGENTA}${DRO_CONTACT_FIRSTNAME}"
      echo_reset_dim "DRO Contact Last Name  ......... ${COLOR_MAGENTA}${DRO_CONTACT_LASTNAME}"
      echo_reset_dim "DRO Certificate File  .......... ${COLOR_MAGENTA}${DRO_CA_CERTIFICATE_FILE}"
      reset_colors
    fi

    if [ "${MAS_CONFIG_TYPE}" == "sls" ]; then
      echo "${TEXT_DIM}"
      echo_h4 "IBM Suite License Service" "    "
      echo_reset_dim "SLS URL  ....................... ${COLOR_MAGENTA}https://sls.mas-${MAS_INSTANCE_ID}-sls.svc"
      reset_colors
    fi

  fi


  # Clone github target repo
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
  # clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  mkdir -p ${GITOPS_INSTANCE_DIR}


  echo
  echo_h2 "Defining secrets"

  # Define/lookup secrets that may be used depending on which config we are upserting
  # TODO: merge in Rick's work in this area under mascore-2025 once complete
  # ---------------------------------------------------------------------------

  # Certain configurations require additional parameters to be passed in when
  # rendering the configuration template file (e.g. Mongo)
  # Put these parameters into this YAML file.
  export ADDITIONAL_JINJA_PARAMS_FILE="$TEMP_DIR/additional-jinja-params.yaml"
  touch $ADDITIONAL_JINJA_PARAMS_FILE

  # Source: gitops_suite_config
  # ---------------------------------------------------------------------------
  if [ "${MAS_CONFIG_TYPE}" == "mongo" ]; then
    export SECRET_KEY_MONGO_INFO=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}mongo#info
    export MONGO_SECRET_FILE=$TEMP_DIR/mongo-secret.json
    sm_login
    if [ $MONGODB_PROVIDER == 'yaml' ]; then
      sm_get_secret_file ${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}mongo $MONGO_SECRET_FILE
    elif [ $MONGODB_PROVIDER == 'aws' ]; then
      sm_get_secret_file ${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}mongo $MONGO_SECRET_FILE
    fi

    jq -r .info $MONGO_SECRET_FILE > $ADDITIONAL_JINJA_PARAMS_FILE

    export SECRET_NAME_MONGO=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}mongo
    export SECRET_KEY_MONGO_USERNAME=${SECRET_NAME_MONGO}#username
    export SECRET_KEY_MONGO_PASSWORD=${SECRET_NAME_MONGO}#password
  fi


  if [ "${MAS_CONFIG_TYPE}" == "bas" ]; then
    export SECRET_KEY_DRO_API_TOKEN=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}dro#dro_api_token
    export SECRET_KEY_DRO_URL=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}dro#dro_url
    export DRO_CA_CERTIFICATE=$(cat ${DRO_CA_CERTIFICATE_FILE})
    # TODO: this has changed in mascore-2025
  fi

  if [ "${MAS_CONFIG_TYPE}" == "sls" ]; then
    export SECRET_NAME_SLS=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}sls
    export SECRET_KEY_SLS_REGISTRATION_KEY=${SECRET_NAME_SLS}#registration_key
    export SLS_CA_CERTIFICATE=$(sm_get_secret_value ${SECRET_NAME_SLS} "ca_b64" | base64 -d)
      # TODO: this has changed in mascore-2025
  fi

  # Source: gitops_kafka_config
  # ---------------------------------------------------------------------------
  if [ "${MAS_CONFIG_TYPE}" == "kafka" ]; then
    if [[ "$AVP_TYPE" == "aws" ]]; then
      # kafka
      export SECRET_PREFIX="AmazonMSK_"
    fi
    export KAFKA_SECRET_FILE=$TEMP_DIR/kafka-secret.json
    sm_login
    sm_get_secret_file ${SECRET_PREFIX}${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}kafka $KAFKA_SECRET_FILE
    jq -r .info $KAFKA_SECRET_FILE > $ADDITIONAL_JINJA_PARAMS_FILE
    export AWS_MSK_SECRET=${SECRET_PREFIX}${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}kafka
    export SECRET_KEY_KAFKA_USERNAME=${AWS_MSK_SECRET}#username
    export SECRET_KEY_KAFKA_PASSWORD=${AWS_MSK_SECRET}#password
  fi

  # Source: gitops_suite_idp_config
  # ---------------------------------------------------------------------------
  if [ "${MAS_CONFIG_TYPE}" == "ldap-default" ]; then
    echo "TODO"
  fi
  
  # Source: gitops_suite_objectstorage_config
  # ---------------------------------------------------------------------------
  if [ "${MAS_CONFIG_TYPE}" == "objectstorage" ]; then
    echo "TODO"
  fi


  # Source: gitops_db2u_jdbc_config
  # ---------------------------------------------------------------------------
  if [ "${MAS_CONFIG_TYPE}" == "jdbc" ]; then
    echo "TODO"
  fi
 


  # Source: gitops_suite_smtp_config
  # ---------------------------------------------------------------------------
  if [ "${MAS_CONFIG_TYPE}" == "smtp" ]; then
    echo "TODO"
  fi

  echo
  echo_h2 "Updating configuration file"
  

  if [ "${CONFIG_ACTION}" == "upsert" ]; then

    # If the file doesn't exist, create a blank one
    if ! [ -f ${CONFIGS_FILE} ]; then
      jinja -X .+ $CLI_DIR/templates/gitops/appset-configs/cluster/instance/configs/ibm-mas-config-common.yaml.j2 > $CONFIGS_FILE
    fi

    # Remove any existing config with this name
    yq 'del(.ibm_mas_suite_configs[] | select(.mas_config_name == "'${MAS_CONFIG_NAME}'"))' $CONFIGS_FILE > $TEMP_DIR/configs.yaml

    # Render the appropriate template for the config into a new file
    jinja -X .+ -d $ADDITIONAL_JINJA_PARAMS_FILE $CLI_DIR/templates/gitops/appset-configs/cluster/instance/configs/ibm-mas-${MAS_CONFIG_TYPE}-config.yaml.j2 | yq '{"ibm_mas_suite_configs": [] + .}' > ${TEMP_DIR}/newconfig.yaml

    # Merge the two files
    yq eval-all '. as $item ireduce ({}; . *+ $item)' $TEMP_DIR/configs.yaml ${TEMP_DIR}/newconfig.yaml > $CONFIGS_FILE

  fi

  if [ "${CONFIG_ACTION}" == "remove" ]; then
    # If the file doesn't exist, nothing to remove, so no-op
    if [ -f ${CONFIGS_FILE} ]; then
      yq 'del(.ibm_mas_suite_configs[] | select(.mas_config_name == "'${MAS_CONFIG_NAME}'"))' $CONFIGS_FILE > ${TEMP_DIR}/configs.yaml
      cp ${TEMP_DIR}/configs.yaml ${CONFIGS_FILE}
    fi
  fi


  


  # # Commit and push to github target repo
  # # ---------------------------------------------------------------------------
  # if [ "$GITHUB_PUSH" == "true" ]; then
  #   # echo
  #   # echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
  #   # save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_INSTANCE_DIR "${GIT_COMMIT_MSG}"
  #   if [ "${ARGOCD_CHECK}" == "true" ]; then

  #   fi

  # fi


  # remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO

}





################## 
  # # Obtain the correct chart for the config type
  # declare -A MAS_CONFIG_CHARTS
  # MAS_CONFIG_CHARTS=( ["mongo"]="ibm-mas-mongo-config" ["sls"]="ibm-mas-sls-config" )
  # MAS_CONFIG_CHART=${MAS_CONFIG_CHARTS[${MAS_CONFIG_TYPE}]}
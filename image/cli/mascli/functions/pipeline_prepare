#!/bin/bash
function pipeline_prepare() {
  echo
  echo_h2 "Prepare Installation"

  # Set the namespace we are going to be working in
  PIPELINES_NS="mas-$MAS_INSTANCE_ID-pipelines"

  # Replace ALL environment variables in templates
  eval "echo \"$(cat $CLI_DIR/templates/pipelinerun-install.yaml)\"" > $CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID.yaml

  # Replace mas_instance_id and pipeline_storage_class in templates
  sed -e "s/{{mas_instance_id}}/$MAS_INSTANCE_ID/g" \
      -e "s/{{pipeline_storage_class}}/$PIPELINE_STORAGE_CLASS/g" \
      -e "s/{{pipeline_storage_accessmode}}/$PIPELINE_STORAGE_ACCESSMODE/g" \
      $CLI_DIR/templates/pvc.yaml > $CONFIG_DIR/pvc-$MAS_INSTANCE_ID.yaml

  if [ "$ALREADY_CONFIRMED" != "true" ] && [ "$NO_CONFIRM" != "true" ]; then
    OCP_CONSOLE_ROUTE=$(oc -n openshift-console get route console -o=jsonpath='{.spec.host}')
    echo -e "Connected to OCP cluster: \n   ${COLOR_CYAN}${TEXT_UNDERLINE}https://$OCP_CONSOLE_ROUTE${TEXT_RESET}${COLOR_RESET}"
    prompt_for_confirm "Proceed with pipeline setup on this cluster" || exit 0
  fi


  if [ "$ALREADY_CONFIRMED" != "true" ] && [ "$NO_CONFIRM" != "true" ]; then
    echo "${COLOR_YELLOW}If you are using storage classes that utilize 'WaitForFirstConsumer' binding mode choose 'No' at the prompt below"
    echo ""
    prompt_for_confirm_default_yes "Wait for PVCs to bind?" WAIT_FOR_PVCS
  fi

  echo ""
  echo -en "\033[s" # Save cursor position
  echo -n "Preparing namespace '$PIPELINES_NS' ..."
  echo -e "\n\nPreparing namespace '$PIPELINES_NS" >> $LOGFILE
  echo_hr1 >> $LOGFILE

  # Install the MAS Tekton definitions
  pipeline_install_tasks

  # Create the PVCs that we need
  oc apply -f $CONFIG_DIR/pvc-$MAS_INSTANCE_ID.yaml &>> $LOGFILE
  if [[ "$WAIT_FOR_PVCS" == "true" ]]; then
    LOOKUP_RESULT=$(oc -n $PIPELINES_NS get pvc config-pvc -o jsonpath='{.status.phase}')
    while [ "$LOOKUP_RESULT" != "Bound" ]; do
      echo "Waiting 5s for PVC to be bound before checking again ..."  &>> $LOGFILE
      sleep 5
      LOOKUP_RESULT=$(oc -n $PIPELINES_NS get pvc config-pvc -o jsonpath='{.status.phase}')
    done
  fi

  # Clean up existing secrets
  oc -n $PIPELINES_NS delete secret pipeline-additional-configs --ignore-not-found=true &>> $LOGFILE
  oc -n $PIPELINES_NS delete secret pipeline-sls-entitlement --ignore-not-found=true &>> $LOGFILE
  oc -n $PIPELINES_NS delete secret pipeline-pod-templates --ignore-not-found=true &>> $LOGFILE

  # Create new secrets
  if [ "$LOCAL_MAS_CONFIG_DIR" != "" ]; then
    oc -n $PIPELINES_NS apply -f $CONFIG_DIR/additional-configs-$MAS_INSTANCE_ID.yaml &>> $LOGFILE
  else
    # pipeline-additional-configs must exist (otherwise the suite-install step will hang), but can be empty
    oc -n $PIPELINES_NS create secret generic pipeline-additional-configs &>> $LOGFILE
  fi

  oc -n $PIPELINES_NS create secret generic pipeline-sls-entitlement --from-file=$SLS_LICENSE_FILE_LOCAL &>> $LOGFILE

  if [ "MAS_POD_TEMPLATES_DIR" != "" ]; then
    oc -n $PIPELINES_NS create secret generic pipeline-pod-templates \
      --from-file=${MAS_POD_TEMPLATES_DIR:+$MAS_POD_TEMPLATES_DIR/ibm-mas-bascfg.yml} \
      --from-file=${MAS_POD_TEMPLATES_DIR:+$MAS_POD_TEMPLATES_DIR/ibm-mas-pushnotificationcfg.yml} \
      --from-file=${MAS_POD_TEMPLATES_DIR:+$MAS_POD_TEMPLATES_DIR/ibm-mas-scimcfg.yml} \
      --from-file=${MAS_POD_TEMPLATES_DIR:+$MAS_POD_TEMPLATES_DIR/ibm-mas-slscfg.yml} \
      --from-file=${MAS_POD_TEMPLATES_DIR:+$MAS_POD_TEMPLATES_DIR/ibm-mas-smtpcfg.yml} \
      --from-file=${MAS_POD_TEMPLATES_DIR:+$MAS_POD_TEMPLATES_DIR/ibm-mas-suite.yml} \
      --from-file=${MAS_POD_TEMPLATES_DIR:+$MAS_POD_TEMPLATES_DIR/ibm-sls-licenseservice.yml} &>> $LOGFILE
  else
    # pipeline-pod-templates must exist (otherwise the suite-install step will hang), but can be empty
    oc -n $PIPELINES_NS create secret generic pipeline-pod-templates &>> $LOGFILE
  fi

  echo -en "\033[1K" # Clear current line
  echo -en "\033[u" # Restore cursor position
  echo -e "${COLOR_GREEN}Namespace '$PIPELINES_NS' is ready${COLOR_RESET}"

  echo
  echo_h4 "Installed Task Definitions"
  oc -n $PIPELINES_NS get tasks -o=custom-columns='NAME:.metadata.name,IMAGE:.spec.steps[0].image' | grep mas-devops-

  echo
  echo_h4 "Installed Pipeline Definitions"
  oc -n $PIPELINES_NS get pipeline

  echo ""
  echo -en "\033[s" # Save cursor position
  echo -n "Testing availability of $CLI_IMAGE in cluster ..."
  EXISTING_DEPLOYMENT_IMAGE=$(oc -n $PIPELINES_NS get deployment mas-cli -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null)

  if [[ "$EXISTING_DEPLOYMENT_IMAGE" != "CLI_IMAGE" ]]
  then oc -n $PIPELINES_NS apply -f $CONFIG_DIR/deployment-$MAS_INSTANCE_ID.yaml &>> $LOGFILE
  fi

  oc -n $PIPELINES_NS wait --for=condition=Available=true deployment mas-cli --timeout=3m &>> $LOGFILE
  if [[ "$?" == "0" ]]; then
    # All is good
    echo -en "\033[1K" # Clear current line
    echo -en "\033[u" # Restore cursor position
    echo -e "${COLOR_GREEN}$CLI_IMAGE is available from the target OCP cluster${COLOR_RESET}"
  else
    echo -en "\033[1K" # Clear current line
    echo -en "\033[u" # Restore cursor position

    # We can't get the image, so there's no point running the pipeline
    echo_warning "$CLI_IMAGE is unavailable from the target OCP cluster"
    echo "This image must be accessible from your OpenShift cluster to run the installation:"
    echo "- If you are running an offline (air gap) installation this likely means you have not mirrored this image to your private registry"
    echo "- It could also mean that your cluster's ImageContentSourcePolicy is misconfigured and does not contain an entry for quay.io/ibmmas"

    echo -e "\n\n[WARNING] $CLI_IMAGE is unavailable from the target OCP cluster" >> $LOGFILE
    echo_hr1 >> $LOGFILE
    oc -n $PIPELINES_NS get pods --selector="app=mas-cli" -o yaml >> $LOGFILE
    exit 1
  fi
}

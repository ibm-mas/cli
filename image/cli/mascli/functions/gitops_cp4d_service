#!/usr/bin/env bash

function gitops_cp4d_service_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_cp4d_service [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}    Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID

IBM Maximo Application Suite:
  -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}   IBM Suite Maximo Application Suite Instance ID
      --mas-config-dir ${COLOR_YELLOW}MAS_CONFIG_DIR${TEXT_RESET}     IBM Suite Maximo Application Suite config dir to hold config

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                    Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}  Secrets Manager key seperator string

IBM CP4D Service:
      --cpd_product-version ${COLOR_YELLOW}CPD_PRODUCT_VERSION${TEXT_RESET}                             CP4D Product Version
      --cpd-instance-namespace ${COLOR_YELLOW}CPD_INSTANCE_NAMESPACE${TEXT_RESET}                       CP4D Instance namespace to use
      --cpd-operators-namespace ${COLOR_YELLOW}CPD_OPERATORS_NAMESPACE${TEXT_RESET}                     CP4D Operators namespace to use
      --cpd-service-name ${COLOR_YELLOW}CPD_SERVICE_NAME${TEXT_RESET}                                   CP4D Service Name
      --cpd-service-cr-version ${COLOR_YELLOW}CPD_SERVICE_CR_VERSION${TEXT_RESET}                       CP4D Service Version
      --cpd-service-installplan-approval ${COLOR_YELLOW}CPD_SERVICE_INSTALLPLAN_APPROVAL${TEXT_RESET}   CP4D Service installplan approval
      --cpd-service-block-storage-class ${COLOR_YELLOW}CPD_SERVICE_BLOCK_STORAGE_CLASS${TEXT_RESET}     CP4D Service blockstorage clas
      --cpd-service-storage-class ${COLOR_YELLOW}CPD_SERVICE_STORAGE_CLASS${TEXT_RESET}                 CP4D Service storage clas
      --cpd-service-deployment-type ${COLOR_YELLOW}CPD_SERVICE_DEPLOYMENT_TYPE${TEXT_RESET}             CP4D Service Deployment Type

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_cp4d_service_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-cp4d-service commit"
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # MAS
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      --mas-config-dir)
        export MAS_CONFIG_DIR=$1 && shift
        ;;

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;

      # CP4D Service
      --cpd-product-version)
      export CPD_PRODUCT_VERSION=$1 && shift
        ;;
      --cpd-operators-namespace)
      export CPD_OPERATORS_NAMESPACE=$1 && shift
        ;;
      --cpd-instance-namespace)
      export CPD_INSTANCE_NAMESPACE=$1 && shift
        ;;
      --cpd-service-name)
      export CPD_SERVICE_NAME=$1 && shift
        ;;
      --cpd-service-cr-version)
      export CPD_SERVICE_CR_VERSION=$1 && shift
        ;;
      --cpd-service-installplan-approval)
      export CPD_SERVICE_INSTALLPLAN_APPROVAL=$1 && shift
        ;;
      --cpd-service-block-storage-class)
      export CPD_SERVICE_BLOCK_STORAGE_CLASS=$1 && shift
        ;;
      --cpd-service-storage-class)
      export CPD_SERVICE_STORAGE_CLASS=$1 && shift
        ;;
      --cpd-service-deployment-type)
      export CPD_SERVICE_DEPLOYMENT_TYPE=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
        
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_cp4d_service_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_cp4d_service_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_cp4d_service_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_cp4d_service_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_cp4d_service_help "CLUSTER_ID is not set"

  #MAS
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_cp4d_service_help "MAS_INSTANCE_ID is not set"
  [[ -z "$MAS_CONFIG_DIR" ]] && gitops_cp4d_service_help "MAS_CONFIG_DIR is not set"

  [[ -z "$CPD_SERVICE_NAME" ]] && gitops_cp4d_service_help "CPD_SERVICE_NAME is not set"
  [[ -z "$CPD_PRODUCT_VERSION" ]] && gitops_cp4d_service_help "CPD_PRODUCT_VERSION is not set"
  [[ -z "$CPD_SERVICE_BLOCK_STORAGE_CLASS" ]] && gitops_cp4d_service_help "CPD_SERVICE_BLOCK_STORAGE_CLASS is not set"
  [[ -z "$CPD_SERVICE_STORAGE_CLASS" ]] && gitops_cp4d_service_help "CPD_SERVICE_STORAGE_CLASS is not set"

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_cp4d_service_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_cp4d_service_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_cp4d_service_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_cp4d_service_help "GIT_BRANCH is not set"
  fi

}

function gitops_cp4d_service() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_cp4d_service_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_cp4d_service_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  GITOPS_APPS_DIR=${GITOPS_CLUSTER_DIR}/apps

  export CPD_OPERATORS_NAMESPACE=${CPD_OPERATORS_NAMESPACE:-"ibm-cpd-${MAS_INSTANCE_ID}-operators"}
  export CPD_INSTANCE_NAMESPACE=${CPD_INSTANCE_NAMESPACE:-"ibm-cpd-${MAS_INSTANCE_ID}-instance"}

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Application Directory ................. ${COLOR_MAGENTA}${GITOPS_APPS_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path .......................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Instance ID ............................. ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "Config Dir  ............................. ${COLOR_MAGENTA}${MAS_CONFIG_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "CP4D Service" "    "
  echo_reset_dim "CPD_OPERATORS_NAMESPACE  .................... ${COLOR_MAGENTA}${CPD_OPERATORS_NAMESPACE}"
  echo_reset_dim "CPD_INSTANCE_NAMESPACE  ..................... ${COLOR_MAGENTA}${CPD_INSTANCE_NAMESPACE}"
  echo_reset_dim "CPD_SERVICE_NAME  ........................... ${COLOR_MAGENTA}${CPD_SERVICE_NAME}"
  echo_reset_dim "CPD_SERVICE_CR_VERSION  ..................... ${COLOR_MAGENTA}${CPD_SERVICE_CR_VERSION}"
  echo_reset_dim "CPD_SERVICE_INSTALLPLAN_APPROVAL  ........... ${COLOR_MAGENTA}${CPD_SERVICE_INSTALLPLAN_APPROVAL}"
  echo_reset_dim "CPD_SERVICE_BLOCK_STORAGE_CLASS  ............ ${COLOR_MAGENTA}${CPD_SERVICE_BLOCK_STORAGE_CLASS}"
  echo_reset_dim "CPD_SERVICE_STORAGE_CLASS  .................. ${COLOR_MAGENTA}${CPD_SERVICE_STORAGE_CLASS}"
  echo_reset_dim "CPD_SERVICE_DEPLOYMENT_TYPE  ................ ${COLOR_MAGENTA}${CPD_SERVICE_DEPLOYMENT_TYPE}"
  reset_colors

  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-cp4d-service
  mkdir -p $TEMP_DIR

  if [ -z $GIT_SSH ]; then
    export GIT_SSH=false
  fi


  # We want to use CP4D 4.8 but we need to wait for it to be ready in automation and product
  # In order to not block use we will just install using ansible-devops
  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login
  export IBM_ENTITLEMENT_KEY_FILE=$TEMP_DIR/entitlement.yaml
  export SECRET_IBM_ENTITLEMENT=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}ibm_entitlement
  sm_get_secret_file $SECRET_IBM_ENTITLEMENT $IBM_ENTITLEMENT_KEY_FILE

  export IBM_ENTITLEMENT_KEY=$(jq -r .entitlement_key $IBM_ENTITLEMENT_KEY_FILE | base64 -d ; echo)
  export ROLE_NAME=cp4d_service
  ansible-playbook ibm.mas_devops.run_role

  rc=$?
  [ $rc -ne 0 ] && exit $rc

  export CPD_USER_SECRET=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}cp4d
  export SECRET_KEY_CPD_ADMIN_USERNAME=${CPD_USER_SECRET}#username
  export SECRET_KEY_CPD_ADMIN_PASSWORD=${CPD_USER_SECRET}#password

  if [[ "$CPD_SERVICE_NAME" == "wd" ]]; then
    # Extract the required details from the generated coscfg/secret.
    export CPD_ADMIN_USERNAME
    CPD_ADMIN_USERNAME=$(yq -sr '.[2].stringData.username' $MAS_CONFIG_DIR/${MAS_INSTANCE_ID}-wd-config.yml)
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    export CPD_ADMIN_PASSWORD
    CPD_ADMIN_PASSWORD=$(yq -sr '.[2].stringData.password' $MAS_CONFIG_DIR/${MAS_INSTANCE_ID}-wd-config.yml)
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    sm_update_secret $CPD_USER_SECRET "{\"username\": \"$CPD_ADMIN_USERNAME\", \"password\": \"$CPD_ADMIN_PASSWORD\"}"

    rc=$?
    [ $rc -ne 0 ] && exit $rc
  fi

  if [[ "$CPD_SERVICE_NAME" == "wsl" ]]; then
    # Extract the required details from the generated WatsonStudioCfg/secret.
    export CPD_ADMIN_USERNAME
    CPD_ADMIN_USERNAME=$(yq -sr '.[0].stringData.username' $MAS_CONFIG_DIR/${MAS_INSTANCE_ID}-watsonstudio-system.yml)
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    export CPD_ADMIN_PASSWORD
    CPD_ADMIN_PASSWORD=$(yq -sr '.[0].stringData.password' $MAS_CONFIG_DIR/${MAS_INSTANCE_ID}-watsonstudio-system.yml)
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    export CPD_URL
    CPD_URL=$(yq -sr '.[1].spec.config.endpoint' $MAS_CONFIG_DIR/${MAS_INSTANCE_ID}-watsonstudio-system.yml)
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    sm_update_secret $CPD_USER_SECRET "{\"username\": \"$CPD_ADMIN_USERNAME\", \"password\": \"$CPD_ADMIN_PASSWORD\", \"url\": \"$CPD_URL\"}"

    rc=$?
    [ $rc -ne 0 ] && exit $rc
  fi


  exit 0
}

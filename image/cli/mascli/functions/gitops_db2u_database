#!/usr/bin/env bash

function gitops_db2u_database_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_db2u_database [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}           Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}    Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}            Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}            Cluster ID

IBM Maximo Application Suite:
      -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}   IBM Suite Maximo Application Suite Instance ID      
      --mas-app-id ${COLOR_YELLOW}MAS_APP_ID${TEXT_RESET}                 IBM Suite Maximo Application Suite App that will use this db2u instance      
      --mas-workspace-id ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}     MAS WORKSPACE ID

IBM DB2U:
      --db2-dbname ${COLOR_YELLOW}DB2_DBNAME${TEXT_RESET}                                         DB2 DB Name
      --db2-version ${COLOR_YELLOW}DB2_VERSION${TEXT_RESET}                                       DB2 Version
      --db2-table-org ${COLOR_YELLOW}DB2_TABLE_ORG${TEXT_RESET}                                   DB2 table org
      --db2-4k-device-support ${COLOR_YELLOW}DB2_4K_DEVICE_SUPPORT${TEXT_RESET}                   DB2 4k device support
      --db2-workload ${COLOR_YELLOW}DB2_WORKLOAD${TEXT_RESET}                                     DB2 workload
      --db2-mln-count ${COLOR_YELLOW}DB2_MLN_COUNT${TEXT_RESET}                                   DB2 logical nodes count 
      --db2-num-pods ${COLOR_YELLOW}DB2_NUM_PODS${TEXT_RESET}                                     DB2 number of pods
      --db2-meta-storage-class ${COLOR_YELLOW}DB2_META_STORAGE_CLASS${TEXT_RESET}                 DB2 meta storage class
      --db2-meta-storage-size ${COLOR_YELLOW}DB2_META_STORAGE_SIZE${TEXT_RESET}                   DB2 meta storage size
      --db2-meta-storage-accessmode ${COLOR_YELLOW}DB2_META_STORAGE_ACCESSMODE${TEXT_RESET}       DB2 meta storage accessmode
      --db2-data-storage-class ${COLOR_YELLOW}DB2_DATA_STORAGE_CLASS${TEXT_RESET}                 DB2 data storage class
      --db2-data-storage-size ${COLOR_YELLOW}DB2_DATA_STORAGE_SIZE${TEXT_RESET}                   DB2 data storage size
      --db2-data-storage-accessmode ${COLOR_YELLOW}DB2_DATA_STORAGE_ACCESSMODE${TEXT_RESET}       DB2 data storage accessmode
      --db2-backup-storage-class ${COLOR_YELLOW}DB2_BACKUP_STORAGE_CLASS${TEXT_RESET}             DB2 backup storage class
      --db2-backup-storage-size ${COLOR_YELLOW}DB2_BACKUP_STORAGE_SIZE${TEXT_RESET}               DB2 backup storage size
      --db2-backup-storage-accessmode ${COLOR_YELLOW}DB2_BACKUP_STORAGE_ACCESSMODE${TEXT_RESET}   DB2 backup storage accessmode
      --db2-logs-storage-class ${COLOR_YELLOW}DB2_LOGS_STORAGE_CLASS${TEXT_RESET}                 DB2 logs storage class
      --db2-logs-storage-size ${COLOR_YELLOW}DB2_LOGS_STORAGE_SIZE${TEXT_RESET}                   DB2 logs storage size
      --db2-logs-storage-accessmode ${COLOR_YELLOW}DB2_LOGS_STORAGE_ACCESSMODE${TEXT_RESET}       DB2 logs storage accessmode
      --db2-temp-storage-class ${COLOR_YELLOW}DB2_TEMP_STORAGE_CLASS${TEXT_RESET}                 DB2 temp storage class
      --db2-temp-storage-size ${COLOR_YELLOW}DB2_TEMP_STORAGE_SIZE${TEXT_RESET}                   DB2 temp storage size
      --db2-temp-storage-accessmode ${COLOR_YELLOW}DB2_TEMP_STORAGE_ACCESSMODE${TEXT_RESET}       DB2 temp storage accessmode
      --db2-cpu-requests ${COLOR_YELLOW}DB2_CPU_REQUESTS${TEXT_RESET}                             Define the Kubernetes CPU request for the Db2 pod.
      --db2-cpu-limits ${COLOR_YELLOW}DB2_CPU_LIMITS${TEXT_RESET}                                 Define the Kubernetes CPU limit for the Db2 pod.
      --db2-memory-requests ${COLOR_YELLOW}DB2_MEMORY_REQUESTS${TEXT_RESET}                       Define the Kubernetes memory request for the Db2 pod.
      --db2-memory-limits ${COLOR_YELLOW}DB2_MEMORY_LIMITS${TEXT_RESET}                           Define the Kubernetes memory limit for the Db2 pod.
      --tls-version ${COLOR_YELLOW}TLS_VERSION${TEXT_RESET}                                       TLS Version
      --db2-ldap-username ${COLOR_YELLOW}DB2_LDAP_USERNAME${TEXT_RESET}                           DB2 LDAP Username to create
      --db2-ldap-password ${COLOR_YELLOW}DB2_LDAP_PASSWORD${TEXT_RESET}                           DB2 LDAP Password to create

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                     Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}   Secrets Manager key seperator string      

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_db2u_database_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-db2u-database commit"
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # MAS
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      -W|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      --mas-app-id)
        export MAS_APP_ID=$1 && shift
        ;;

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;

      # DB2
      --db2-channel)
        export DB2_CHANNEL=$1 && shift
        ;;
      --db2-dbname)
        export DB2_DBNAME=$1 && shift
        ;;
      --db2-version)
        export DB2_VERSION=$1 && shift
        ;;
      --db2-table-org)
        export DB2_TABLE_ORG=$1 && shift
        ;;
      --db2-4k-device-support)
        export DB2_4K_DEVICE_SUPPORT=$1 && shift
        ;;
      --db2-workload)
        export DB2_WORKLOAD=$1 && shift
        ;;
      --db2-mln-count)
        export DB2_MLN_COUNT=$1 && shift
        ;;
      --db2-num-pods)
        export DB2_NUM_PODS=$1 && shift
        ;;
      --db2-meta-storage-class)
        export DB2_META_STORAGE_CLASS=$1 && shift
        ;;
      --db2-meta-storage-size)
        export DB2_META_STORAGE_SIZE=$1 && shift
        ;;
      --db2-meta-storage-accessmode) 
        export DB2_META_STORAGE_ACCESSMODE=$1 && shift
        ;;
      --db2-data-storage-class) 
        export DB2_DATA_STORAGE_CLASS=$1 && shift
        ;;
      --db2-data-storage-size)
        export DB2_DATA_STORAGE_SIZE=$1 && shift
        ;;
      --db2-data-storage-accessmode)
        export DB2_DATA_STORAGE_ACCESSMODE=$1 && shift
        ;;
      --db2-backup-storage-class)
        export DB2_BACKUP_STORAGE_CLASS=$1 && shift
        ;;
      --db2-backup-storage-size)
        export DB2_BACKUP_STORAGE_SIZE=$1 && shift
        ;;
      --db2-backup-storage-accessmode)
        export DB2_BACKUP_STORAGE_ACCESSMODE=$1 && shift
        ;;
      --db2-logs-storage-class)
        export DB2_LOGS_STORAGE_CLASS=$1 && shift
        ;;
      --db2-logs-storage-size)
        export DB2_LOGS_STORAGE_SIZE=$1 && shift
        ;;
      --db2-logs-storage-accessmode)
        export DB2_LOGS_STORAGE_ACCESSMODE=$1 && shift
        ;;
      --db2-temp-storage-class)
        export DB2_TEMP_STORAGE_CLASS=$1 && shift
        ;;
      --db2-temp-storage-size)
        export DB2_TEMP_STORAGE_SIZE=$1 && shift
        ;;
      --db2-temp-storage-accessmode)
        export DB2_TEMP_STORAGE_ACCESSMODE=$1 && shift
        ;;
      --db2-cpu-requests)
        export DB2_CPU_REQUESTS=$1 && shift
        ;;
      --db2-cpu-limits)
        export DB2_CPU_LIMITS=$1 && shift
        ;;
      --db2-memory-requests)
        export DB2_MEMORY_REQUESTS=$1 && shift
        ;;
      --db2-memory-limits)
        export DB2_MEMORY_LIMITS=$1 && shift
        ;;
      --tls-version )
        export TLS_VERSION=$1 && shift
        ;;
      --db2-ldap-username )
        export DB2_LDAP_USERNAME=$1 && shift
        ;;
      --db2-ldap-password )
        export DB2_LDAP_PASSWORD=$1 && shift
        ;;
      --db2-internal )
        export DB2_INTERNAL=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_db2u_database_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_db2u_database_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$SM_AWS_ACCESS_KEY_ID" ]] &&  gitops_db2u_database_help "SM_AWS_ACCESS_KEY_ID is not set"
  [[ -z "$SM_AWS_SECRET_ACCESS_KEY" ]] && gitops_db2u_database_help "SM_AWS_SECRET_ACCESS_KEY is not set"
  [[ -z "$SM_AWS_REGION" ]] && gitops_db2u_database_help "SM_AWS_REGION is not set"

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_db2u_database_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_db2u_database_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_db2u_database_help "CLUSTER_ID is not set"
  
  #db2u
  [[ -z "$DB2_VERSION" ]] && gitops_db2u_help "DB2_VERSION is not set"
  [[ -z "$DB2_META_STORAGE_CLASS" ]] && gitops_db2u_help "DB2_META_STORAGE_CLASS is not set"
  [[ -z "$DB2_DATA_STORAGE_CLASS" ]] && gitops_db2u_help "DB2_DATA_STORAGE_CLASS is not set"
  [[ -z "$DB2_BACKUP_STORAGE_CLASS" ]] && gitops_db2u_help "DB2_BACKUP_STORAGE_CLASS is not set"
  [[ -z "$DB2_LOGS_STORAGE_CLASS" ]] && gitops_db2u_help "DB2_LOGS_STORAGE_CLASS is not set"
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_db2u_help "MAS_INSTANCE_ID is not set"
  [[ -z "$MAS_APP_ID" ]] && gitops_db2u_help "MAS_APP_ID is not set"
  
  #MAS
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_db2u_database_help "MAS_INSTANCE_ID is not set"
  [[ -z "$MAS_APP_ID" ]] && gitops_db2u_database_help "MAS_APP_ID is not set"
  
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_db2u_database_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_db2u_database_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_db2u_database_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_db2u_database_help "GIT_BRANCH is not set"
  fi

}

function wait_for_db2ucluster_crd(){
  # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True STARTS  
  wait_period=0
  while true
  do
    wait_period=$(($wait_period+10))
    if [ $wait_period -gt 300 ];then
      echo_reset_dim "${COLOR_RED}CRD db2uclusters.db2u.databases.ibm.com is not ready with in 300 sec, exiting"
      exit 1
    else
      sleep 10
    fi
    export DB2_CRD_NAMES_ACCEPTED_STATUS=`oc get crd  db2uclusters.db2u.databases.ibm.com -o=jsonpath="{.status.conditions[?(@.type=='NamesAccepted')].status}"`
    echo_reset_dim "DB2_CRD_NAMES_ACCEPTED_STATUS .... ${COLOR_MAGENTA}${DB2_CRD_NAMES_ACCEPTED_STATUS}"

    if [[ "$DB2_CRD_NAMES_ACCEPTED_STATUS" == "True" ]]; then
      break
    fi
  done  
  # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True DONE
}

# Invoke suite_db2_setup_for_manage
function invoke_suite_db2_setup_for_manage(){
  #TODO I don't think we want to call ansible here. We need to set the db2ucluster for manage
  export ROLE_NAME=suite_db2_setup_for_manage && ansible-playbook ibm.mas_devops.run_role
  rc=$?
  [ $rc -ne 0 ] && exit $rc
}

function gitops_db2u_database() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_db2u_database_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_db2u_database_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  rm -rf $GITOPS_WORKING_DIR/$GITHUB_REPO
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  GITOPS_APPS_DIR=${GITOPS_CLUSTER_DIR}/apps

  #Defaults
  if [[ -z $DB2_DBNAME ]]; then
    export DB2_DBNAME=BLUDB
  fi
  if [[ -z $DB2_TABLE_ORG ]]; then
    export DB2_TABLE_ORG=ROW
  fi 
  if [[ -z $DB2_4K_DEVICE_SUPPORT ]]; then
    export DB2_4K_DEVICE_SUPPORT=ON
  fi 
  if [[ -z $DB2_WORKLOAD ]]; then
    export DB2_WORKLOAD=ANALYTICS
  fi 
  if [[ -z $DB2_MLN_COUNT ]]; then
    export DB2_MLN_COUNT=1
  fi 
  if [[ -z $DB2_NUM_PODS ]]; then
    export DB2_NUM_PODS=1
  fi 
  if [[ -z $DB2_META_STORAGE_SIZE ]]; then
    export DB2_META_STORAGE_SIZE=20Gi
  fi 
  if [[ -z $DB2_META_STORAGE_ACCESSMODE ]]; then
    export DB2_META_STORAGE_ACCESSMODE=ReadWriteMany
  fi 
  if [[ -z $DB2_DATA_STORAGE_SIZE ]]; then
    export DB2_DATA_STORAGE_SIZE=100Gi
  fi 
  if [[ -z $DB2_DATA_STORAGE_ACCESSMODE ]]; then
    export DB2_DATA_STORAGE_ACCESSMODE=ReadWriteOnce
  fi 
  if [[ -z $DB2_BACKUP_STORAGE_SIZE ]]; then
    export DB2_BACKUP_STORAGE_SIZE=100Gi
  fi 
  if [[ -z $DB2_BACKUP_STORAGE_ACCESSMODE ]]; then
    export DB2_BACKUP_STORAGE_ACCESSMODE=ReadWriteMany
  fi 
  if [[ -z $DB2_LOGS_STORAGE_SIZE ]]; then
    export DB2_LOGS_STORAGE_SIZE=100Gi
  fi 
  if [[ -z $DB2_LOGS_STORAGE_ACCESSMODE ]]; then
    export DB2_LOGS_STORAGE_ACCESSMODE=ReadWriteOnce
  fi  
  if [[ -z $DB2_TEMP_STORAGE_SIZE ]]; then
    export DB2_TEMP_STORAGE_SIZE=100Gi
  fi 
  if [[ -z $DB2_TEMP_STORAGE_ACCESSMODE ]]; then
    export DB2_TEMP_STORAGE_ACCESSMODE=ReadWriteOnce
  fi

  if [[ -z $DB2_CPU_REQUESTS ]]; then
    export DB2_CPU_REQUESTS=4
  fi 
  if [[ -z $DB2_CPU_LIMITS ]]; then
    export DB2_CPU_LIMITS=6
  fi  
  if [[ -z $DB2_MEMORY_REQUESTS ]]; then
    export DB2_MEMORY_REQUESTS=8Gi
  fi 
  if [[ -z $DB2_MEMORY_LIMITS ]]; then
    export DB2_MEMORY_LIMITS=16Gi
  fi

  export DB2_INSTANCE_NAME=db2wh-${MAS_INSTANCE_ID}-${MAS_APP_ID}
  export DB2_NAMESPACE=db2u
  export DB2_DBNAME=${DB2_DBNAME:-"BLUDB"}
  export TLS_VERSION=${TLS_VERSION:-"TLSv1.2"}

  # by default db2 internal is true, set it to false if db2 is external
  export DB2_INTERNAL=${DB2_INTERNAL:-"true"}
  export WHOAMI=`oc whoami`
  if [[ -z ${WHOAMI} ]]; then
    echo_reset_dim "${COLOR_RED} Please do 'oc login' to the cluster ArgoCD is to be installed on"
    exit 1
  fi
  export CLUSTER_DOMAIN=`oc get ingress.config.openshift.io  cluster -o=jsonpath='{.spec.domain}'`

  echo
  reset_colors
  echo_h2 "Review Settings "

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Application Directory ................. ${COLOR_MAGENTA}${GITOPS_APPS_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path ............................ ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "MAS Instance ID ......................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "MAS Application ID ...................... ${COLOR_MAGENTA}${MAS_APP_ID}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "DB2 Cluster Configuration" "    "
  echo_reset_dim "db2-instance-name ....................... ${COLOR_MAGENTA}${DB2_INSTANCE_NAME}"
  echo_reset_dim "db2-dbname  ............................. ${COLOR_MAGENTA}${DB2_DBNAME}"
  echo_reset_dim "db2-version  ............................ ${COLOR_MAGENTA}${DB2_VERSION}"
  echo_reset_dim "db2-table-org  .......................... ${COLOR_MAGENTA}${DB2_TABLE_ORG}"
  echo_reset_dim "db2-4k-device-support  .................. ${COLOR_MAGENTA}${DB2_4K_DEVICE_SUPPORT}"
  echo_reset_dim "db2-workload  ........................... ${COLOR_MAGENTA}${DB2_WORKLOAD}"
  echo_reset_dim "db2-mln-count  .......................... ${COLOR_MAGENTA}${DB2_MLN_COUNT}"
  echo_reset_dim "db2-num-pods  ........................... ${COLOR_MAGENTA}${DB2_NUM_PODS}"
  echo_reset_dim "db2-meta-storage-class  ................. ${COLOR_MAGENTA}${DB2_META_STORAGE_CLASS}"
  echo_reset_dim "db2-meta-storage-size  .................. ${COLOR_MAGENTA}${DB2_META_STORAGE_SIZE}"
  echo_reset_dim "db2-meta-storage-accessmode  ............ ${COLOR_MAGENTA}${DB2_META_STORAGE_ACCESSMODE}"
  echo_reset_dim "db2-data-storage-class  ................. ${COLOR_MAGENTA}${DB2_DATA_STORAGE_CLASS}"
  echo_reset_dim "db2-data-storage-size  .................. ${COLOR_MAGENTA}${DB2_DATA_STORAGE_SIZE}"
  echo_reset_dim "db2-data-storage-accessmode  ............ ${COLOR_MAGENTA}${DB2_DATA_STORAGE_ACCESSMODE}"
  echo_reset_dim "db2-backup-storage-class  ............... ${COLOR_MAGENTA}${DB2_BACKUP_STORAGE_CLASS}"
  echo_reset_dim "db2-backup-storage-size  ................ ${COLOR_MAGENTA}${DB2_BACKUP_STORAGE_SIZE}"
  echo_reset_dim "db2-backup-storage-accessmode  .......... ${COLOR_MAGENTA}${DB2_BACKUP_STORAGE_ACCESSMODE}"
  echo_reset_dim "db2-logs-storage-class  ................. ${COLOR_MAGENTA}${DB2_LOGS_STORAGE_CLASS}"
  echo_reset_dim "db2-logs-storage-size  .................. ${COLOR_MAGENTA}${DB2_LOGS_STORAGE_SIZE}"
  echo_reset_dim "db2-logs-storage-accessmode  ............ ${COLOR_MAGENTA}${DB2_LOGS_STORAGE_ACCESSMODE}"
  echo_reset_dim "db2-temp-storage-class  ................. ${COLOR_MAGENTA}${DB2_TEMP_STORAGE_CLASS}"
  echo_reset_dim "db2-temp-storage-size  .................. ${COLOR_MAGENTA}${DB2_TEMP_STORAGE_SIZE}"
  echo_reset_dim "db2-temp-storage-accessmode  ............ ${COLOR_MAGENTA}${DB2_TEMP_STORAGE_ACCESSMODE}"
  echo_reset_dim "mas-app-id  ............................. ${COLOR_MAGENTA}${MAS_APP_ID}"
  echo_reset_dim "db2-cpu-requests  ....................... ${COLOR_MAGENTA}${DB2_CPU_REQUESTS}"
  echo_reset_dim "db2-cpu-limits  ......................... ${COLOR_MAGENTA}${DB2_CPU_LIMITS}"
  echo_reset_dim "db2-memory-requests  .................... ${COLOR_MAGENTA}${DB2_MEMORY_REQUESTS}"
  echo_reset_dim "db2-memory-limits  ...................... ${COLOR_MAGENTA}${DB2_MEMORY_LIMITS}"
  echo_reset_dim "CLUSTER_DOMAIN .......................... ${COLOR_MAGENTA}${CLUSTER_DOMAIN}"
  reset_colors

  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-db2u-database
  mkdir -p $TEMP_DIR


  if [ -z $GIT_SSH ]; then
    export GIT_SSH=false
  fi
  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_APPS_DIR}

  # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True 
  wait_for_db2ucluster_crd

  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Generating DB2U Database Configuraton"
  echo
  echo_reset_dim "- Generating DB2U Database file ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.${MAS_APP_ID}.ibm-db2u-database.yaml"
  jinja -X .+ $CLI_DIR/templates/gitops/ibm-db2u-database.yaml.j2 -o ${GITOPS_APPS_DIR}/${MAS_INSTANCE_ID}.${MAS_APP_ID}.ibm-db2u-database.yaml

  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_APPS_DIR "${GIT_COMMIT_MSG}"

    argocd_login
    argocd_sync ${CLUSTER_ID}-watcher
    argocd_hard_refresh mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-db2-database
    check_argo_app_synced mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-db2-database ${CLUSTER_ID}-watcher ${DB2_NAMESPACE}
    check_argo_app_healthy mas-${MAS_INSTANCE_ID}-${MAS_APP_ID}-db2-database ${CLUSTER_ID}-watcher
  fi
  if [[ "$DB2_INTERNAL" == "true" && "$MAS_APP_ID" == "manage" ]]; then
    invoke_suite_db2_setup_for_manage ${MAS_INSTANCE_ID} 
  fi
  if [ "$GITHUB_PUSH" == "true" ]; then  
	  remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO
  fi
  exit 0
}

#!/bin/bash

function provision_roks() {
  if [[ -z "$IBMCLOUD_APIKEY" ]]; then
    echo ""
    echo_h2 "IBM Cloud API Key"
    echo "Provide your IBMCloud API key (if you have not set the IBMCLOUD_APIKEY"
    echo "environment variable) which will be used to provision a ROKS instance."
    echo ""
    prompt_for_input "IBM Cloud API Key" IBMCLOUD_APIKEY && export IBMCLOUD_APIKEY
  fi
  echo ""
  echo_h2 "IBM Cloud ROKS Cluster Configuration"
  echo "Select your worker node flavour and the number of worker nodes to provision."
  echo "We recommend the 'b3c.16x64.300gb' worker node flavour to provide the best balance"
  echo "of performance, flexibility, and cost.  Three workers is sufficient to install"
  echo "all applications in the suite, but larger workloads will require more worker nodes."
  echo "You can easily add and remove worker nodes to the cluster after provision so do not"
  echo "worry too much if you are not sure how many worker nodes you need as this can "
  echo "easily be adjusted at any time to scale your cluster up or down."
  echo ""
  if [[ ! -z "$1" ]]; then
    CLUSTER_NAME=$1
  fi

  prompt_for_input "Cluster Name" CLUSTER_NAME && export CLUSTER_NAME
  export CLUSTER_TYPE=roks

  echo
  echo "OCP Version:"
  echo "  1. 4.10 EUS (MAS 8.7-8.8)"
  echo "  2. 4.8 EUS  (MAS 8.6-8.8)"
  prompt_for_input "Select Version" OCP_VERSION_SELECTION "1"

  case $OCP_VERSION_SELECTION in
    1|4.10|4.10\ EUS)
      export OCP_VERSION=4.10_openshift
      ;;

    2|4.8|4.8\ EUS)
      export OCP_VERSION=4.8_openshift
      ;;

    *)
      export OCP_VERSION=$OCP_VERSION_SELECTION
      ;;
  esac

  prompt_for_input "Resource Group" IBMCLOUD_RESOURCEGROUP "Default" && export IBMCLOUD_RESOURCEGROUP
  prompt_for_input "Datacenter" ROKS_ZONE "dal10" && export ROKS_ZONE
  prompt_for_input "Worker Node Type" ROKS_FLAVOR "b3c.16x64.300gb" && export ROKS_FLAVOR
  prompt_for_input "Number of Worker Nodes" ROKS_WORKERS "3" && export ROKS_WORKERS

  export OCP_PROVISION_GPU=false
  echo ""
  echo_h2 "Bare Metal GPU Worker Support"
  echo "GPU worker nodes with flavour, mg4c.32x384.2xp100, can be added to the cluster"
  echo "for applications that require complex mathematical computations.  If you intnd"
  echo "to install the IBM Visual Inspection application you should answer 'yes' at"
  echo "the prompt below."
  echo ""
  prompt_for_confirm "Provision GPU worker nodes in cluster" && export OCP_PROVISION_GPU=true

  if [[ $OCP_PROVISION_GPU == "true" ]]; then
    prompt_for_input "Number of GPU Nodes" GPU_WORKERS "1" && export GPU_WORKERS
    prompt_for_input "GPU Worker Pool Name" GPU_WORKERPOOL_NAME "gpu" && export GPU_WORKERPOOL_NAME
  fi

  export UPGRADE_IMAGE_REGISTRY_STORAGE=false
  echo ""
  echo_h2 "Upgrade Image Registry Capacity"
  echo "By default IBMCloud ROKS provisions 100GB of storage for the internal container registry."
  echo "Answer 'yes' at the prompt below to upgrade the storage capacity to 400GB."
  echo ""
  prompt_for_confirm "Upgrade Image Registry Storage from 100GB to 400GB" && export UPGRADE_IMAGE_REGISTRY_STORAGE=true

  echo ""
  echo_h2 "Summary"
  echo "IBMCloud API Key .......... ${IBMCLOUD_APIKEY:0:8}..."
  echo "IBMCloud Resource Group ... $IBMCLOUD_RESOURCEGROUP"
  echo "Cluster Name .............. $CLUSTER_NAME"
  echo "OCP Version ............... $OCP_VERSION"
  echo "Worker Flavour ............ $ROKS_FLAVOR"
  echo "Worker Nodes .............. $ROKS_WORKERS"
  echo "Add GPU Worker Nodes ...... $OCP_PROVISION_GPU"
  if [[ $OCP_PROVISION_GPU == "true" ]]; then
    echo "GPU Worker Nodes .......... $GPU_WORKERS"
    echo "GPU Worker Pool Name ...... $GPU_WORKERPOOL_NAME"
  fi
  echo "Upgrade Registry Storage .. $UPGRADE_IMAGE_REGISTRY_STORAGE"

  echo ""
  confirm "Proceed with these settings [y/N]" || exit 0

  ansible-playbook ibm.mas_devops.ocp_roks_provision || exit 1

  echo ""
  echo "IBM Cloud ROKS cluster is ready to use"
  OCP_CONSOLE_ROUTE=$(oc -n openshift-console get route console -o=jsonpath='{.spec.host}')
  echo "Connected to OCP cluster: https://$OCP_CONSOLE_ROUTE"

}

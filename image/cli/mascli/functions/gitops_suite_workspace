#!/usr/bin/env bash

function gitops_suite_workspace_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops_suite_workspace [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Options:

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}                  Working directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}           Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}                   Account name that the cluster belongs to
  -r, --region-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}             Region ID
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}                   Cluster ID
  -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}         IBM Suite Maximo Application Suite Instance ID
  -W, --mas-workspace-id ${COLOR_YELLOW}MAS_WORKSPACE_ID${TEXT_RESET}       IBM Suite Maximo Application Suite workspace ID
  -N, --mas-workspace-name ${COLOR_YELLOW}MAS_WORKSPACE_NAME${TEXT_RESET}   IBM Suite Maximo Application Suite workspace name
  --install-aws-efs ${COLOR_YELLOW}INSTALL_EFS${TEXT_RESET}                 Install aws-efs on the cluster
  -A, --argocd-check ${COLOR_YELLOW}ARGOCD_CHECK${TEXT_RESET}               ArgoCD check flag, when set to true will make ArgoCD calls  

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_suite_workspace_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-suite-workspace commit"
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}

  # TODO: will need to add explicit args to pipeline when we start using this code to deploy to MCSP
  export REGION=${REGION:-${SM_AWS_REGION}}
  
  export INSTALL_EFS=${INSTALL_EFS:-"false"}
  export ARGOCD_CHECK=${ARGOCD_CHECK:-"true"}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -r|--region)
        export REGION=$1 && shift
        ;;
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;
      # MAS Workspace specific
      -W|--mas-workspace-id)
        export MAS_WORKSPACE_ID=$1 && shift
        ;;
      -N|--mas-workspace-name)
        export MAS_WORKSPACE_NAME=$1 && shift
        ;;

      --install-aws-efs)
        export INSTALL_EFS="true" && shift
        ;;
      -A|--argocd-check)
        export ARGOCD_CHECK=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;
       -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      -h|--help)
        gitops_suite_workspace_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_suite_workspace_help "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done

  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_suite_workspace_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$GITOPS_VERSION" ]] && gitops_suite_workspace_help "GITOPS_VERSION is not set"
  [[ -z "$MAS_WORKSPACE_ID" ]] && gitops_suite_workspace_help "MAS_WORKSPACE_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_suite_workspace_help "CLUSTER_ID is not set"
  [[ -z "$REGION" ]] && gitops_suite_workspace_help "REGION is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_suite_workspace_help "ACCOUNT_ID is not set"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_suite_workspace_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_suite_workspace_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_suite_workspace_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_suite_workspace_help "GIT_BRANCH is not set"
  fi
}

function gitops_suite_workspace() {
  # Take the first parameter off (it will be create-gitops)
  shift
  
  # Why are we deliberately unsetting these environment variables in this script (but not the other similar scripts)?
  # NOTE: this is fine when used from the Tekton task since these are passed in as CLI args
  # Leaving this be for now in case I missed something
  unset MAS_INSTANCE_ID
  unset MAS_WORKSPACE_NAME
  unset MAS_WORKSPACE_ID

  if [[ $# -gt 0 ]]; then
    gitops_suite_workspace_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_suite_workspace_interactive
  fi
  
  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_INSTANCE_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${REGION}/${CLUSTER_ID}/${MAS_INSTANCE_ID}


  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID............................. ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Region ................................ ${COLOR_MAGENTA}${REGION}"
  echo_reset_dim "Instance Config Directory ............. ${COLOR_MAGENTA}${GITOPS_INSTANCE_DIR}"
  echo_reset_dim "ArgoCD Check .......................... ${COLOR_MAGENTA}${ARGOCD_CHECK}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.com/ibm-mas/gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors  

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Instance ID ........................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "Workspace ID .......................... ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
  echo_reset_dim "Workspace Name ........................ ${COLOR_MAGENTA}${MAS_WORKSPACE_NAME}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Additional Steps" "    "
  echo_reset_dim "Install EFS ........................... ${COLOR_MAGENTA}${INSTALL_EFS}"
  reset_colors

  # Get the cluster-level secrets used
  # ---------------------------------------------------------------------------
  CURRENT_DIR=$PWD
  TEMP_DIR=$CURRENT_DIR/tmp-suite-workspace
  mkdir -p $TEMP_DIR

  if [ -z $GIT_SSH ]; then
    export GIT_SSH="false"
  fi


  # Set and Validate App Names
  # ---------------------------------------------------------------------------
  CLUSTER_ROOT_APP="cluster.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}"
  INSTANCE_ROOT_APP="instance.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"
  WORKSPACE_APP="workspace.${ACCOUNT_ID}.${REGION}.${CLUSTER_ID}.${MAS_INSTANCE_ID}"

  validate_app_name "${CLUSTER_ROOT_APP}"
  validate_app_name "${INSTANCE_ROOT_APP}"
  validate_app_name "${WORKSPACE_APP}"


  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_INSTANCE_DIR}

  # Generate ArgoApps
  # ---------------------------------------------------------------------------
  # Per MAS instance

  #if not set, use workspace id
  if [[ -z $MAS_WORKSPACE_NAME ]]; then
    export MAS_WORKSPACE_NAME=$MAS_WORKSPACE_ID
  fi
  echo "Generating IBM Maximo Application Suite Workspace file ${GITOPS_INSTANCE_DIR}/ibm-mas-workspace.yaml"
  jinja -X .+ $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-mas-workspace.yaml.j2 -o ${GITOPS_INSTANCE_DIR}/ibm-mas-workspace.yaml

  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_INSTANCE_DIR "${GIT_COMMIT_MSG}"
    remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO

    if [ "${ARGOCD_CHECK}" == "true" ]; then
      argocd_login
      argocd_sync "${CLUSTER_ROOT_APP}" ## trigger the instance appset to pick up the new config files
      check_argo_app_synced "${INSTANCE_ROOT_APP}" "${CLUSTER_ROOT_APP}" # wait for the instance root app to sync

      argocd_hard_refresh "${WORKSPACE_APP}"

      check_argo_app_synced "${WORKSPACE_APP}" "${INSTANCE_ROOT_APP}"
      check_argo_app_healthy "${WORKSPACE_APP}" "${INSTANCE_ROOT_APP}"
    fi

  fi

}

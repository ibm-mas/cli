#!/usr/bin/env bash

function gitops_aiservice_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM


Usage:
  mas gitops-aiservice [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Basic Configuration:
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}                                                  Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}                                                  Cluster ID
  -i, --aiservice-instance-id ${COLOR_YELLOW}AISERVICE_INSTANCE_ID${TEXT_RESET}                              AI Broker instance ID  

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                                              Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}  

ibm aiservice(required):
      --aiservice-namespace ${TEXT_RESET}AISERVICE_NAMESPACE${TEXT_RESET}
      --aiservice-instance-id ${TEXT_RESET}AISERVICE_INSTANCE_ID${TEXT_RESET}
      --primary-storage-class ${TEXT_RESET}PRIMARY_STORAGE_CLASS${TEXT_RESET}

storage provider:
      --aiservice-storage-provider ${TEXT_RESET}AISERVICE_STORAGE_PROVIDER${TEXT_RESET}
      --aiservice-storage-secret ${TEXT_RESET}AISERVICE_STORAGE_SECRET${TEXT_RESET}
      --mas-aibroker-storage-port ${TEXT_RESET}MAS_AIBROKER_STORAGE_PORT${TEXT_RESET}
      --aiservice-storage_ssl ${TEXT_RESET}AISERVICE_STORAGE_SSL${TEXT_RESET}
      --aiservice-storage-region ${TEXT_RESET}AISERVICE_STORAGE_REGION${TEXT_RESET}
      --mas-aibroker-storage-pipelines-bucket ${TEXT_RESET}MAS_AIBROKER_STORAGE_PIPELINES_BUCKET${TEXT_RESET}
      --mas-aibroker-storage-tenants-bucket ${TEXT_RESET}MAS_AIBROKER_STORAGE_TENANTS_BUCKET${TEXT_RESET}
      --mas-aibroker-storage-templates-bucket ${TEXT_RESET}MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET${TEXT_RESET}

mariadb storage
      --aiservice-mariadb-secret ${TEXT_RESET}AISERVICE_MARIADB_SECRET${TEXT_RESET}

sls_dro_jdbc
      --artifactory-username ${TEXT_RESET}ARTIFACTORY_USERNAME${TEXT_RESET}
      --aiservice-channel ${TEXT_RESET}AISERVICE_CHANNEL${TEXT_RESET}
      --mas-catalog-source ${TEXT_RESET}MAS_CATALOG_SOURCE${TEXT_RESET}
      --mas-icr-cp ${TEXT_RESET}MAS_ICR_CP${TEXT_RESET}
      --mas-icr-cpopen ${TEXT_RESET}MAS_ICR_CPOPEN${TEXT_RESET}
      --cluster-domain ${TEXT_RESET}CLUSTER_DOMAIN${TEXT_RESET}
      --in-saas-env ${TEXT_RESET}IN_SAAS_ENV${TEXT_RESET}
      --is-external-route ${TEXT_RESET}IS_EXTERNAL_ROUTE${TEXT_RESET}  # A flag indicating to enable external route (default value is: false)

Target Cluster (Optional):
      --cluster-url ${COLOR_YELLOW}CLUSTER_URL${TEXT_RESET}       Set to target a remote Kubernetes cluster (defaults to 'https://kubernetes.default.svc')

Automatic GitHub Push (Optional):
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}          Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -S, --github-ssh ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}             Git ssh key path
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_aiservice_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-aiservice commit"

   #adding default values # all generic values should to put here # check with ansible playbook/gitops anvs 
   #only export below in whiel loop

  #adding default values 
  export AISERVICE_NAMESPACE=${AISERVICE_NAMESPACE:-"${AISERVICE_INSTANCE_ID}-aiservice"}
  export IN_SAAS_ENV=${IN_SAAS_ENV:-"true"}
  export IS_EXTERNAL_ROUTE=${IS_EXTERNAL_ROUTE:-"false"}  # Default to "false", can be set to "true" if needed  
  export MAS_ICR_CP=${MAS_ICR_CP:-"cp.icr.io/cp"}
  export MAS_ICR_CPOPEN=${MAS_ICR_CPOPEN:-"icr.io/cpopen"}
  # -- SLS Defaults
  export REGION_ID=${REGION_ID:-${SM_AWS_REGION}} 
  export MAS_APP_ID=${MAS_APP_ID:-"aiservice"}
  export AISERVICE_WATSONX_SECRET=${AISERVICE_WATSONX_SECRET:-"${MAS_APP_ID}-watsonxcfg"}
  export AISERVICE_STORAGE_PROVIDER=${AISERVICE_STORAGE_PROVIDER:-"aws"}
  #Storage Defaults
  export AISERVICE_STORAGE_REGION=${AISERVICE_STORAGE_REGION:-""}
  export AISERVICE_STORAGE_SSL=${AISERVICE_STORAGE_SSL:-"true"}
  export AISERVICE_STORAGE_SECRET=${AISERVICE_STORAGE_SECRET:-"${MAS_APP_ID}-miniocfg"}
  export MAS_CATALOG_SOURCE=${MAS_CATALOG_SOURCE:-"ibm-operator-catalog"}
  #-- mariadb defaults
  export AISERVICE_MARIADB_SECRET=${AISERVICE_MARIADB_SECRET:-"${MAS_APP_ID}-mariadbcfge"}

  export AISERVICE_S3_BUCKET_PREFIX=${AISERVICE_S3_BUCKET_PREFIX:-"m"}
  export ENVIRONMENT_TYPE=${ENVIRONMENT_TYPE:-"PRODUCTION"}
  export SLS_REGISTRATION_KEY_SECRET=${SLS_REGISTRATION_KEY_SECRET:-"sls-registration-key"}
  export DRO_TOKEN_SECRET=${DRO_TOKEN_SECRET:-"dro-token"}
  export DRO_CACERT_SECRET=${DRO_CACERT_SECRET:-"dro-certificates"}
  export AISERVICE_S3_TEMPLATES_BUCKET=${AISERVICE_S3_TEMPLATES_BUCKET:-"km-templates"}
  export AISERVICE_S3_TENANTS_BUCKET=${AISERVICE_S3_TENANTS_BUCKET:-"km-tenants"}
  export AISERVICE_S3_SECRET=${AISERVICE_S3_SECRET:-"aiservice-s3cfg"}

  # Target the local (to ArgoCD) cluster
  export CLUSTER_URL=${CLUSTER_URL:-"https://kubernetes.default.svc"}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # AWS Secrets Manager Configuration
      --sm-aws-secret-region)
        export SM_AWS_REGION=$1
        export REGION_ID=$1
        shift
        ;;
      --sm-aws-access-key)
        export SM_AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --sm-aws-secret-key)
        export SM_AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;

      --aiservice-namespace)
          export AISERVICE_NAMESPACE=$1 && shift
        ;;
      --in-saas-env)
          export IN_SAAS_ENV=$1 && shift
        ;;
      --is-external-route)
          export IS_EXTERNAL_ROUTE=$1 && shift
        ;;
      --mas-icr-cp)
        export MAS_ICR_CP=$1 && shift
        ;;
      --mas-icr-cpopen)
        export MAS_ICR_CPOPEN=$1 && shift
        ;;

      --region-id)
        export REGION_ID=$1 && shift
        ;;

      --aiservice-watsonx-secret)
          export AISERVICE_WATSONX_SECRET=$1 && shift
        ;;
      --aiservice-storage-provider)
          export AISERVICE_STORAGE_PROVIDER=$1 && shift
        ;;
      --aiservice-storage-region)
        export AISERVICE_STORAGE_REGION=$1 && shift
        ;;
      --aiservice-storage_ssl)
        export AISERVICE_STORAGE_SSL=$1 && shift
        ;;
      --aiservice-storage-secret)
          export AISERVICE_STORAGE_SECRET=$1 && shift
        ;;
      --mas-catalog-source)
          export MAS_CATALOG_SOURCE=$1 && shift
        ;;

      --aiservice-mariadb-secret)
          export AISERVICE_MARIADB_SECRET=$1 && shift
        ;;
      --environment-type)
        export ENVIRONMENT_TYPE=$1 && shift
        ;;

      --aiservice-s3-endpoint-url)
        export AISERVICE_S3_ENDPOINT_URL=$1 && shift
        ;;

      --aiservice-s3-bucket-prefix)
        export AISERVICE_S3_BUCKET_PREFIX=$1 && shift
        ;;
      --sls-registration-key-secret)
        export SLS_REGISTRATION_KEY_SECRET=$1 && shift
        ;;
      --dro-token-secret)
        export DRO_TOKEN_SECRET=$1 && shift
        ;;
      --dro-cacert-secret)
        export DRO_CACERT_SECRET=$1 && shift
        ;;
      --aiservice-s3-templates-bucket)
        export AISERVICE_S3_TEMPLATES_BUCKET=$1 && shift
        ;;
      --aiservice-s3-tenants-bucket)
        export AISERVICE_S3_TENANTS_BUCKET=$1 && shift
        ;;
      --aiservice-s3-secret)
        export AISERVICE_S3_SECRET=$1 && shift
        ;;
     # Target Cluster (Optional)
      --cluster-url)
        export CLUSTER_URL=$1 && shift
        ;;
        
      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_aiservice_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_aiservice_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done


  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_aiservice_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_aiservicee_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_aiservice_help "CLUSTER_ID is not set"
  [[ -z "$REGION_ID" && -z "$SM_AWS_REGION" ]] && gitops_aiservice_help "REGION_ID or SM_AWS_REGION is not set"
  [[ -z "$CLUSTER_URL" ]] && gitops_suite_help "CLUSTER_URL is not set"
  
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_aiservicee_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_aiservice_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_aiservice_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_aiservice_help "GIT_BRANCH is not set"
    
  fi

# add validation below like above  for those variable which have the value needed for further execution
# -- aiservice
  [[ -z "$AISERVICE_INSTANCE_ID" ]] && gitops_aiservicee_help "AISERVICE_INSTANCE_ID is not set. Please specify the AI Broker instance ID using --aiservice_instance_id."
  [[ -z "$PRIMARY_STORAGE_CLASS" ]] && gitops_aiservice_help "PRIMARY_STORAGE_CLASS is not set. Please provide the primary storage class using --primary-storage-class."
  [[ -z "$CLUSTER_DOMAIN" ]] && gitops_aiservicee_help "CLUSTER_DOMAIN is not set. Please provide the cluster domain using --cluster-domain."
  [[ -z "$ARTIFACTORY_USERNAME" ]] && gitops_aiservice_help "ARTIFACTORY_USERNAME is not set. Please provide the artifactory username using --artifactory-username"
  [[ -z "$AISERVICE_CHANNEL" ]] && gitops_aiservice_help "AISERVICE_CHANNEL is not set. Please provide the mas app channel using --aiservice-channel"
  [[ -z "$MAS_CATALOG_SOURCE" ]] && gitops_aiservice_help "MAS_CATALOG_SOURCE is not set. Please provide the mas catalog source using --mas-catalog-source"
  [[ -z "$MAS_ICR_CP" ]] && gitops_aiservice_help "MAS_ICR_CP is not set. Please provide the MAS ICR CP using --mas-icr-cp"
  [[ -z "$MAS_ICR_CPOPEN" ]] && gitops_aiservice_help "MAS_ICR_CPOPEN is not set. Please provide the MAS ICR CPOPEN using --mas-icr-cpopopen"
  [[ -z "$IN_SAAS_ENV" ]] && gitops_aiservice_help "IN_SAAS_ENV is not set. Please specify if this is in SaaS environment using --in-saas-env."
  [[ -z "$IS_EXTERNAL_ROUTE" ]] && gitops_aiservice_help "IS_EXTERNAL_ROUTE is not set. Please specify if this is an external route using --is-external-route."
  [[ -z "$AISERVICE_S3_ENDPOINT_URL" ]] && gitops_aiservice_help "AISERVICE_S3_ENDPOINT_URL is not set. Please specify the S3 endpoint URL using --aiservice-s3-endpoint-url."


}

function gitops_aiservice() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_aiservice_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_aiservice_interactive
  fi

  # catch errors
  set -o pipefail
  trap 'echo "[ERROR] Error occurred at $BASH_SOURCE, line $LINENO, exited with $?"; exit 1' ERR

  rm -rf $GITOPS_WORKING_DIR
  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${CLUSTER_ID}/${AISERVICE_INSTANCE_ID}

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ..................... ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region ID ...................... ${COLOR_MAGENTA}${REGION_ID}"
  echo_reset_dim "Cluster ID ..................... ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Cluster URL .................... ${COLOR_MAGENTA}${CLUSTER_URL}"
  echo_reset_dim "Cluster Config Directory ....... ${COLOR_MAGENTA}${GITOPS_CLUSTER_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "AWS Secrets Manager" "    "
  echo_reset_dim "Region ......................... ${COLOR_MAGENTA}${SM_AWS_REGION}"
  echo_reset_dim "Secret Key ..................... ${COLOR_MAGENTA}${SM_AWS_ACCESS_KEY_ID:0:4}<snip>"
  echo_reset_dim "Access Key ..................... ${COLOR_MAGENTA}${SM_AWS_SECRET_ACCESS_KEY:0:4}<snip>"
  echo_reset_dim "Secrets Path ................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  # echo all the variables of gitops+envs
  export MAS_INSTANCE_ID="$AISERVICE_INSTANCE_ID"
  echo_reset_dim "MAS Instance ID ....................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "AI Broker Instance ID ................. ${COLOR_MAGENTA}${AISERVICE_INSTANCE_ID}"
  echo_reset_dim "AI Broker Namespace ................... ${COLOR_MAGENTA}${AISERVICE_NAMESPACE}"
  echo_reset_dim "AI Service WatsonX Secret ............. ${COLOR_MAGENTA}${AISERVICE_WATSONX_SECRET}"
  echo_reset_dim "Pull Secret Name ...................... ${COLOR_MAGENTA}${PULL_SECRET_NAME}"
  # Storage variables
  echo_reset_dim "AI Broker Storage Provider ........ ${COLOR_MAGENTA}${AISERVICE_STORAGE_PROVIDER}"
  echo_reset_dim "AI Broker Storage Secret .......... ${COLOR_MAGENTA}${AISERVICE_STORAGE_SECRET}"
  echo_reset_dim "AI Broker Storage Port ............ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_PORT}"
  echo_reset_dim "AI Broker Storage SSL ............. ${COLOR_MAGENTA}${AISERVICE_STORAGE_SSL}"
  echo_reset_dim "AI Broker Storage Region .......... ${COLOR_MAGENTA}${AISERVICE_STORAGE_REGION}"
  echo_reset_dim "AI Broker Pipelines Bucket ........ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_PIPELINES_BUCKET}"
  echo_reset_dim "AI Broker Tenants Bucket .......... ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_TENANTS_BUCKET}"
  echo_reset_dim "AI Broker Templates Bucket ........ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET}"
  echo_reset_dim "AI Broker MariaDB Secret .......... ${COLOR_MAGENTA}${AISERVICE_MARIADB_SECRET}"
  
  echo_reset_dim "Primary Storage Class ................. ${COLOR_MAGENTA}${PRIMARY_STORAGE_CLASS}"
  echo_reset_dim "Artifactory Username ................... ${COLOR_MAGENTA}${ARTIFACTORY_USERNAME}"
  echo_reset_dim "AiService Channel ...................... ${COLOR_MAGENTA}${AISERVICE_CHANNEL}"
  echo_reset_dim "MAS Catalog Source ..................... ${COLOR_MAGENTA}${MAS_CATALOG_SOURCE}"
  echo_reset_dim "MAS ICR CP ............................. ${COLOR_MAGENTA}${MAS_ICR_CP}"
  echo_reset_dim "MAS ICR CPOpen ......................... ${COLOR_MAGENTA}${MAS_ICR_CPOPEN}"
  echo_reset_dim "Cluster Domain ......................... ${COLOR_MAGENTA}${CLUSTER_DOMAIN}"
  echo_reset_dim "In SaaS Environment .................... ${COLOR_MAGENTA}${IN_SAAS_ENV}"
  echo_reset_dim "Is External Route ...................... ${COLOR_MAGENTA}${IS_EXTERNAL_ROUTE}"

  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login
  # update those varialbe which are necessory to be updated into aws , 
  SECRETS_PREFIX="${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}"

  export SECRET_KEY_IBM_ENTITLEMENT=${SECRETS_PREFIX}ibm_entitlement#entitlement_key

  #storage
  # mas_aibroker_storage_accesskey
  export SECRET_KEY_STORAGE_ACCESSKEY=${SECRETS_PREFIX}storage#sm_storage_accesskey
  export SECRET_KEY_STORAGE_SECRETKEY=${SECRETS_PREFIX}storage#sm_storage_secretkey 
  export SECRET_KEY_STORAGE_HOST=${SECRETS_PREFIX}storage#sm_storage_host
  export SECRET_KEY_STORAGE_PORT=${SECRETS_PREFIX}storage#sm_storage_port
  export SECRET_KEY_STORAGE_REGION=${SECRETS_PREFIX}storage#sm_s3_region
  # mas_aibroker_storage_templates_bucket
  export SM_STORAGE_BUCKET_TEMPLATES=${SECRETS_PREFIX}storage#sm_storage_bucket_templates
  # mas_aibroker_storage_tenants_bucket
  export SM_STORAGE_BUCKET_TENANTS=${SECRETS_PREFIX}storage#sm_storage_bucket_tenants
  # mas_aibroker_storage_pipelines_bucket
  export SM_STORAGE_BUCKET_PIPELINES=${SECRETS_PREFIX}storage#sm_storage_bucket_pipelines


  #mariadb
  export MAS_AIBROKER_DB_HOST=${SECRETS_PREFIX}mariadb#sm_mariadb_host
  export MAS_AIBROKER_DB_PORT=${SECRETS_PREFIX}mariadb#sm_mariadb_port
  export MAS_AIBROKER_DB_USER=${SECRETS_PREFIX}mariadb#sm_mariadb_user
  export MAS_AIBROKER_DB_DATABASE=${SECRETS_PREFIX}mariadb#sm_mariadb_database
  export MAS_AIBROKER_DB_SECRET_NAME=${SECRETS_PREFIX}mariadb#sm_mariadb_secret_name
  export MAS_AIBROKER_DB_SECRET_VALUE=${SECRETS_PREFIX}mariadb#sm_mariadb_secret_value

  #sls
  export SLSCFG_REGISTRATION_KEY=${SECRETS_PREFIX}sls#slscfg_registration_key
  #dro
  export DROCFG_CA=${SECRETS_PREFIX}droai#drocfg_ca
  export DROCFG_TENANT=${SECRETS_PREFIX}droai#drocfg_ca_tenant
  export DROCFG_REGISTRATION_KEY=${SECRETS_PREFIX}droai#drocfg_registration_key
  export DROCFG_URL=${SECRETS_PREFIX}droai#drocfg_url
  #jdbc
  export JDBCCFG_USERNAME=${SECRETS_PREFIX}jdbc#jdbccfg_username
  export JDBCCFG_PASSWORD=${SECRETS_PREFIX}jdbc#jdbccfg_password
  export JDBCCFG_URL=${SECRETS_PREFIX}jdbc#jdbccfg_url
  export JDBCCFG_SSLENABLED=${SECRETS_PREFIX}jdbc#jdbccfg_sslenabled
  export JDBCCFG_CA=${SECRETS_PREFIX}jdbc#jdbccfg_ca

  export MAS_ENTITLEMENT_KEY=${SECRETS_PREFIX}ibm_entitlement#entitlement_key
  export ARTIFACTORY_TOKEN=${SECRETS_PREFIX}ibm_entitlement#image_pull_secret_b64

  sm_verify_secret_exists ${SECRETS_PREFIX}ibm_entitlement "image_pull_secret_b64,entitlement_key"
  sm_verify_secret_exists ${SECRETS_PREFIX}droai "drocfg_ca,drocfg_registration_key,drocfg_url,drocfg_ca_tenant"
  sm_verify_secret_exists ${SECRETS_PREFIX}sls "slscfg_registration_key"
  sm_verify_secret_exists ${SECRETS_PREFIX}storage "sm_storage_host,sm_storage_accesskey,sm_storage_secretkey,sm_storage_bucket_templates,sm_storage_bucket_tenants,sm_storage_bucket_pipelines"
  sm_verify_secret_exists ${SECRETS_PREFIX}jdbc "jdbccfg_username,jdbccfg_password,jdbccfg_url,jdbccfg_sslenabled,jdbccfg_ca"
  sm_verify_secret_exists ${SECRETS_PREFIX}mariadb "sm_mariadb_host,sm_mariadb_port,sm_mariadb_user,sm_mariadb_database,sm_mariadb_secret_name,sm_mariadb_secret_value"

  

    if [ -z $GIT_SSH ]; then
      export GIT_SSH=false
    fi

    # Clone github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo "GITOPS_WORKING_DIR  ${GITOPS_WORKING_DIR}"
      echo "GITOPS_CLUSTER_DIR  ${GITOPS_CLUSTER_DIR}"
      echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
      clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
    fi
    mkdir -p ${GITOPS_CLUSTER_DIR}

    # Generate ArgoApps
    # ---------------------------------------------------------------------------
    echo
    echo_h2 "Generating Argo Project and Applications"
    echo "- Base Config"
    echo "Generating aiservice base file ${GITOPS_CLUSTER_DIR}/ibm-aiservice-instance-base.yaml"
    jinjanate_commmon $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-mas-instance-base.yaml.j2 ${GITOPS_CLUSTER_DIR}/ibm-aiservice-instance-base.yaml

    # Generate ArgoApps
    # ---------------------------------------------------------------------------
    echo
    echo_h2 "Generating aiservice operator Applications"
    echo "- aiservice operator"

    echo "Generating aiservice file ${GITOPS_CLUSTER_DIR}/ibm-aiservice.yaml"
    jinjanate_commmon $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-aiservice.yaml.j2 ${GITOPS_CLUSTER_DIR}/ibm-aiservice.yaml

    # Commit and push to github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
      save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH "${GITOPS_WORKING_DIR}/${GITHUB_REPO}" "${GIT_COMMIT_MSG}"
      remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO
    fi

    # rm -rf $TEMP_DIR
    rm -rf $GITOPS_WORKING_DIR


  exit 0 
}
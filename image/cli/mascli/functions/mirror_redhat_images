#!/bin/bash

function mirror_redhat_to_registry_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas mirror-images [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

Mirror Mode (Required):
  -m, --mode ${COLOR_YELLOW}MIRROR_MODE${TEXT_RESET}                         Operation mode (direct, to-filesystem, from-filesystem)
  -d, --dir ${COLOR_YELLOW}MIRROR_WORKING_DIR${TEXT_RESET}                   Working directory for the mirror process
  --mirror-platform                                Mirror Red Hat Platform images
  --mirror-operators                              Mirror selected content from Red Hat Operator catalogs

Registry Details (Required when mode is direct and from-filesystem only):
  -H, --host ${COLOR_YELLOW}REGISTRY_PUBLIC_HOST${TEXT_RESET}                 Hostname of the target registry
  -P, --port ${COLOR_YELLOW}REGISTRY_PUBLIC_PORT${TEXT_RESET}                 Port number for the target registry
  -u, --username ${COLOR_YELLOW}REGISTRY_USERNAME${TEXT_RESET}                Username to authenticate to the target registry
  -p, --password ${COLOR_YELLOW}REGISTRY_PASSWORD${TEXT_RESET}                Password to authenticate to the target registry

Red Hat Image Pull Secret (Required):
      --pullsecret ${COLOR_YELLOW}REDHAT_PULLSECRET${TEXT_RESET}              Red Hat OpenShift Pull Secret (https://console.redhat.com/openshift/install/pull-secret)

Content Selection (Optional):
      --release ${COLOR_YELLOW}OCP_RELEASE${TEXT_RESET}                       OCP Release to mirror content for (e.g. 4.10, 4.12)

Platform Version Range (Optional):
      --min-version ${COLOR_YELLOW}OCP_MIN_VERSION${TEXT_RESET}               Minimum version of the OCP release to mirror
      --max-version ${COLOR_YELLOW}OCP_MAX_VERSION${TEXT_RESET}               Maximium version of the OCP release to mirror

Other Commands:
      --no-confirm                                Mirror images without prompting for confirmation
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}


function mirror_redhat_to_registry_noninteractive() {
  # Red Hat
  MIRROR_REDHAT_PLATFORM=false
  MIRROR_REDHAT_OPERATORS=false
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # Basic mode of operation
      -m|--mode)
        MIRROR_MODE=$1 && shift
        ;;
      -d|--dir)
        MIRROR_WORKING_DIR=$1 && shift
        ;;

      # What to mirror
      --mirror-platform)
        MIRROR_REDHAT_PLATFORM=true
        ;;
      --mirror-operators)
        MIRROR_REDHAT_OPERATORS=true
        ;;

      # Registry
      -H|--host)
        REGISTRY_PUBLIC_HOST=$1 && shift
        ;;
      -P|--port)
        REGISTRY_PUBLIC_PORT=$1 && shift
        ;;
      -u|--username)
        REGISTRY_USERNAME=$1 && shift
        ;;
      -p|--password)
        REGISTRY_PASSWORD=$1 && shift
        ;;

      # Pull secret
      --pullsecret)
        REDHAT_PULLSECRET=$1 && shift
        ;;

      # Content Selection (Optional)
      --release)
        OCP_RELEASE=$1 && shift
        ;;

      # Platform Version Range (Optional)
      --min-version)
        OCP_MIN_VERSION=$1 && shift
        ;;
      --max-version)
        OCP_MAX_VERSION=$1 && shift
        ;;

      # Other commands
      --no-confirm)
        NO_CONFIRM=true
        ;;
      -h|--help)
        mirror_redhat_to_registry_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        mirror_redhat_to_registry_help
        exit 1
        ;;
      esac
  done

  # Check all args have been set
  [[ -z "$MIRROR_MODE" ]] && mirror_redhat_to_registry_help "MIRROR_MODE is not set"
  [[ -z "$MIRROR_WORKING_DIR" ]] && mirror_redhat_to_registry_help "MIRROR_WORKING_DIR is not set"

  if [[ "$MIRROR_MODE" == "direct" ]] || [[ "$MIRROR_MODE" == "from-filesystem" ]]; then
    [[ -z "$REGISTRY_PUBLIC_HOST" ]] && mirror_redhat_to_registry_help "REGISTRY_PUBLIC_HOST is not set"
    [[ -z "$REGISTRY_PUBLIC_PORT" ]] && mirror_redhat_to_registry_help "REGISTRY_PUBLIC_PORT is not set"
  fi

  [[ -z "$REDHAT_PULLSECRET" ]] && mirror_redhat_to_registry_help "REDHAT_PULLSECRET is not set"

  if [[ "$MIRROR_MODE" == "direct" ]] || [[ "$MIRROR_MODE" == "to-filesystem" ]]; then
    [[ -z "$OCP_RELEASE" ]] && mirror_redhat_to_registry_help "OCP_RELEASE is not set"
    if [[ "$MIRROR_REDHAT_PLATFORM" == "false" ]] && [[ "$MIRROR_REDHAT_OPERATORS" == "false" ]]; then
      echo "Nothing to do.  Select what content to mirror using --mirror-product and/or --mirror-operators"
      exit 0
    fi
  fi
}

function mirror_redhat_to_registry_interactive() {
  load_config
  echo
  echo_h2 "Configure Mirror Mode"
  prompt_for_input "Working Directory" MIRROR_WORKING_DIR

  echo -e "${COLOR_YELLOW}Mirror Mode:"
  echo "  1. Direct"
  echo "  2. To filesystem"
  echo "  3. From filesystem"
  prompt_for_input "Select Mirror Mode" MIRROR_MODE_SELECTION "1"

  case $MIRROR_MODE_SELECTION in
    1|direct)
      MIRROR_MODE=direct
      ;;
    2|t|to|to-filesystem)
      MIRROR_MODE=to-filesystem
      ;;
    3|f|from|from-filesystem)
      MIRROR_MODE=from-filesystem
      ;;
    *)
      echo_warning "Invalid selection"
      exit 1
      ;;
  esac

  echo
  echo_h2 "Configure Target Mirror"
  prompt_for_input "Mirror Registry Host" REGISTRY_PUBLIC_HOST
  prompt_for_input "Mirror Registry Port" REGISTRY_PUBLIC_PORT

  echo
  echo_h2 "Configure Authentication"
  prompt_for_input "Mirror Registry Username" REGISTRY_USERNAME
  prompt_for_input "Mirror Registry Password" REGISTRY_PASSWORD

  echo
  echo_h2 "Configure Images to Mirror"
  reset_colors

  prompt_for_confirm "Red Hat OpenShift Container Platform Release" MIRROR_RH_RELEASE
  if [[ "$MIRROR_RH_RELEASE" == "true" ]]; then
    prompt_for_input "Release Version (x.y.z)" OPENSHIFT_RELEASE_VERSION "4.10.18"
  fi

  prompt_for_confirm "Red Hat OpenShift Container Platform Operator Catalog" MIRROR_RH_OPERATORS
  if [[ "$MIRROR_RH_OPERATORS" == "true" ]]; then
    prompt_for_input "Operator Catalog Version (x.y)" OPENSHIFT_OPERATORS_VERSION "4.10"
  fi

  echo
  echo_h2 "Configure Pull Secret"
  prompt_for_input "Red Hat Pull Secet" REDHAT_PULLSECRET
}

function mirror_redhat_to_registry() {
  # Take the first parameter off (it will be mirror-images)
  shift
  if [[ $# -gt 0 ]]; then
    mirror_redhat_to_registry_noninteractive "$@"
  else
    mirror_redhat_to_registry_interactive
  fi

  # Ensure all environment variables are available to ansible-playbook

  # General Config
  export MIRROR_MODE
  export MIRROR_WORKING_DIR
  export MIRROR_REDHAT_PLATFORM
  export MIRROR_REDHAT_OPERATORS

  # Target Registry
  export REGISTRY_PUBLIC_HOST
  export REGISTRY_PUBLIC_PORT
  export REGISTRY_USERNAME
  export REGISTRY_PASSWORD

  # Red Hat Catalogs
  export OCP_RELEASE
  export OCP_MIN_VERSION
  export OCP_MAX_VERSION

  # Authentication
  export REDHAT_PULLSECRET

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h3 "Configuration" "    "
  echo_reset_dim "Mirror Mode ........................... ${COLOR_MAGENTA}${MIRROR_MODE}"
  echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${MIRROR_WORKING_DIR}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h3 "Red Hat Content" "    "
  echo_reset_dim "OpenShift Release ..................... ${COLOR_MAGENTA}${OCP_RELEASE}"
  echo_reset_dim "Authentication ........................ ${COLOR_MAGENTA}${REDHAT_PULLSECRET}"

  if [[ "$MIRROR_REDHAT_PLATFORM" == "true" ]]
  then
    echo_reset_dim "Mirror Platform Images ................ ${COLOR_GREEN}Yes"
    echo_reset_dim "Minimum Version ....................... ${COLOR_MAGENTA}${OCP_MIN_VERSION:-undefined}"
    echo_reset_dim "Maximum Version ....................... ${COLOR_MAGENTA}${OCP_MAX_VERSION:-undefined}"
  fi

  if [[ "$MIRROR_REDHAT_OPERATORS" == "true" ]]
  then
    echo_reset_dim "Mirror Operator Catalogs .............. ${COLOR_GREEN}Yes"
  fi
  reset_colors

  if [[ "$MIRROR_MODE" == "direct" ]] | [[ "$MIRROR_MODE" == "from-filesystem" ]]; then
    echo "${TEXT_DIM}"
    echo_h3 "Target Registry Connection" "    "
    echo_reset_dim "Registry Host ......................... ${COLOR_MAGENTA}${REGISTRY_PUBLIC_HOST}"
    echo_reset_dim "Registry Port ......................... ${COLOR_MAGENTA}${REGISTRY_PUBLIC_PORT}"
    reset_colors

    echo "${TEXT_DIM}"
    echo_h3 "Target Registry Authentication" "    "
    echo_reset_dim "Registry Username ..................... ${COLOR_MAGENTA}${REGISTRY_USERNAME}"
    echo_reset_dim "Registry Password ..................... ${COLOR_MAGENTA}${REGISTRY_PASSWORD:0:4}<snip>"
    reset_colors
  fi

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi

  echo
  echo_h2 "Run Mirror Process"
  TIMESTAMP=$(date "+%Y%m%d-%H%M%S")
  LOG_PREFIX="$MIRROR_WORKING_DIR/logs/mirror-$TIMESTAMP"
  if [ ! -d $MIRROR_WORKING_DIR/logs/ ]; then
    mkdir -p $MIRROR_WORKING_DIR/logs/
  fi

  mirror_one_thing true "Red Hat Content" "$LOG_PREFIX-redhat.log"  mirror_openshift

}

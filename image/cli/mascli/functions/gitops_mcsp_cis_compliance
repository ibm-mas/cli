#!/usr/bin/env bash


function gitops_mcsp_cis_compliance_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops-mcsp-cis-compliance[options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}            Directory for GitOps repository
  -g, --gitops-version ${COLOR_YELLOW}GITOPS_VERSION${TEXT_RESET}     Version of ibm-mas/gitops to use
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}             Account ID
  -r, --region ${COLOR_YELLOW}REGION${TEXT_RESET}                     Region
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}             Cluster ID

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}           Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}           GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}            Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}           Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}             Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}     Git commit message to use when committing to of your GitOps repository
  -S  --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}              Git ssh key path
Other Commands:
  -h, --help                              Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function gitops_mcsp_cis_compliance_noninteractive() {
  # TODO: Remember to change the defaults to suite public before release!
  GITOPS_WORKING_DIR=$PWD/working-dir
  SECRETS_KEY_SEPERATOR="/"

  GITHUB_PUSH="false"
  export GIT_COMMIT_MSG=${GIT_COMMIT_MSG:-"gitops-mcsp-cis_compliance commit"}
  export GITOPS_VERSION=${GITOPS_VERSION:-poc}

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -g|--gitops-version)
        export GITOPS_VERSION=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;
      -r|--region)
        export REGION=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;

      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_mcsp_cis_compliance_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_mcsp_cis_compliance_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
    esac
  done

  [[ -z "$ACCOUNT_ID" ]] && gitops_mcsp_cis_compliance_help "ACCOUNT_ID is not set"
  [[ -z "$REGION" ]] && gitops_mcsp_cis_compliance_help "REGION is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_mcsp_cis_compliance_help "CLUSTER_ID is not set"

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_mcsp_cis_compliance_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_mcsp_cis_compliance_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_mcsp_cis_compliance_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_mcsp_cis_compliance_help "GIT_BRANCH is not set"
  fi

}

function gitops_mcsp_cis_compliance() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_mcsp_cis_compliance_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_cis_compliance_cluster_interactive
  fi

  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${REGION}/${CLUSTER_ID}

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region     ............................ ${COLOR_MAGENTA}${REGION}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Cluster Directory ..................... ${COLOR_MAGENTA}${GITOPS_CLUSTER_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "GitOps Source" "    "
  echo_reset_dim "GitOps URL ............................ ${COLOR_MAGENTA}https://github.ibm.com/automation-paas-cd-pipeline/mas-poc-gitops"
  echo_reset_dim "GitOps Version ........................ ${COLOR_MAGENTA}${GITOPS_VERSION}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors


  # Get Cluster details from ArgoCD worker
  # ---------------------------------------------------------------------------
  echo_h2 "Get Cluster details from ArgoCD worker"
  argocd_login

  export CLUSTER_URL
  argocd_get_cluster_url "${CLUSTER_ID}" "CLUSTER_URL"
  echo "Cluster URL: ${CLUSTER_URL}"


  # Clone github target repo
  # ---------------------------------------------------------------------------
  if [ -z $GIT_SSH ]; then
    export GIT_SSH="false"
  fi
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
    clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
  fi
  mkdir -p ${GITOPS_CLUSTER_DIR}

  # Generating Cluster Configuration
  # ---------------------------------------------------------------------------
  echo
  echo_h2 "Generating Cluster Configuration"
  jinja -X .+ $CLI_DIR/templates/gitops/mcsp/ibm-cis-compliance.yaml.j2 -o ${GITOPS_CLUSTER_DIR}/ibm-cis-compliance.yaml
  echo
  echo "ibm-cis-compliance.yaml"
  echo "---"
  cat ${GITOPS_CLUSTER_DIR}/ibm-cis-compliance.yaml


  # Commit and push to github target repo
  # ---------------------------------------------------------------------------
  if [ "$GITHUB_PUSH" == "true" ]; then
    echo
    echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
    save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_CLUSTER_DIR "${GIT_COMMIT_MSG}"
    remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO

    # Sync the top-level ArgoCD app registered with the worker that points at our app sets
    # Assume this is called "mas" .. may want to parameterise this in future if necessary
    # Syncing this will ensure all the appsets pointing at the configs above will generate the corresponding applications
    argocd_sync mas

    argocd_sync "ibm-cis-compliance-${CLUSTER_ID}"
    mcsp_check_argo_app_synced "ibm-cis-compliance-${CLUSTER_ID}" mas
    check_argo_app_healthy "ibm-cis-compliance-${CLUSTER_ID}" mas
  fi

}

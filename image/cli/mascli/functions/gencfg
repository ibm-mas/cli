#! /usr/bin/env python3

import click
import os
import sys
from jinja2 import Template
import yaml

# https://click.palletsprojects.com/en/8.1.x/parameters/
# To help you decide between options and arguments, the recommendation is to use arguments
# exclusively for things like going to subcommands or input filenames / URLs, and have
# everything else be an option instead.

# Arguments can do less than options. The following features are only available for options:
# - automatic prompting for missing input
# - act as flags (boolean or otherwise)
# - option values can be pulled from environment variables, arguments can not
# - options are fully documented in the help page, arguments are not (this is
# - intentional as arguments might be too specific to be automatically documented)
# On the other hand arguments, unlike options, can accept an arbitrary number of arguments.
# Options can strictly ever only accept a fixed number of arguments (defaults to 1), or
# they may be specified multiple times using Multiple Options.

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


def print_version(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    click.echo('v1.0.0')
    ctx.exit()


def abort_if_false(ctx, param, value):
    if not value:
        ctx.abort()


class MasCli(object):
    def __init__(self, foo="rabbit"):
        self.foo = foo


@click.group(context_settings=CONTEXT_SETTINGS)
@click.option('--version', is_flag=True, callback=print_version, expose_value=False, is_eager=True)
@click.pass_context
def cli(ctx):
    ctx.obj = MasCli()


@cli.command()
@click.pass_obj
@click.argument('instance-id', required=True, type=str)
@click.argument('scope', required=True, type=str)
@click.argument('jdbc-cfg-file', required=True, type=click.Path(exists=False))
@click.option('--application-id', required=False, type=str)
@click.option('--workspace-id', required=False, type=str)
@click.option("--name", help="Configuration Display Name", required=True, prompt='Configuration Display Name', type=str)
@click.option("--url", help="JDBC Connection String", required=True, prompt='JDBC Connection String', type=str)
@click.option("--username", help="JDBC User Name", required=True, prompt='JDBC User Name', type=str)
@click.option("--password", help="JDBC Password", required=True, prompt='JDBC Password', type=str)
@click.option("--ssl-enabled", help="SSL Enabled", required=True, prompt='SSL Enabled [y/n]', type=bool)
@click.option("--ssl-cert", help="Location of certificate file", required=False, type=click.Path(exists=True))
def jdbc(mascli, instance_id, scope, jdbc_cfg_file, **kwargs):

    """
    Generate a JDBC Config .. currently there are only uses for system and workspace-application scoped JDBC configs
    """

    templateFile = f"{sys.path[0]}/cfgs/jdbccfg.yml.j2"
    with open(templateFile) as tFile:
        template = Template(tFile.read())

    if scope == "workspace-application":
        mas_application_id =  kwargs["application_id"]
        mas_workspace_id = kwargs["workspace_id"]
    else:
        mas_application_id = ""
        mas_workspace_id = ""

    mas_instance_id = instance_id

    cfg_display_name = kwargs["name"]

    jdbc_url = kwargs["url"]
    jdbc_username = kwargs["username"]
    jdbc_password = kwargs["password"]
    jdbc_ssl_enabled = kwargs["ssl_enabled"]

    if jdbc_ssl_enabled:
        if "ssl_cert" not in kwargs:
            # If ssl_enabled is True but no ssl_cert option is provided, prompt the user for the certificate file path
            jdbc_cert_local_file = click.prompt("Path to certificate file", type=click.Path(exists=True))
        else:
            jdbc_cert_local_file = kwargs["ssl_cert"]
        with open(jdbc_cert_local_file) as cFile:
            jdbc_cert_local_file_content = cFile.read()
    else:
        jdbc_cert_local_file_content = ""

    click.echo(f"Configuring {scope} JDBC configuration for {instance_id}")

    cfg = template.render(
        scope=scope,

        mas_instance_id=mas_instance_id,
        mas_workspace_id=mas_workspace_id,
        mas_application_id=mas_application_id,

        cfg_display_name=cfg_display_name,

        jdbc_url=jdbc_url,
        jdbc_username=jdbc_username,
        jdbc_password=jdbc_password,

        jdbc_ssl_enabled=jdbc_ssl_enabled,
        jdbc_cert_local_file_content=jdbc_cert_local_file_content
    )

    with open(jdbc_cfg_file, 'w') as f:
        f.write(cfg)
        f.write('\n')


if __name__ == '__main__':
    cli()

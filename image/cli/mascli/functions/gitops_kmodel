#!/usr/bin/env bash

function gitops_kmodel_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM


Usage:
  mas gitops-kmodel [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -d, --dir ${COLOR_YELLOW}GITOPS_WORKING_DIR${TEXT_RESET}                                                 Directory for GitOps repository
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}                                                  Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}                                                  Cluster ID

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                                              Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}                            Secrets Manager key seperator string

ibm_kmodel(required):
      --aiservice-instance-id ${COLOR_YELLOW}AISERVICE_INSTANCE_ID${TEXT_RESET}                                           The AI Broker instance ID
      --primary-storage-class ${COLOR_YELLOW}PRIMARY_STORAGE_CLASS${TEXT_RESET}                                         Kubernetes storage class to be used for provisioning persistent volumes
      --mas-aibroker-storage-templates-bucket ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET${TEXT_RESET}         Storage templates bucket for Kmodels role
      --mas-aibroker-storage-pipelines-bucket ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_PIPELINES_BUCKET${TEXT_RESET}         Storage piplines bucket for Kmodels role
      --mas-aibroker-storage-tenants-bucket ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_TENANTS_BUCKET${TEXT_RESET}             Storage tenants bucket for Kmodels role

Kmodel Configuration:
      --aibroker-internal-tls ${COLOR_YELLOW}AIBROKER_INTERNAL_TLS${TEXT_RESET}                                         Identifier for the internal TLS configuration 
      --aiservice-namespace ${COLOR_YELLOW}AISERVICE_NAMESPACEE${TEXT_RESET}                                               The namespace where AI Broker is deployed
      --aiservice-storage-provider ${COLOR_YELLOW}AISERVICE_STORAGE_PROVIDER${TEXT_RESET}                         Backend storage service used by AI Broker to store models, pipelines, and tenant data
      --aiservice-storage_ssl ${COLOR_YELLOW}AISERVICE_STORAGE_SSL${TEXT_RESET}                                   Whether STORAGE uses SSL (true/false)
      --mas_aibroker-storage-host ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_HOST${TEXT_RESET}                                 Hostname or service name of the STORAGE backend
      --mas_aibroker-storage-port ${COLOR_YELLOW}MAS_AIBROKER_STORAGE_PORT${TEXT_RESET}                                 Port number STORAGE is exposed on
      --aiservice-storage-region ${COLOR_YELLOW}AISERVICE_STORAGE_REGION${TEXT_RESET}                             Storage region used in STORAGE (if applicable)
      --ssh-secret-name ${COLOR_YELLOW}SSH_SECRET_NAME${TEXT_RESET}                                                     SSH secret for securely provide SSH credentials
      --mas_aibroker_tenant_name ${COLOR_YELLOW}MAS_AIBROKER_TENANT_NAME${TEXT_RESET}                                   Aibroker Tenant name
      --aiservice-provision-tenant ${COLOR_YELLOW}AISERVICE_PROVISION_TENANT${TEXT_RESET}                         Whether to provision the AI Broker tenant (true/false)
      --mas-aibroker-connector-tag ${COLOR_YELLOW}MAS_AIBROKER_CONNECTOR_TAG${TEXT_RESET}                               AI Broker connector for integration or communication.
      --aiservice-saas ${COLOR_YELLOW}AISERVICE_SAAS${TEXT_RESET}                                                 AI Broker is deployed as a SaaS
      --model-id-unique-length ${COLOR_YELLOW}MODEL_ID_UNIQUE_LENGTH${TEXT_RESET}                                       Length of the unique identifier used for model IDs
      --model-id-prefix ${COLOR_YELLOW}MODEL_ID_PREFIX${TEXT_RESET}                                                     Model ID prefix
      --mas_icr_cp ${COLOR_YELLOW}MAS_ICR_CP${TEXT_RESET}                                                               Prefix to be used for generating model IDs
      --docker-server ${COLOR_YELLOW}DOCKER_SERVER${TEXT_RESET}                                                         Docker registry where kmodel container images is stored and pulled from.
      --image-store ${COLOR_YELLOW}IMAGE_STORE${TEXT_RESET}                                                             Docker image for storing models and artifacts.
      --image-watcher ${COLOR_YELLOW}IMAGE_WATCHER${TEXT_RESET}                                                         Docker image for monitoring and detecting changes to models or configurations.
      --image-controller ${COLOR_YELLOW}IMAGE_CONTROLLER${TEXT_RESET}                                                   Docker image for controlling and managing the deployment and lifecycle of models.
      --pullSecretName ${COLOR_YELLOW}PULLSECRETNAME${TEXT_RESET}                                                       IBM Pull Secret name

Automatic GitHub Push (Optional):
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path

Other Commands:
  -h, --help                                      Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}


function gitops_kmodel_noninteractive() {
  GITOPS_WORKING_DIR=$PWD/working-dir  
  SECRETS_KEY_SEPERATOR="/"
  GIT_COMMIT_MSG="gitops-kmodel commit"
  export REGION_ID=${REGION_ID:-${SM_AWS_REGION}}

  #adding default values 
  export AIBROKER_INTERNAL_TLS=${AIBROKER_INTERNAL_TLS:-"${AISERVICE_INSTANCE_ID}-internal-aiservice-tls"}
  export AISERVICE_NAMESPACE=${AISERVICE_NAMESPACE:-"mas-${AISERVICE_INSTANCE_ID}-aiservice"}
  export AISERVICE_STORAGE_PROVIDER=${AISERVICE_STORAGE_PROVIDER:-"aws"}
  export AISERVICE_STORAGE_SSL=${AISERVICE_STORAGE_SSL:-"true"}
  export AISERVICE_STORAGE_REGION=${AISERVICE_STORAGE_REGION:-""}
  export SSH_SECRET_NAME=${SSH_SECRET_NAME:-"${AISERVICE_INSTANCE_ID}-kmodel-aiservice-tls"}
  export MAS_AIBROKER_TENANT_NAME=${MAS_AIBROKER_TENANT_NAME:-"user"}
  export TENANT_NAMESPACE=${TENANT_NAMESPACE:-"aiservice-${MAS_AIBROKER_TENANT_NAME}"}
  export AISERVICE_PROVISION_TENANT=${AISERVICE_PROVISION_TENANT:-"provision-tenant"}
  export MAS_AIBROKER_CONNECTOR_TAG=${MAS_AIBROKER_CONNECTOR_TAG:-"1.0.2"}
  #export AISERVICE_PIPELINE_STEPS_TAG=${AISERVICE_PIPELINE_STEPS_TAG:-"1.0.3"}
  export AISERVICE_SAAS=${AISERVICE_SAAS:-"false"}
  export MODEL_ID_UNIQUE_LENGTH=${MODEL_ID_UNIQUE_LENGTH:-"15"}
  export MODEL_ID_PREFIX=${MODEL_ID_PREFIX:-"m"}  
  export MAS_ICR_CP=${MAS_ICR_CP:-"docker-na-public.artifactory.swg-devops.com/wiotp-docker-local"}
  export DOCKER_SERVER=${DOCKER_SERVER:-"${MAS_ICR_CP}/aiservice"}
  export PULLSECRETNAME=${PULLSECRETNAME:-"ibm-entitlement"}
  
  export AISERVICE_CHANNEL=${AISERVICE_CHANNEL:-"9.1.x"}
  
  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # AWS Secrets Manager Configuration
      --sm-aws-secret-region)
        export SM_AWS_REGION=$1
        export REGION_ID=$1
        shift
        ;;
      --sm-aws-access-key)
        export SM_AWS_ACCESS_KEY_ID=$1 && shift
        ;;
      --sm-aws-secret-key)
        export SM_AWS_SECRET_ACCESS_KEY=$1 && shift
        ;;
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;

      # kmodel - all input params default + sm
      --aiservice-instance-id)
        export AISERVICE_INSTANCE_ID=$1 && shift
        ;;

      --aibroker-internal-tls)
        export AIBROKER_INTERNAL_TLS=$1 && shift
        ;;
      
      --aiservice-namespace)
        export AISERVICE_NAMESPACE=$1 && shift
        ;;

      --pull-secret-name)
        export PULL_SECRET_NAME=$1 && shift
        ;;

      --aiservice-storage-provider)
        export AISERVICE_STORAGE_PROVIDER=$1 && shift
        ;;

      --aiservice-storage_ssl)
        export AISERVICE_STORAGE_SSL=$1 && shift
        ;;

      --mas-aibroker-storage-host)
        export MAS_AIBROKER_STORAGE_HOST=$1 && shift
        ;;

      --mas-aibroker-storage-port)
        export MAS_AIBROKER_STORAGE_PORT=$1 && shift
        ;;

      --mas-aibroker-storage-region)
        export AISERVICE_STORAGE_REGION=$1 && shift
        ;;

      --mas-aibroker-storage-templates-bucket)
        export MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET=$1 && shift
        ;;

      --mas-aibroker-storage-tenants-bucket)
        export MAS_AIBROKER_STORAGE_TENANTS_BUCKET=$1 && shift
        ;;

      --mas-aibroker-storage-pipelines-bucket)
        export MAS_AIBROKER_STORAGE_PIPELINES_BUCKET=$1 && shift
        ;;

      --ssh-secret-name)
        export SSH_SECRET_NAME=$1 && shift
        ;;

      --mas_icr_cp)
        export MAS_ICR_CP=$1 && shift
        ;;
        
      --aiservice-channel)
        export AISERVICE_CHANNEL=$1 && shift
        ;;
        
      --docker-server)
        export DOCKER_SERVER=$1 && shift
        ;;

      --tenant-namespace)
        export TENANT_NAMESPACE=$1 && shift
        ;;

      --aiservice-provision-tenant)
        export AISERVICE_PROVISION_TENANT=$1 && shift
        ;;

      --primary-storage-class)
        export PRIMARY_STORAGE_CLASS=$1 && shift
        ;;

      --image-store)
        export IMAGE_STORE=$1 && shift
        ;;

      --image-watcher)
        export IMAGE_WATCHER=$1 && shift
        ;;

      --image-controller)
        export IMAGE_CONTROLLER=$1 && shift
        ;;

      # --aiservice-pipeline-steps-tag)
      #   export AISERVICE_PIPELINE_STEPS_TAG=$1 && shift
      #   ;;

      --mas-aibroker-connector-tag)
        export MAS_AIBROKER_CONNECTOR_TAG=$1 && shift
        ;;

      --aiservice-saas)
        export AISERVICE_SAAS=$1 && shift
        ;;

      --model-id-unique-length)
        export MODEL_ID_UNIQUE_LENGTH=$1 && shift
        ;;

      --model-id-prefix)
        export MODEL_ID_PREFIX=$1 && shift
        ;;
      
      --pullSecretName)
        export PULLSECRETNAME=$1 && shift
        ;;

	    # optional parameters if needed

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -S|--github-ssh)
        export GIT_SSH=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;

      # Other Commands
      -h|--help)
        gitops_kmodel_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_kmodel_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done


  [[ -z "$GITOPS_WORKING_DIR" ]] && gitops_kmodel_help "GITOPS_WORKING_DIR is not set"
  [[ -z "$ACCOUNT_ID" ]] && gitops_kmodel_help "ACCOUNT_ID is not set"
  [[ -z "$CLUSTER_ID" ]] && gitops_kmodel_help "CLUSTER_ID is not set"
  [[ -z "$REGION_ID" && -z "$SM_AWS_REGION" ]] && gitops_kmodel_help "REGION_ID or SM_AWS_REGION is not set"

  if [[ "$GITHUB_PUSH" == "true" ]]; then
    [[ -z "$GITHUB_HOST" ]] && gitops_kmodel_help "GITHUB_HOST is not set"
    [[ -z "$GITHUB_ORG" ]] && gitops_kmodel_help "GITHUB_ORG is not set"
    [[ -z "$GITHUB_REPO" ]] && gitops_kmodel_help "GITHUB_REPO is not set"
    [[ -z "$GIT_BRANCH" ]] && gitops_kmodel_help "GIT_BRANCH is not set"
  fi

  # add validation for those variable which have the value needed for further execution
  [[ -z "$AISERVICE_INSTANCE_ID" ]] && gitops_kmodel_help "AISERVICE_INSTANCE_ID is not set. Please provide the AI Broker instance ID using --aiservice-instance-id."
  [[ -z "$PRIMARY_STORAGE_CLASS" ]] && gitops_kmodel_help "PRIMARY_STORAGE_CLASS is not set. Please provide the primary storage class using --primary-storage-class."
  [[ -z "$IMAGE_STORE" ]] && gitops_kmodel_help "IMAGE_STORE is not set. Please provide the image store using --image-store."
  [[ -z "$IMAGE_WATCHER" ]] && gitops_kmodel_help "IMAGE_WATCHER is not set. Please provide the image watcher using --image-watcher."
  [[ -z "$IMAGE_CONTROLLER" ]] && gitops_kmodel_help "IMAGE_CONTROLLER is not set. Please provide the image controller using --image-controller."

}

function gitops_kmodel() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_kmodel_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_kmodel_interactive
  fi

  # catch errors
  set -o pipefail
  trap 'echo "[ERROR] Error occurred at $BASH_SOURCE, line $LINENO, exited with $?"; exit 1' ERR

  # Prepare directories
  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${ACCOUNT_ID}/${CLUSTER_ID}/${AISERVICE_INSTANCE_ID}
  
  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ..................... ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Region ID ...................... ${COLOR_MAGENTA}${REGION_ID}"
  echo_reset_dim "Cluster ID ..................... ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Cluster Config Directory ....... ${COLOR_MAGENTA}${GITOPS_CLUSTER_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "AWS Secrets Manager" "    "
  echo_reset_dim "Region ......................... ${COLOR_MAGENTA}${SM_AWS_REGION}"
  echo_reset_dim "Secret Key ..................... ${COLOR_MAGENTA}${SM_AWS_ACCESS_KEY_ID:0:4}<snip>"
  echo_reset_dim "Access Key ..................... ${COLOR_MAGENTA}${SM_AWS_SECRET_ACCESS_KEY:0:4}<snip>"
  echo_reset_dim "Secrets Path ................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  if [[ "$GITHUB_PUSH" == "true" ]]; then
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_GREEN}Enabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
    echo_reset_dim "Host .................................. ${COLOR_MAGENTA}${GITHUB_HOST}"
    echo_reset_dim "Organization .......................... ${COLOR_MAGENTA}${GITHUB_ORG}"
    echo_reset_dim "Repository ............................ ${COLOR_MAGENTA}${GITHUB_REPO}"
    echo_reset_dim "Branch ................................ ${COLOR_MAGENTA}${GIT_BRANCH}"
  else
    echo_h2 "GitOps Target" "    "
    echo_reset_dim "Automatic Push ........................ ${COLOR_RED}Disabled"
    echo_reset_dim "Working Directory ..................... ${COLOR_MAGENTA}${GITOPS_WORKING_DIR}"
  fi
  reset_colors

  # echo all the variables of gitops envs

  echo "${TEXT_DIM}"
  echo_h2 "kmodel" "    "
  echo_reset_dim "AI Broker Instance Id ............................. ${COLOR_MAGENTA}${AISERVICE_INSTANCE_ID}"
  echo_reset_dim "AI Broker Internal TLS ............................ ${COLOR_MAGENTA}${AIBROKER_INTERNAL_TLS}"
  echo_reset_dim "AI Broker Namespace ............................... ${COLOR_MAGENTA}${AISERVICE_NAMESPACE}"
  echo_reset_dim "AI Service Storage Provider ....................... ${COLOR_MAGENTA}${AISERVICE_STORAGE_PROVIDER}"
  echo_reset_dim "MAS AI Broker Storage SSL ......................... ${COLOR_MAGENTA}${AISERVICE_STORAGE_SSL}"
  echo_reset_dim "MAS AI Broker Storage Templates Bucket ............ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET}"
  echo_reset_dim "MAS AI Broker Storage Tenants Bucket .............. ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_TENANTS_BUCKET}"
  echo_reset_dim "MAS AI Broker Storage Pipelines Bucket ............ ${COLOR_MAGENTA}${MAS_AIBROKER_STORAGE_PIPELINES_BUCKET}"
  echo_reset_dim "SSH Secret Name ................................... ${COLOR_MAGENTA}${SSH_SECRET_NAME}"
  echo_reset_dim "MAS ICR CP Registry ............................... ${COLOR_MAGENTA}${MAS_ICR_CP}"
  echo_reset_dim "Docker Server ..................................... ${COLOR_MAGENTA}${DOCKER_SERVER}"
  echo_reset_dim "Tenant Namespace .................................. ${COLOR_MAGENTA}${TENANT_NAMESPACE}"
  echo_reset_dim "AI Service Provision Tenant ....................... ${COLOR_MAGENTA}${AISERVICE_PROVISION_TENANT}"
  echo_reset_dim "Primary Storage Class ............................. ${COLOR_MAGENTA}${PRIMARY_STORAGE_CLASS}"
  echo_reset_dim "Image Store ....................................... ${COLOR_MAGENTA}${IMAGE_STORE}"
  echo_reset_dim "Image Watcher ..................................... ${COLOR_MAGENTA}${IMAGE_WATCHER}"
  echo_reset_dim "Image Controller .................................. ${COLOR_MAGENTA}${IMAGE_CONTROLLER}"
  #echo_reset_dim "AiService Pipeline Steps Tag .................. ${COLOR_MAGENTA}${AISERVICE_PIPELINE_STEPS_TAG}"
  echo_reset_dim "MAS AI Broker Connector Tag ....................... ${COLOR_MAGENTA}${MAS_AIBROKER_CONNECTOR_TAG}"
  echo_reset_dim "MAS AI Broker SAAS ................................ ${COLOR_MAGENTA}${AISERVICE_SAAS}"
  echo_reset_dim "Model ID Unique Length ............................ ${COLOR_MAGENTA}${MODEL_ID_UNIQUE_LENGTH}"
  echo_reset_dim "Model ID Prefix ................................... ${COLOR_MAGENTA}${MODEL_ID_PREFIX}"

  reset_colors

  # Set up secrets
  # ---------------------------------------------------------------------------
  CURRENT_DIR=$PWD
  # TEMP_DIR=$GITOPS_CLUSTER_DIR/tmp-kmodel
  # mkdir -p ${TEMP_DIR}

  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login
  
  SECRETS_PREFIX="${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}"

  # check if those are already present 
  export IMAGE_PULL_SECRET_B64=${SECRETS_PREFIX}ibm_entitlement#image_pull_secret_b64
  
  # STORAGE
  export SM_STORAGE_ACCESSKEY=${SECRETS_PREFIX}storage#sm_storage_accesskey
  export SM_STORAGE_SECRETKEY=${SECRETS_PREFIX}storage#sm_storage_secretkey
  export SM_STORAGE_HOST=${SECRETS_PREFIX}storage#sm_storage_host
  export SM_STORAGE_PORT=${SECRETS_PREFIX}storage#sm_storage_port
  export SM_STORAGE_BUCKET_TEMPLATES=${SECRETS_PREFIX}storage#sm_storage_bucket_templates
  export SM_STORAGE_BUCKET_TENANTS=${SECRETS_PREFIX}storage#sm_storage_bucket_tenants
  export SM_STORAGE_BUCKET_PIPELINES=${SECRETS_PREFIX}storage#sm_storage_bucket_pipelines

# check for those variables present into the aws sm 
  sm_verify_secret_exists ${SECRETS_PREFIX}ibm_entitlement "image_pull_secret_b64"

  sm_verify_secret_exists ${SECRETS_PREFIX}storage "sm_storage_host,sm_storage_accesskey,sm_storage_secretkey,sm_storage_bucket_templates,sm_storage_bucket_tenants,sm_storage_bucket_pipelines"

    # finally push them into the git repo
    # ---------------------------------------------------------------------------

    if [ -z $GIT_SSH ]; then
      export GIT_SSH=false
    fi

    # Clone github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo_h2 "Cloning GitHub repo $GITHUB_ORG $GITHUB_REPO"
      clone_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH $GITOPS_WORKING_DIR $GIT_SSH
    fi

    mkdir -p ${GITOPS_CLUSTER_DIR}

    # Generate ArgoApps
    # ---------------------------------------------------------------------------
    echo
    echo_h2 "Generating kmodel operator Applications"
    echo "- kmodel operator"

    echo "Generating kmodel file ${GITOPS_CLUSTER_DIR}/ibm-kmodel.yaml"
    jinjanate_commmon $CLI_DIR/templates/gitops/appset-configs/cluster/instance/ibm-kmodel.yaml.j2 ${GITOPS_CLUSTER_DIR}/ibm-kmodel.yaml


    # Commit and push to github target repo
    # ---------------------------------------------------------------------------
    if [ "$GITHUB_PUSH" == "true" ]; then
      echo
      echo_h2 "Commit and push changes to GitHub repo $GITHUB_ORG $GITHUB_REPO"
      save_to_target_git_repo $GITHUB_HOST $GITHUB_ORG $GITHUB_REPO $GIT_BRANCH "${GITOPS_WORKING_DIR}/${GITHUB_REPO}" "${GIT_COMMIT_MSG}"
      remove_git_repo_clone $GITOPS_WORKING_DIR/$GITHUB_REPO
    fi

    # rm -rf $TEMP_DIR
    rm -rf $GITOPS_WORKING_DIR

  exit 0
}

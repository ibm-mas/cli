#!/usr/bin/env bash

function gitops_deprovision_cos_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat << EOM
Usage:
  mas gitops-deprovision-cos [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

GitOps Configuration:
  -a, --account-id ${COLOR_YELLOW}ACCOUNT_ID${TEXT_RESET}                                                  Account name that the cluster belongs to
  -c, --cluster-id ${COLOR_YELLOW}CLUSTER_ID${TEXT_RESET}                                                  Cluster ID

Secrets Manager:
      --secrets-path ${COLOR_YELLOW}SECRETS_PATH${TEXT_RESET}                                              Secrets Manager path
      --secrets-key-seperator ${COLOR_YELLOW}SECRETS_KEY_SEPERATOR${TEXT_RESET}                            Secrets Manager key seperator string

IBM Maximo Application Suite:
      -m, --mas-instance-id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}                                    IBM Suite Maximo Application Suite Instance ID

COS Provider Selection:
      --cos-action ${COLOR_YELLOW}COS_ACTION${TEXT_RESET}                                                  provision or deprovision
      --cos-type ${COLOR_YELLOW}COS_TYPE${TEXT_RESET}                                                      COS type, only ibm supported. (aws only supported internal to IBM)
      --cos-resourcegroup ${COLOR_YELLOW}COS_RESOURCEGROUP${TEXT_RESET}                                    IBM Cloud resource group to set
      --cos-apikey ${COLOR_YELLOW}COS_APIKEY${TEXT_RESET}                                                  IBM Cloud APIkey

Automatic GitHub Push:
  -P, --github-push ${COLOR_YELLOW}GITHUB_PUSH${TEXT_RESET}        Enable automatic push to GitHub
  -H, --github-host ${COLOR_YELLOW}GITHUB_HOST${TEXT_RESET}        GitHub Hostname for your GitOps repository
  -O, --github-org  ${COLOR_YELLOW}GITHUB_ORG${TEXT_RESET}         Github org for your GitOps repository
  -R, --github-repo ${COLOR_YELLOW}GITHUB_REPO${TEXT_RESET}        Github repo for your GitOps repository
  -B, --git-branch ${COLOR_YELLOW}GIT_BRANCH${TEXT_RESET}          Git branch to commit to of your GitOps repository
  -M, --git-commit-msg ${COLOR_YELLOW}GIT_COMMIT_MSG${TEXT_RESET}  Git commit message to use when committing to of your GitOps repository
  -S , --github-ssh  ${COLOR_YELLOW}GIT_SSH${TEXT_RESET}           Git ssh key path


Other Commands:
      -h, --help                                                                                           Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}


function gitops_deprovision_cos_noninteractive() {
  SECRETS_KEY_SEPERATOR="/"

  while [[ $# -gt 0 ]]
  do
    key="$1"
    shift
    case $key in
      # GitOps Configuration
      -d|--dir)
        export GITOPS_WORKING_DIR=$1 && shift
        ;;
      -a|--account-id)
        export ACCOUNT_ID=$1 && shift
        ;;
      -c|--cluster-id)
        export CLUSTER_ID=$1 && shift
        ;;

      # Secrets Manager
      --secrets-path)
        export SECRETS_PATH=$1 && shift
        ;;
      --secrets-key-seperator)
        export SECRETS_KEY_SEPERATOR=$1 && shift
        ;;

      # MAS
      -m|--mas-instance-id)
        export MAS_INSTANCE_ID=$1 && shift
        ;;

      # COS Provider Selection
      --cos-action)
        export COS_ACTION=$1 && shift
        ;;
      --cos-type)
        export COS_TYPE=$1 && shift
        ;;
      --cos-resourcegroup)
        export COS_RESOURCEGROUP=$1 && shift
        ;;
      --cos-apikey)
        export COS_APIKEY=$1 && shift
        ;;

      # Automatic GitHub Push
      -P|--github-push)
        export GITHUB_PUSH=true
        ;;
      -H|--github-host)
        export GITHUB_HOST=$1 && shift
        ;;
      -O|--github-org)
        export GITHUB_ORG=$1 && shift
        ;;
      -R|--github-repo)
        export GITHUB_REPO=$1 && shift
        ;;
      -B|--git-branch)
        export GIT_BRANCH=$1 && shift
        ;;
      -M|--git-commit-msg)
        export GIT_COMMIT_MSG=$1 && shift
        ;;


      # Other Commands
      -h|--help)
        gitops_deprovision_cos_help
        ;;
      *)
        # unknown option
        echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
        gitops_deprovision_cos_help  "Usage Error: Unsupported option \"${key}\" "
        exit 1
        ;;
      esac
  done


  [[ -z "$CLUSTER_ID" ]] && gitops_deprovision_cos_help "CLUSTER_ID is not set"
  [[ -z "$COS_TYPE" ]] && gitops_deprovision_cos_help "COS_TYPE is not set"
  if [[ "${COS_TYPE}" == "ibm" ]]; then
    [[ -z "$COS_APIKEY" ]] && gitops_deprovision_cos_help "COS_APIKEY is not set"
  fi
  [[ -z "$ACCOUNT_ID" ]] && gitops_deprovision_cos_help "ACCOUNT_ID is not set"
  [[ -z "$MAS_INSTANCE_ID" ]] && gitops_deprovision_cos_help "MAS_INSTANCE_ID is not set"
}

function gitops_deprovision_cos() {
  # Take the first parameter off (it will be create-gitops)
  shift
  if [[ $# -gt 0 ]]; then
    gitops_deprovision_cos_noninteractive "$@"
  else
    echo "Not supported yet"
    exit 1
    gitops_deprovision_cos_interactive
  fi

  # catch errors
  set -o pipefail
  trap 'echo "[ERROR] Error occurred at $BASH_SOURCE, line $LINENO, exited with $?"; exit 1' ERR

  rm -rf $GITOPS_WORKING_DIR
  mkdir -p ${GITOPS_WORKING_DIR}
  GITOPS_CLUSTER_DIR=${GITOPS_WORKING_DIR}/${GITHUB_REPO}/${CLUSTER_ID}
  TEMP_DIR=$GITOPS_CLUSTER_DIR/tmp-cos-deprovision
  mkdir -p $TEMP_DIR

  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h2 "Target" "    "
  echo_reset_dim "Account ID ............................ ${COLOR_MAGENTA}${ACCOUNT_ID}"
  echo_reset_dim "Cluster ID ............................ ${COLOR_MAGENTA}${CLUSTER_ID}"
  echo_reset_dim "Application Directory ................. ${COLOR_MAGENTA}${TEMP_DIR}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "Secrets Manager" "    "
  echo_reset_dim "Secrets Path .......................... ${COLOR_MAGENTA}${SECRETS_PATH}"
  reset_colors

  echo "${TEXT_DIM}"
  echo_h2 "COS" "    "
  echo_reset_dim "COS action  ........................... ${COLOR_MAGENTA}${COS_ACTION}"
  echo_reset_dim "COS type  ............................. ${COLOR_MAGENTA}${COS_TYPE}"
  echo_reset_dim "COS Resource Group  ................... ${COLOR_MAGENTA}${COS_RESOURCEGROUP}"
  echo_reset_dim "COS ApiKey ............................ ${COLOR_MAGENTA}${COS_APIKEY:0:8}<snip>"

  echo "${TEXT_DIM}"
  echo_h2 "IBM Maximo Application Suite" "    "
  echo_reset_dim "Instance ID ............................. ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"

  reset_colors

  AVP_TYPE=aws  # Support for IBM will be added later
  sm_login

  export COS_ACTION="deprovision"
  export MAS_CONFIG_DIR=$TEMP_DIR
  export MAS_INSTANCE_ID=${MAS_INSTANCE_ID:-CLUSTER_ID}

  if [[ "$COS_TYPE" == "ibm" ]]; then

    export COS_SECRET=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}cos
    export ROLE_NAME=cos && ansible-playbook ibm.mas_devops.run_role

    rc=$?
    [ $rc -ne 0 ] && exit $rc

    echo -e "Deleting secret  $COS_SECRET"
    sm_delete_secret $COS_SECRET

  elif [[ "$COS_TYPE" == "aws" ]]; then

    curl https://releases.hashicorp.com/terraform/1.9.2/terraform_1.9.2_linux_amd64.zip --output $TEMP_DIR/terraform_1.9.2_linux_amd64.zip
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    unzip $TEMP_DIR/terraform_1.9.2_linux_amd64.zip -d $TEMP_DIR
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    chmod +x $TEMP_DIR/terraform

    cat > $TEMP_DIR/main.tf <<EOF
    locals {
      name_prefix = "$ACCOUNT_ID"
    }

    output "s3c" {
      value     = module.s3a
      sensitive = false
    }

    output "s3a" {
      value     = module.s3a
      sensitive = false
    }

    output "s3l" {
      value     = module.s3l
      sensitive = false
    }

    output "s3db2" {
      value     = module.s3db2
      sensitive = false
    }

    module "s3c" {
      name_prefix = local.name_prefix
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3.git//module?ref=1.0.1"
      s3_bucket               = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3c"
      s3_encryption           = true
      s3_encryption_algorithm = "AES256"
      force_bucket_destroy    = true
    }

    module "s3a" {
      name_prefix = local.name_prefix
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3.git//module?ref=1.0.1"
      s3_bucket               = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3a"
      s3_encryption           = true
      s3_encryption_algorithm = "AES256"
      force_bucket_destroy    = true
    }

    module "s3l" {
      name_prefix = local.name_prefix
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3.git//module?ref=1.0.1"
      s3_bucket               = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3l"
      s3_encryption           = true
      s3_encryption_algorithm = "AES256"
      force_bucket_destroy    = true
    }

    module "s3db2" {
      name_prefix = local.name_prefix
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3.git//module?ref=1.0.1"
      s3_bucket               = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3db2"
      s3_encryption           = true
      s3_encryption_algorithm = "AES256"
      force_bucket_destroy    = true
    }

    output "s3c_access_point" {
      value     = module.s3c_access_point
      sensitive = false
    }

    output "s3a_access_point" {
      value     = module.s3a_access_point
      sensitive = false
    }

    output "s3l_access_point" {
      value     = module.s3l_access_point
      sensitive = false
    }

    output "s3db2_access_point" {
      value     = module.s3db2_access_point
      sensitive = false
    }

    module "s3c_access_point" {
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3-access-point.git//module?ref=1.0.10"
      name_prefix = local.name_prefix
      s3_access_point_bucket_id      = module.s3c.s3_bucket_id
      s3_bucket_arn                  = module.s3c.s3_bucket_arn
      s3_bucket_region               = module.s3c.s3_bucket_region
      s3_access_point_name           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3c-access"
      s3_access_point_policy_actions = [ "s3:DeleteObject", "s3:GetObject", "s3:GetObjectAcl", "s3:PutObject", "s3:PutObjectAcl", "s3:ListBucket" ]
      s3_access_point_user           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3c-user"
      mas_cluster_id                 = "$CLUSTER_ID"
      mas_instance_id                = "$MAS_INSTANCE_ID"
      secret_recovery_days           = 0
      secret_suffix                  = "cos"
      cos_secret_format              = true
    }

    module "s3a_access_point" {
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3-access-point.git//module?ref=1.0.10"
      name_prefix = local.name_prefix
      s3_access_point_bucket_id      = module.s3a.s3_bucket_id
      s3_bucket_arn                  = module.s3a.s3_bucket_arn
      s3_bucket_region               = module.s3a.s3_bucket_region
      s3_access_point_name           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3a-access"
      s3_access_point_policy_actions = [ "s3:DeleteObject", "s3:GetObject", "s3:GetObjectAcl", "s3:PutObject", "s3:PutObjectAcl", "s3:ListBucket" ]
      s3_access_point_user           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3a-user"
      mas_cluster_id                 = "$CLUSTER_ID"
      mas_instance_id                = "$MAS_INSTANCE_ID"
      secret_recovery_days           = 0
      secret_suffix                  = "manage_attachments/cosawssecret"
      manage_secret_format           = true
    }

    module "s3l_access_point" {
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3-access-point.git//module?ref=1.0.10"
      name_prefix = local.name_prefix
      s3_access_point_bucket_id      = module.s3l.s3_bucket_id
      s3_bucket_arn                  = module.s3l.s3_bucket_arn
      s3_bucket_region               = module.s3l.s3_bucket_region
      s3_access_point_name           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3l-access"
      s3_access_point_policy_actions = [ "s3:DeleteObject", "s3:GetObject", "s3:GetObjectAcl", "s3:PutObject", "s3:PutObjectAcl", "s3:ListBucket" ]
      s3_access_point_user           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3l-user"
      mas_cluster_id                 = "$CLUSTER_ID"
      mas_instance_id                = "$MAS_INSTANCE_ID"
      secret_recovery_days           = 0
      secret_suffix                  = "manage_logging/s3secretkey"
      manage_secret_format           = true
    }

    module "s3db2_access_point" {
      source = "git::https://git:$GITHUB_PAT@github.ibm.com/maximoappsuite/mas-iac-aws-s3-access-point.git//module?ref=1.0.10"
      name_prefix = local.name_prefix
      s3_access_point_bucket_id      = module.s3db2.s3_bucket_id
      s3_bucket_arn                  = module.s3db2.s3_bucket_arn
      s3_bucket_region               = module.s3db2.s3_bucket_region
      s3_access_point_name           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3db2-access"
      s3_access_point_policy_actions = [ "s3:DeleteObject", "s3:GetObject", "s3:GetObjectAcl", "s3:PutObject", "s3:PutObjectAcl", "s3:ListBucket" ]
      s3_access_point_user           = "${CLUSTER_ID}-${MAS_INSTANCE_ID}-s3db2-user"
      mas_cluster_id                 = "$CLUSTER_ID"
      mas_instance_id                = "$MAS_INSTANCE_ID"
      secret_recovery_days           = 0
      secret_suffix                  = "db2_backup"
      manage_secret_format           = true
    }
EOF

    cat > $TEMP_DIR/provider.tf <<EOF
    provider "aws" {
      region = "$SM_AWS_REGION"
    }
EOF

    cat > $TEMP_DIR/backend.tf <<EOF
    terraform {
      backend "s3" {
        bucket = "fvtsaas-automation-bucket"
        key = "${CLUSTER_ID}-${MAS_INSTANCE_ID}.tfstate"
        region = "us-east-1"
      }
    }
EOF

    echo $TEMP_DIR/terraform -chdir=$TEMP_DIR init -input=false
    $TEMP_DIR/terraform -chdir=$TEMP_DIR init -input=false
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    echo $TEMP_DIR/terraform -chdir=$TEMP_DIR plan -destroy -input=false -out=tfplan
    $TEMP_DIR/terraform -chdir=$TEMP_DIR plan -destroy -input=false -out=tfplan
    rc=$?
    [ $rc -ne 0 ] && exit $rc

    # export TF_LOG="TRACE"
    echo $TEMP_DIR/terraform -chdir=$TEMP_DIR apply -auto-approve -input=false tfplan
    $TEMP_DIR/terraform -chdir=$TEMP_DIR apply -auto-approve -input=false tfplan
    rc=$?
    [ $rc -ne 0 ] && exit $rc

  fi

  rm -rf $TEMP_DIR
  rm -rf $GITOPS_WORKING_DIR

  exit 0
}


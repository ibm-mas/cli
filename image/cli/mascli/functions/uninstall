#!/bin/bash

function uninstall_help() {
  [[ -n "$1" ]] && echo_warning "$1"
  reset_colors
  cat <<EOM
Usage:
  mas uninstall [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

MAS Instance Selection (Required):
  -i, --id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}                                         MAS Instance ID to uninstall

Other Commands:
      --no-confirm                                                 Launch the uninstall without prompting for confirmation
  -h, --help                                                       Show this help message
EOM
  [[ -n "$1" ]] && exit 1 || exit 0
}

function check_mas_project_exists() {
  if [ -z "${MAS_NS}" ]; then
    prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID
    MAS_NS="mas-$MAS_INSTANCE_ID-core"
  fi

  if check_project_exists $MAS_NS; then
    export MAS_NS
  else
    echo -e "${COLOR_RED}Error: The project \"${MAS_NS}\"${TEXT_RESET} does not exist.\n"
    exit 1
  fi
}

function uninstall_noninteractive() {
  while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case $key in
    -i | --id)
      MAS_INSTANCE_ID=$1 && shift
      ;;
    --no-confirm)
      NO_CONFIRM=true
      ;;
    -h | --help)
      uninstall_help
      ;;
    *)
      # unknown option
      echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${TEXT_RESET}\n"
      uninstall_help
      exit 1
      ;;
    esac
  done

  # Check all args have been set
  [[ -z "$MAS_INSTANCE_ID" ]] && uninstall_help "MAS_INSTANCE_ID is not set"
}

# This function checks if dependencies are set to "uninstall"
function deps_prompt_conditions() {
  key="$1"
  case $key in
  SLS_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]] || [[ ${CERT_MANAGER_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  MONGODB_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]] || [[ ${CERT_MANAGER_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  UDS_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  CERT_MANAGER_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]] || [[ ${COMMON_SERVICES_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  COMMON_SERVICES_ACTION)
    if [[ ${IBM_CATALOGS_ACTION} == "uninstall" ]]; then
      true
    else
      false
    fi
    ;;
  *)
    # unknown key
    false
    ;;
  esac
}

function validate_action_param() {
  msg=$1
  action=$2

  if [[ -z ${!action} ]] || [[ ${!action} != "none" ]] && [[ ${!action} != "uninstall" ]]; then
    if deps_prompt_conditions $action; then
      export $action="uninstall"
      return
    fi
    if prompt_for_confirm "$msg"; then
      export $action="uninstall"
    else
      export $action="none"
    fi
  fi
}

function prompt_for_deps_to_uninstall() {
  echo
  echo_h2 "Uninstall MAS Dependencies"

  validate_action_param "Uninstall Cluster Monitoring?" CLUSTER_MONITORING_ACTION
  validate_action_param "Uninstall IBM Catalogs?" IBM_CATALOGS_ACTION
  validate_action_param "Uninstall IBM Common Services?" COMMON_SERVICES_ACTION
  validate_action_param "Uninstall IBM Cert Manager?" CERT_MANAGER_ACTION
  validate_action_param "Uninstall IBM User Data Services?" UDS_ACTION
  validate_action_param "Uninstall MongoDB?" MONGODB_ACTION
  validate_action_param "Uninstall IBM Suite Licensing Service?" SLS_ACTION
}

function review_uninstall_settings() {
  echo
  reset_colors
  echo_h2 "Review Settings"

  echo "${TEXT_DIM}"
  echo_h4 "IBM Maximo Application Suite"

  echo_reset_dim "Instance ID ..................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
  echo_reset_dim "Namespace   ..................... ${COLOR_MAGENTA}${MAS_NS}"

  reset_colors
  echo "${TEXT_DIM}"
  echo_h4 "MAS Dependencies"

  echo_reset_dim "Cluster Monitoring .............. Action: ${COLOR_MAGENTA}${CLUSTER_MONITORING_ACTION}"
  echo_reset_dim "IBM Catalogs .................... Action: ${COLOR_MAGENTA}${IBM_CATALOGS_ACTION}"
  echo_reset_dim "IBM Common Services ............. Action: ${COLOR_MAGENTA}${COMMON_SERVICES_ACTION}"
  echo_reset_dim "IBM Cert Manager ................ Action: ${COLOR_MAGENTA}${CERT_MANAGER_ACTION}"
  echo_reset_dim "IBM User Data Services .......... Action: ${COLOR_MAGENTA}${UDS_ACTION}"
  echo_reset_dim "MongoDB ......................... Action: ${COLOR_MAGENTA}${MONGODB_ACTION}"
  echo_reset_dim "IBM Suite Licensing Service ..... Action: ${COLOR_MAGENTA}${SLS_ACTION}"

  echo
  reset_colors
  if [[ "$NO_CONFIRM" != "true" ]]; then
    prompt_for_confirm "Proceed with these settings" || exit 0
  fi
}

function launch_uninstall() {
  echo
  echo_h2 "Launch Uninstall"

  # Create namespace, install MAS Tekton definitions, configure RBAC
  pipelines_install_tasks || exit 1

  # Replace ALL environment variables in templates
  eval "echo \"$(cat $CLI_DIR/templates/pipelinerun-uninstall.yaml)\"" >$CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-uninstall.yaml

  # Start pipeline execution
  oc -n mas-$MAS_INSTANCE_ID-pipelines create -f $CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-uninstall.yaml &>>$LOGFILE || exit 1
  echo -e "${COLOR_GREEN}Uninstall started successfully${TEXT_RESET}"
  echo -e "\nView progress:\n  ${COLOR_CYAN}${TEXT_UNDERLINE}https://${OCP_CONSOLE_ROUTE}/pipelines/ns/mas-$MAS_INSTANCE_ID-pipelines${TEXT_RESET}${TEXT_RESET}"
  echo
}

function uninstall() {
  # Take the first parameter off (it will be uninstall)
  shift
  if [[ $# -gt 0 ]]; then
    uninstall_noninteractive "$@"
  fi

  connect
  check_mas_project_exists
  prompt_for_deps_to_uninstall
  review_uninstall_settings
  launch_uninstall
}
